
# line 1 "ragel/i18n/nl.rb.rl"
require 'gherkin/native'

module Gherkin
  module Lexer
    class Nl #:nodoc:
      native_impl('gherkin')


      # line 125 "ragel/i18n/nl.rb.rl"


      def initialize(listener)
        @listener = listener

        # Initialize ivars to avoid warnings
        @keyword = nil

        # line 21 "lib/gherkin/lexer/nl.rb"
        class << self
          attr_accessor :_lexer_actions
          private :_lexer_actions, :_lexer_actions=
        end
        self._lexer_actions = [
          0, 1, 0, 1, 1, 1, 2, 1,
          3, 1, 4, 1, 5, 1, 6, 1,
          7, 1, 8, 1, 9, 1, 10, 1,
          11, 1, 12, 1, 13, 1, 16, 1,
          17, 1, 18, 1, 19, 1, 20, 1,
          21, 1, 22, 1, 23, 2, 2, 18,
          2, 3, 4, 2, 13, 0, 2, 14,
          15, 2, 17, 0, 2, 17, 1, 2,
          17, 16, 2, 17, 19, 2, 18, 6,
          2, 18, 7, 2, 18, 8, 2, 18,
          9, 2, 18, 10, 2, 18, 16, 2,
          20, 21, 2, 22, 0, 2, 22, 1,
          2, 22, 16, 2, 22, 19, 3, 4,
          14, 15, 3, 5, 14, 15, 3, 11,
          14, 15, 3, 12, 14, 15, 3, 13,
          14, 15, 3, 14, 15, 18, 3, 17,
          0, 11, 3, 17, 14, 15, 4, 2,
          14, 15, 18, 4, 3, 4, 14, 15,
          4, 17, 0, 14, 15, 5, 17, 0,
          11, 14, 15
        ]

        class << self
          attr_accessor :_lexer_key_offsets
          private :_lexer_key_offsets, :_lexer_key_offsets=
        end
        self._lexer_key_offsets = [
          0, 0, 19, 20, 21, 39, 40, 41,
          43, 45, 50, 55, 60, 65, 69, 73,
          75, 76, 77, 78, 79, 80, 81, 82,
          83, 84, 85, 86, 87, 88, 89, 90,
          91, 93, 95, 100, 107, 112, 115, 116,
          117, 118, 119, 120, 121, 122, 123, 124,
          125, 126, 127, 128, 129, 130, 131, 132,
          133, 148, 150, 152, 154, 156, 158, 160,
          162, 164, 166, 168, 170, 172, 174, 176,
          178, 196, 197, 198, 199, 200, 201, 202,
          203, 204, 205, 206, 207, 208, 209, 210,
          211, 212, 213, 214, 215, 226, 228, 230,
          232, 234, 236, 238, 240, 242, 244, 246,
          248, 250, 252, 254, 257, 259, 261, 263,
          265, 267, 269, 271, 273, 275, 277, 279,
          281, 283, 285, 287, 289, 291, 293, 295,
          297, 299, 301, 303, 305, 307, 309, 311,
          313, 315, 317, 319, 321, 323, 325, 327,
          329, 331, 333, 335, 337, 339, 341, 343,
          345, 347, 349, 351, 353, 355, 356, 357,
          358, 359, 360, 361, 362, 363, 365, 366,
          367, 368, 369, 370, 371, 372, 373, 374,
          389, 391, 393, 395, 397, 399, 401, 403,
          405, 407, 409, 411, 413, 415, 417, 419,
          423, 425, 427, 429, 431, 433, 435, 437,
          439, 441, 443, 445, 447, 449, 451, 453,
          455, 457, 459, 461, 463, 465, 467, 469,
          471, 473, 475, 477, 479, 481, 483, 485,
          487, 489, 491, 493, 495, 497, 499, 501,
          503, 505, 507, 509, 511, 513, 515, 517,
          519, 521, 523, 526, 528, 530, 531, 532,
          533, 534, 535, 536, 537, 538, 539, 540,
          541, 542, 543, 544, 545, 552, 554, 556,
          558, 560, 562, 564, 566, 568, 570, 572,
          574, 576, 578, 580, 582, 586, 592, 595,
          597, 603, 621, 623, 625, 627, 629, 631,
          633, 635, 637, 639, 641, 643, 645, 647,
          649, 651, 653, 655, 657, 659, 661, 663,
          665, 667, 669, 671, 673, 675, 678, 680,
          682, 684, 686, 688, 690, 692, 694, 695,
          696, 697, 698, 699, 700, 701, 702, 703,
          704, 705, 706, 721, 723, 725, 727, 729,
          731, 733, 735, 737, 739, 741, 743, 745,
          747, 749, 751, 754, 756, 758, 760, 762,
          764, 766, 768, 770, 772, 774, 776, 778,
          780, 782, 784, 786, 788, 790, 792, 794,
          796, 798, 800, 802, 804, 806, 808, 810,
          812, 814, 816, 818, 820, 822, 824, 826,
          828, 830, 832, 834, 836, 839, 841, 843,
          844
        ]

        class << self
          attr_accessor :_lexer_trans_keys
          private :_lexer_trans_keys, :_lexer_trans_keys=
        end
        self._lexer_trans_keys = [
          -17, 10, 32, 34, 35, 37, 42, 64,
          65, 68, 69, 70, 71, 77, 83, 86,
          124, 9, 13, -69, -65, 10, 32, 34,
          35, 37, 42, 64, 65, 68, 69, 70,
          71, 77, 83, 86, 124, 9, 13, 34,
          34, 10, 13, 10, 13, 10, 32, 34,
          9, 13, 10, 32, 34, 9, 13, 10,
          32, 34, 9, 13, 10, 32, 34, 9,
          13, 10, 32, 9, 13, 10, 32, 9,
          13, 10, 13, 10, 95, 70, 69, 65,
          84, 85, 82, 69, 95, 69, 78, 68,
          95, 37, 32, 10, 13, 10, 13, 13,
          32, 64, 9, 10, 9, 10, 13, 32,
          64, 11, 12, 10, 32, 64, 9, 13,
          98, 99, 108, 115, 116, 114, 97, 99,
          116, 32, 83, 99, 101, 110, 97, 114,
          105, 111, 58, 10, 10, 10, 32, 35,
          37, 42, 64, 65, 68, 69, 70, 71,
          77, 83, 9, 13, 10, 95, 10, 70,
          10, 69, 10, 65, 10, 84, 10, 85,
          10, 82, 10, 69, 10, 95, 10, 69,
          10, 78, 10, 68, 10, 95, 10, 37,
          10, 32, 10, 32, 34, 35, 37, 42,
          64, 65, 68, 69, 70, 71, 77, 83,
          86, 124, 9, 13, 97, 110, 117, 110,
          99, 116, 105, 111, 110, 97, 108, 105,
          116, 101, 105, 116, 58, 10, 10, 10,
          32, 35, 37, 64, 65, 70, 83, 86,
          9, 13, 10, 95, 10, 70, 10, 69,
          10, 65, 10, 84, 10, 85, 10, 82,
          10, 69, 10, 95, 10, 69, 10, 78,
          10, 68, 10, 95, 10, 37, 10, 98,
          99, 10, 115, 10, 116, 10, 114, 10,
          97, 10, 99, 10, 116, 10, 32, 10,
          83, 10, 99, 10, 101, 10, 110, 10,
          97, 10, 114, 10, 105, 10, 111, 10,
          58, 10, 104, 10, 116, 10, 101, 10,
          114, 10, 103, 10, 114, 10, 111, 10,
          110, 10, 100, 10, 117, 10, 110, 10,
          99, 10, 116, 10, 105, 10, 111, 10,
          110, 10, 97, 10, 108, 10, 105, 10,
          116, 10, 101, 10, 105, 10, 116, 10,
          111, 10, 111, 10, 114, 10, 98, 10,
          101, 10, 101, 10, 108, 10, 100, 10,
          101, 10, 110, 101, 103, 101, 118, 101,
          97, 97, 114, 99, 116, 101, 110, 97,
          114, 105, 111, 58, 10, 10, 10, 32,
          35, 37, 42, 64, 65, 68, 69, 70,
          71, 77, 83, 9, 13, 10, 95, 10,
          70, 10, 69, 10, 65, 10, 84, 10,
          85, 10, 82, 10, 69, 10, 95, 10,
          69, 10, 78, 10, 68, 10, 95, 10,
          37, 10, 32, 10, 98, 99, 108, 10,
          115, 10, 116, 10, 114, 10, 97, 10,
          99, 10, 116, 10, 32, 10, 83, 10,
          99, 10, 101, 10, 110, 10, 97, 10,
          114, 10, 105, 10, 111, 10, 58, 10,
          104, 10, 116, 10, 101, 10, 114, 10,
          103, 10, 114, 10, 111, 10, 110, 10,
          100, 10, 115, 10, 97, 10, 110, 10,
          117, 10, 110, 10, 99, 10, 116, 10,
          105, 10, 111, 10, 110, 10, 97, 10,
          108, 10, 105, 10, 116, 10, 101, 10,
          105, 10, 116, 10, 101, 10, 103, 10,
          101, 10, 118, 10, 101, 10, 97, 10,
          97, 10, 114, 10, 99, 116, 10, 101,
          10, 108, 101, 108, 111, 111, 114, 98,
          101, 101, 108, 100, 101, 110, 58, 10,
          10, 10, 32, 35, 70, 124, 9, 13,
          10, 117, 10, 110, 10, 99, 10, 116,
          10, 105, 10, 111, 10, 110, 10, 97,
          10, 108, 10, 105, 10, 116, 10, 101,
          10, 105, 10, 116, 10, 58, 32, 124,
          9, 13, 10, 32, 92, 124, 9, 13,
          10, 92, 124, 10, 92, 10, 32, 92,
          124, 9, 13, 10, 32, 34, 35, 37,
          42, 64, 65, 68, 69, 70, 71, 77,
          83, 86, 124, 9, 13, 10, 108, 10,
          115, 10, 97, 10, 110, 10, 117, 10,
          110, 10, 99, 10, 116, 10, 105, 10,
          111, 10, 110, 10, 97, 10, 108, 10,
          105, 10, 116, 10, 101, 10, 105, 10,
          116, 10, 58, 10, 101, 10, 103, 10,
          101, 10, 118, 10, 101, 10, 97, 10,
          97, 10, 114, 10, 99, 116, 10, 101,
          10, 110, 10, 97, 10, 114, 10, 105,
          10, 111, 10, 101, 10, 108, 104, 116,
          101, 114, 103, 114, 111, 110, 100, 58,
          10, 10, 10, 32, 35, 37, 42, 64,
          65, 68, 69, 70, 71, 77, 83, 9,
          13, 10, 95, 10, 70, 10, 69, 10,
          65, 10, 84, 10, 85, 10, 82, 10,
          69, 10, 95, 10, 69, 10, 78, 10,
          68, 10, 95, 10, 37, 10, 32, 10,
          98, 108, 10, 115, 10, 116, 10, 114,
          10, 97, 10, 99, 10, 116, 10, 32,
          10, 83, 10, 99, 10, 101, 10, 110,
          10, 97, 10, 114, 10, 105, 10, 111,
          10, 58, 10, 115, 10, 97, 10, 110,
          10, 117, 10, 110, 10, 99, 10, 116,
          10, 105, 10, 111, 10, 110, 10, 97,
          10, 108, 10, 105, 10, 116, 10, 101,
          10, 105, 10, 116, 10, 101, 10, 103,
          10, 101, 10, 118, 10, 101, 10, 97,
          10, 97, 10, 114, 10, 99, 116, 10,
          101, 10, 108, 115, 0
        ]

        class << self
          attr_accessor :_lexer_single_lengths
          private :_lexer_single_lengths, :_lexer_single_lengths=
        end
        self._lexer_single_lengths = [
          0, 17, 1, 1, 16, 1, 1, 2,
          2, 3, 3, 3, 3, 2, 2, 2,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          2, 2, 3, 5, 3, 3, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          13, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          16, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 9, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 1, 1, 1,
          1, 1, 1, 1, 1, 2, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 13,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 4,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 5, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 4, 3, 2,
          4, 16, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 3, 2, 2,
          2, 2, 2, 2, 2, 2, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 13, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 1,
          0
        ]

        class << self
          attr_accessor :_lexer_range_lengths
          private :_lexer_range_lengths, :_lexer_range_lengths=
        end
        self._lexer_range_lengths = [
          0, 1, 0, 0, 1, 0, 0, 0,
          0, 1, 1, 1, 1, 1, 1, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 1, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 1, 0, 0,
          1, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0
        ]

        class << self
          attr_accessor :_lexer_index_offsets
          private :_lexer_index_offsets, :_lexer_index_offsets=
        end
        self._lexer_index_offsets = [
          0, 0, 19, 21, 23, 41, 43, 45,
          48, 51, 56, 61, 66, 71, 75, 79,
          82, 84, 86, 88, 90, 92, 94, 96,
          98, 100, 102, 104, 106, 108, 110, 112,
          114, 117, 120, 125, 132, 137, 141, 143,
          145, 147, 149, 151, 153, 155, 157, 159,
          161, 163, 165, 167, 169, 171, 173, 175,
          177, 192, 195, 198, 201, 204, 207, 210,
          213, 216, 219, 222, 225, 228, 231, 234,
          237, 255, 257, 259, 261, 263, 265, 267,
          269, 271, 273, 275, 277, 279, 281, 283,
          285, 287, 289, 291, 293, 304, 307, 310,
          313, 316, 319, 322, 325, 328, 331, 334,
          337, 340, 343, 346, 350, 353, 356, 359,
          362, 365, 368, 371, 374, 377, 380, 383,
          386, 389, 392, 395, 398, 401, 404, 407,
          410, 413, 416, 419, 422, 425, 428, 431,
          434, 437, 440, 443, 446, 449, 452, 455,
          458, 461, 464, 467, 470, 473, 476, 479,
          482, 485, 488, 491, 494, 497, 499, 501,
          503, 505, 507, 509, 511, 513, 516, 518,
          520, 522, 524, 526, 528, 530, 532, 534,
          549, 552, 555, 558, 561, 564, 567, 570,
          573, 576, 579, 582, 585, 588, 591, 594,
          599, 602, 605, 608, 611, 614, 617, 620,
          623, 626, 629, 632, 635, 638, 641, 644,
          647, 650, 653, 656, 659, 662, 665, 668,
          671, 674, 677, 680, 683, 686, 689, 692,
          695, 698, 701, 704, 707, 710, 713, 716,
          719, 722, 725, 728, 731, 734, 737, 740,
          743, 746, 749, 753, 756, 759, 761, 763,
          765, 767, 769, 771, 773, 775, 777, 779,
          781, 783, 785, 787, 789, 796, 799, 802,
          805, 808, 811, 814, 817, 820, 823, 826,
          829, 832, 835, 838, 841, 845, 851, 855,
          858, 864, 882, 885, 888, 891, 894, 897,
          900, 903, 906, 909, 912, 915, 918, 921,
          924, 927, 930, 933, 936, 939, 942, 945,
          948, 951, 954, 957, 960, 963, 967, 970,
          973, 976, 979, 982, 985, 988, 991, 993,
          995, 997, 999, 1001, 1003, 1005, 1007, 1009,
          1011, 1013, 1015, 1030, 1033, 1036, 1039, 1042,
          1045, 1048, 1051, 1054, 1057, 1060, 1063, 1066,
          1069, 1072, 1075, 1079, 1082, 1085, 1088, 1091,
          1094, 1097, 1100, 1103, 1106, 1109, 1112, 1115,
          1118, 1121, 1124, 1127, 1130, 1133, 1136, 1139,
          1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163,
          1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187,
          1190, 1193, 1196, 1199, 1202, 1206, 1209, 1212,
          1214
        ]

        class << self
          attr_accessor :_lexer_indicies
          private :_lexer_indicies, :_lexer_indicies=
        end
        self._lexer_indicies = [
          1, 3, 2, 4, 5, 6, 7, 8,
          9, 10, 11, 12, 13, 14, 15, 16,
          17, 2, 0, 18, 0, 2, 0, 3,
          2, 4, 5, 6, 7, 8, 9, 10,
          11, 12, 13, 14, 15, 16, 17, 2,
          0, 19, 0, 20, 0, 22, 23, 21,
          25, 26, 24, 29, 28, 30, 28, 27,
          33, 32, 34, 32, 31, 33, 32, 35,
          32, 31, 33, 32, 36, 32, 31, 38,
          37, 37, 0, 3, 39, 39, 0, 41,
          42, 40, 3, 0, 43, 0, 44, 0,
          45, 0, 46, 0, 47, 0, 48, 0,
          49, 0, 50, 0, 51, 0, 52, 0,
          53, 0, 54, 0, 55, 0, 56, 0,
          57, 0, 59, 60, 58, 62, 63, 61,
          0, 0, 0, 0, 64, 65, 66, 65,
          65, 68, 67, 64, 3, 69, 8, 69,
          0, 70, 71, 72, 0, 73, 0, 74,
          0, 75, 0, 76, 0, 77, 0, 78,
          0, 79, 0, 80, 0, 81, 0, 82,
          0, 83, 0, 84, 0, 85, 0, 86,
          0, 87, 0, 88, 0, 90, 89, 92,
          91, 92, 93, 94, 95, 96, 94, 97,
          98, 99, 100, 101, 102, 103, 93, 91,
          92, 104, 91, 92, 105, 91, 92, 106,
          91, 92, 107, 91, 92, 108, 91, 92,
          109, 91, 92, 110, 91, 92, 111, 91,
          92, 112, 91, 92, 113, 91, 92, 114,
          91, 92, 115, 91, 92, 116, 91, 92,
          117, 91, 92, 118, 91, 120, 119, 121,
          122, 123, 124, 125, 126, 127, 128, 129,
          130, 131, 132, 133, 134, 119, 0, 135,
          0, 136, 0, 137, 0, 138, 0, 139,
          0, 140, 0, 141, 0, 142, 0, 143,
          0, 144, 0, 145, 0, 146, 0, 147,
          0, 148, 0, 149, 0, 150, 0, 151,
          0, 153, 152, 155, 154, 155, 156, 157,
          158, 157, 159, 160, 161, 162, 156, 154,
          155, 163, 154, 155, 164, 154, 155, 165,
          154, 155, 166, 154, 155, 167, 154, 155,
          168, 154, 155, 169, 154, 155, 170, 154,
          155, 171, 154, 155, 172, 154, 155, 173,
          154, 155, 174, 154, 155, 175, 154, 155,
          176, 154, 155, 177, 178, 154, 155, 179,
          154, 155, 180, 154, 155, 181, 154, 155,
          182, 154, 155, 183, 154, 155, 184, 154,
          155, 185, 154, 155, 186, 154, 155, 187,
          154, 155, 188, 154, 155, 189, 154, 155,
          190, 154, 155, 191, 154, 155, 192, 154,
          155, 193, 154, 155, 194, 154, 155, 195,
          154, 155, 196, 154, 155, 197, 154, 155,
          198, 154, 155, 199, 154, 155, 200, 154,
          155, 201, 154, 155, 202, 154, 155, 193,
          154, 155, 203, 154, 155, 204, 154, 155,
          205, 154, 155, 206, 154, 155, 207, 154,
          155, 208, 154, 155, 209, 154, 155, 210,
          154, 155, 211, 154, 155, 212, 154, 155,
          213, 154, 155, 214, 154, 155, 215, 154,
          155, 193, 154, 155, 216, 154, 155, 217,
          154, 155, 218, 154, 155, 219, 154, 155,
          220, 154, 155, 221, 154, 155, 222, 154,
          155, 223, 154, 155, 224, 154, 155, 193,
          154, 225, 0, 226, 0, 227, 0, 228,
          0, 135, 0, 229, 0, 230, 0, 136,
          0, 231, 232, 0, 233, 0, 234, 0,
          235, 0, 236, 0, 237, 0, 238, 0,
          239, 0, 241, 240, 243, 242, 243, 244,
          245, 246, 247, 245, 248, 249, 250, 251,
          252, 253, 254, 244, 242, 243, 255, 242,
          243, 256, 242, 243, 257, 242, 243, 258,
          242, 243, 259, 242, 243, 260, 242, 243,
          261, 242, 243, 262, 242, 243, 263, 242,
          243, 264, 242, 243, 265, 242, 243, 266,
          242, 243, 267, 242, 243, 268, 242, 243,
          269, 242, 243, 270, 271, 272, 242, 243,
          273, 242, 243, 274, 242, 243, 275, 242,
          243, 276, 242, 243, 277, 242, 243, 278,
          242, 243, 279, 242, 243, 280, 242, 243,
          281, 242, 243, 282, 242, 243, 283, 242,
          243, 284, 242, 243, 285, 242, 243, 286,
          242, 243, 287, 242, 243, 269, 242, 243,
          288, 242, 243, 289, 242, 243, 290, 242,
          243, 291, 242, 243, 292, 242, 243, 293,
          242, 243, 294, 242, 243, 295, 242, 243,
          287, 242, 243, 296, 242, 243, 297, 242,
          243, 296, 242, 243, 298, 242, 243, 299,
          242, 243, 300, 242, 243, 301, 242, 243,
          302, 242, 243, 303, 242, 243, 304, 242,
          243, 305, 242, 243, 306, 242, 243, 307,
          242, 243, 308, 242, 243, 309, 242, 243,
          310, 242, 243, 287, 242, 243, 311, 242,
          243, 312, 242, 243, 313, 242, 243, 314,
          242, 243, 297, 242, 243, 315, 242, 243,
          316, 242, 243, 296, 242, 243, 281, 317,
          242, 243, 318, 242, 243, 296, 242, 319,
          0, 136, 0, 320, 0, 321, 0, 322,
          0, 323, 0, 324, 0, 325, 0, 326,
          0, 327, 0, 328, 0, 329, 0, 330,
          0, 332, 331, 334, 333, 334, 335, 336,
          337, 336, 335, 333, 334, 338, 333, 334,
          339, 333, 334, 340, 333, 334, 341, 333,
          334, 342, 333, 334, 343, 333, 334, 344,
          333, 334, 345, 333, 334, 346, 333, 334,
          347, 333, 334, 348, 333, 334, 349, 333,
          334, 350, 333, 334, 351, 333, 334, 352,
          333, 353, 354, 353, 0, 357, 356, 358,
          359, 356, 355, 0, 361, 362, 360, 0,
          361, 360, 357, 363, 361, 362, 363, 360,
          357, 364, 365, 366, 367, 368, 369, 370,
          371, 372, 373, 374, 375, 376, 377, 378,
          364, 0, 92, 379, 91, 92, 380, 91,
          92, 381, 91, 92, 380, 91, 92, 382,
          91, 92, 383, 91, 92, 384, 91, 92,
          385, 91, 92, 386, 91, 92, 387, 91,
          92, 388, 91, 92, 389, 91, 92, 390,
          91, 92, 391, 91, 92, 392, 91, 92,
          393, 91, 92, 394, 91, 92, 395, 91,
          92, 118, 91, 92, 396, 91, 92, 397,
          91, 92, 398, 91, 92, 399, 91, 92,
          381, 91, 92, 400, 91, 92, 401, 91,
          92, 380, 91, 92, 402, 403, 91, 92,
          404, 91, 92, 405, 91, 92, 406, 91,
          92, 407, 91, 92, 408, 91, 92, 395,
          91, 92, 409, 91, 92, 380, 91, 410,
          0, 411, 0, 412, 0, 413, 0, 414,
          0, 415, 0, 416, 0, 417, 0, 418,
          0, 419, 0, 421, 420, 423, 422, 423,
          424, 425, 426, 427, 425, 428, 429, 430,
          431, 432, 433, 434, 424, 422, 423, 435,
          422, 423, 436, 422, 423, 437, 422, 423,
          438, 422, 423, 439, 422, 423, 440, 422,
          423, 441, 422, 423, 442, 422, 423, 443,
          422, 423, 444, 422, 423, 445, 422, 423,
          446, 422, 423, 447, 422, 423, 448, 422,
          423, 449, 422, 423, 450, 451, 422, 423,
          452, 422, 423, 453, 422, 423, 454, 422,
          423, 455, 422, 423, 456, 422, 423, 457,
          422, 423, 458, 422, 423, 459, 422, 423,
          460, 422, 423, 461, 422, 423, 462, 422,
          423, 463, 422, 423, 464, 422, 423, 465,
          422, 423, 466, 422, 423, 449, 422, 423,
          467, 422, 423, 468, 422, 423, 467, 422,
          423, 469, 422, 423, 470, 422, 423, 471,
          422, 423, 472, 422, 423, 473, 422, 423,
          474, 422, 423, 475, 422, 423, 476, 422,
          423, 477, 422, 423, 478, 422, 423, 479,
          422, 423, 480, 422, 423, 481, 422, 423,
          466, 422, 423, 482, 422, 423, 483, 422,
          423, 484, 422, 423, 485, 422, 423, 468,
          422, 423, 486, 422, 423, 487, 422, 423,
          467, 422, 423, 460, 488, 422, 423, 489,
          422, 423, 467, 422, 136, 0, 490, 0
        ]

        class << self
          attr_accessor :_lexer_trans_targs
          private :_lexer_trans_targs, :_lexer_trans_targs=
        end
        self._lexer_trans_targs = [
          0, 2, 4, 4, 5, 15, 17, 31,
          34, 37, 73, 74, 75, 157, 162, 165,
          247, 276, 3, 6, 7, 8, 9, 8,
          8, 9, 8, 10, 10, 10, 11, 10,
          10, 10, 11, 12, 13, 14, 4, 14,
          15, 4, 16, 18, 19, 20, 21, 22,
          23, 24, 25, 26, 27, 28, 29, 30,
          392, 32, 33, 4, 16, 33, 4, 16,
          35, 36, 4, 35, 34, 36, 38, 318,
          391, 39, 40, 41, 42, 43, 44, 45,
          46, 47, 48, 49, 50, 51, 52, 53,
          54, 55, 56, 55, 56, 56, 4, 57,
          71, 282, 284, 285, 286, 301, 306, 309,
          58, 59, 60, 61, 62, 63, 64, 65,
          66, 67, 68, 69, 70, 4, 72, 4,
          4, 5, 15, 17, 31, 34, 37, 73,
          74, 75, 157, 162, 165, 247, 276, 74,
          31, 76, 77, 78, 79, 80, 81, 82,
          83, 84, 85, 86, 87, 88, 89, 90,
          91, 92, 91, 92, 92, 4, 93, 107,
          133, 116, 147, 94, 95, 96, 97, 98,
          99, 100, 101, 102, 103, 104, 105, 106,
          4, 108, 124, 109, 110, 111, 112, 113,
          114, 115, 116, 117, 118, 119, 120, 121,
          122, 123, 72, 125, 126, 127, 128, 129,
          130, 131, 132, 134, 135, 136, 137, 138,
          139, 140, 141, 142, 143, 144, 145, 146,
          148, 149, 150, 151, 152, 153, 154, 155,
          156, 158, 159, 160, 161, 163, 164, 166,
          245, 167, 168, 169, 170, 171, 172, 173,
          174, 175, 174, 175, 175, 4, 176, 190,
          191, 218, 219, 220, 234, 239, 242, 177,
          178, 179, 180, 181, 182, 183, 184, 185,
          186, 187, 188, 189, 4, 72, 192, 208,
          217, 193, 194, 195, 196, 197, 198, 199,
          200, 201, 202, 203, 204, 205, 206, 207,
          209, 210, 211, 212, 213, 214, 215, 216,
          190, 219, 221, 222, 223, 224, 225, 226,
          227, 228, 229, 230, 231, 232, 233, 235,
          236, 237, 238, 240, 241, 243, 244, 246,
          248, 249, 250, 251, 252, 253, 254, 255,
          256, 257, 258, 259, 260, 259, 260, 260,
          4, 261, 262, 263, 264, 265, 266, 267,
          268, 269, 270, 271, 272, 273, 274, 275,
          72, 276, 277, 278, 280, 281, 279, 277,
          278, 279, 277, 280, 281, 5, 15, 17,
          31, 34, 37, 73, 74, 75, 157, 162,
          165, 247, 276, 283, 71, 285, 287, 288,
          289, 290, 291, 292, 293, 294, 295, 296,
          297, 298, 299, 300, 302, 303, 304, 305,
          307, 308, 310, 316, 311, 312, 313, 314,
          315, 317, 319, 320, 321, 322, 323, 324,
          325, 326, 327, 328, 329, 330, 329, 330,
          330, 4, 331, 345, 346, 364, 365, 366,
          380, 385, 388, 332, 333, 334, 335, 336,
          337, 338, 339, 340, 341, 342, 343, 344,
          4, 72, 347, 363, 348, 349, 350, 351,
          352, 353, 354, 355, 356, 357, 358, 359,
          360, 361, 362, 345, 365, 367, 368, 369,
          370, 371, 372, 373, 374, 375, 376, 377,
          378, 379, 381, 382, 383, 384, 386, 387,
          389, 390, 0
        ]

        class << self
          attr_accessor :_lexer_trans_actions
          private :_lexer_trans_actions, :_lexer_trans_actions=
        end
        self._lexer_trans_actions = [
          43, 0, 0, 54, 3, 1, 0, 29,
          1, 29, 29, 29, 29, 29, 29, 29,
          29, 35, 0, 0, 0, 7, 139, 48,
          0, 102, 9, 5, 45, 134, 45, 0,
          33, 122, 33, 33, 0, 11, 106, 0,
          0, 114, 25, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 149, 126, 0, 110, 23,
          0, 27, 118, 27, 51, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 57, 144, 0, 54, 0, 78, 33,
          84, 84, 84, 84, 84, 84, 84, 84,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 19, 19, 31,
          130, 60, 57, 31, 63, 57, 63, 63,
          63, 63, 63, 63, 63, 63, 66, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          57, 144, 0, 54, 0, 69, 33, 84,
          84, 84, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          13, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 13, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          57, 144, 0, 54, 0, 75, 33, 84,
          84, 84, 84, 84, 84, 84, 84, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 17, 17, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 57, 144, 0, 54, 0,
          81, 84, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          21, 0, 0, 37, 37, 54, 37, 87,
          0, 0, 39, 0, 0, 93, 90, 41,
          96, 90, 96, 96, 96, 96, 96, 96,
          96, 96, 99, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 57, 144, 0, 54,
          0, 72, 33, 84, 84, 84, 84, 84,
          84, 84, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          15, 15, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0
        ]

        class << self
          attr_accessor :_lexer_eof_actions
          private :_lexer_eof_actions, :_lexer_eof_actions=
        end
        self._lexer_eof_actions = [
          0, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43
        ]

        class << self
          attr_accessor :lexer_start
        end
        self.lexer_start = 1;
        class << self
          attr_accessor :lexer_first_final
        end
        self.lexer_first_final = 392;
        class << self
          attr_accessor :lexer_error
        end
        self.lexer_error = 0;

        class << self
          attr_accessor :lexer_en_main
        end
        self.lexer_en_main = 1;


        # line 133 "ragel/i18n/nl.rb.rl"
      end

      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length

        @line_number = 1
        @last_newline = 0


        # line 774 "lib/gherkin/lexer/nl.rb"
        begin
          p ||= 0
          pe ||= data.length
          cs = lexer_start
        end

        # line 143 "ragel/i18n/nl.rb.rl"

        # line 783 "lib/gherkin/lexer/nl.rb"
        begin
          _klen, _trans, _keys, _acts, _nacts = nil
          _goto_level = 0
          _resume = 10
          _eof_trans = 15
          _again = 20
          _test_eof = 30
          _out = 40
          while true
            _trigger_goto = false
            if _goto_level <= 0
              if p == pe
                _goto_level = _test_eof
                next
              end
              if cs == 0
                _goto_level = _out
                next
              end
            end
            if _goto_level <= _resume
              _keys = _lexer_key_offsets[cs]
              _trans = _lexer_index_offsets[cs]
              _klen = _lexer_single_lengths[cs]
              _break_match = false

              begin
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + _klen - 1

                  loop do
                    break if _upper < _lower
                    _mid = _lower + ( (_upper - _lower) >> 1 )

                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 1
                    elsif data[p].ord > _lexer_trans_keys[_mid]
                      _lower = _mid + 1
                    else
                      _trans += (_mid - _keys)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _keys += _klen
                  _trans += _klen
                end
                _klen = _lexer_range_lengths[cs]
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + (_klen << 1) - 2
                  loop do
                    break if _upper < _lower
                    _mid = _lower + (((_upper-_lower) >> 1) & ~1)
                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 2
                    elsif data[p].ord > _lexer_trans_keys[_mid+1]
                      _lower = _mid + 2
                    else
                      _trans += ((_mid - _keys) >> 1)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _trans += _klen
                end
              end while false
              _trans = _lexer_indicies[_trans]
              cs = _lexer_trans_targs[_trans]
              if _lexer_trans_actions[_trans] != 0
                _acts = _lexer_trans_actions[_trans]
                _nacts = _lexer_actions[_acts]
                _acts += 1
                while _nacts > 0
                  _nacts -= 1
                  _acts += 1
                  case _lexer_actions[_acts - 1]
                  when 0 then
                    # line 11 "ragel/i18n/nl.rb.rl"
                    begin

                      @content_start = p
                      @current_line = @line_number
                      @start_col = p - @last_newline - "#{@keyword}:".length
                    end
                  when 1 then
                    # line 17 "ragel/i18n/nl.rb.rl"
                    begin

                      @current_line = @line_number
                      @start_col = p - @last_newline
                    end
                  when 2 then
                    # line 22 "ragel/i18n/nl.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 3 then
                    # line 26 "ragel/i18n/nl.rb.rl"
                    begin

                      @docstring_content_type_start = p
                    end
                  when 4 then
                    # line 29 "ragel/i18n/nl.rb.rl"
                    begin

                      @docstring_content_type_end = p
                    end
                  when 5 then
                    # line 33 "ragel/i18n/nl.rb.rl"
                    begin

                      con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
                      con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
                      @listener.doc_string(con_type, con, @current_line)
                    end
                  when 6 then
                    # line 38 "ragel/i18n/nl.rb.rl"
                    begin

                      p = store_keyword_content(:feature, data, p, eof)
                    end
                  when 7 then
                    # line 42 "ragel/i18n/nl.rb.rl"
                    begin

                      p = store_keyword_content(:background, data, p, eof)
                    end
                  when 8 then
                    # line 46 "ragel/i18n/nl.rb.rl"
                    begin

                      p = store_keyword_content(:scenario, data, p, eof)
                    end
                  when 9 then
                    # line 50 "ragel/i18n/nl.rb.rl"
                    begin

                      p = store_keyword_content(:scenario_outline, data, p, eof)
                    end
                  when 10 then
                    # line 54 "ragel/i18n/nl.rb.rl"
                    begin

                      p = store_keyword_content(:examples, data, p, eof)
                    end
                  when 11 then
                    # line 58 "ragel/i18n/nl.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.step(@keyword, con, @current_line)
                    end
                  when 12 then
                    # line 63 "ragel/i18n/nl.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.comment(con, @line_number)
                      @keyword_start = nil
                    end
                  when 13 then
                    # line 69 "ragel/i18n/nl.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.tag(con, @current_line)
                      @keyword_start = nil
                    end
                  when 14 then
                    # line 75 "ragel/i18n/nl.rb.rl"
                    begin

                      @line_number += 1
                    end
                  when 15 then
                    # line 79 "ragel/i18n/nl.rb.rl"
                    begin

                      @last_newline = p + 1
                    end
                  when 16 then
                    # line 83 "ragel/i18n/nl.rb.rl"
                    begin

                      @keyword_start ||= p
                    end
                  when 17 then
                    # line 87 "ragel/i18n/nl.rb.rl"
                    begin

                      @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
                      @keyword_start = nil
                    end
                  when 18 then
                    # line 92 "ragel/i18n/nl.rb.rl"
                    begin

                      @next_keyword_start = p
                    end
                  when 19 then
                    # line 96 "ragel/i18n/nl.rb.rl"
                    begin

                      p = p - 1
                      current_row = []
                      @current_line = @line_number
                    end
                  when 20 then
                    # line 102 "ragel/i18n/nl.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 21 then
                    # line 106 "ragel/i18n/nl.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
                    end
                  when 22 then
                    # line 111 "ragel/i18n/nl.rb.rl"
                    begin

                      @listener.row(current_row, @current_line)
                    end
                  when 23 then
                    # line 115 "ragel/i18n/nl.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1027 "lib/gherkin/lexer/nl.rb"
                  end # action switch
                end
              end
              if _trigger_goto
                next
              end
            end
            if _goto_level <= _again
              if cs == 0
                _goto_level = _out
                next
              end
              p += 1
              if p != pe
                _goto_level = _resume
                next
              end
            end
            if _goto_level <= _test_eof
              if p == eof
                __acts = _lexer_eof_actions[cs]
                __nacts =  _lexer_actions[__acts]
                __acts += 1
                while __nacts > 0
                  __nacts -= 1
                  __acts += 1
                  case _lexer_actions[__acts - 1]
                  when 23 then
                    # line 115 "ragel/i18n/nl.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1066 "lib/gherkin/lexer/nl.rb"
                  end # eof action switch
                end
                if _trigger_goto
                  next
                end
              end
            end
            if _goto_level <= _out
              break
            end
          end
        end

        # line 144 "ragel/i18n/nl.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end

      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9|2\.0/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
