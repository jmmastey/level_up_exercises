
# line 1 "ragel/i18n/pa.rb.rl"
require 'gherkin/native'

module Gherkin
  module Lexer
    class Pa #:nodoc:
      native_impl('gherkin')


      # line 125 "ragel/i18n/pa.rb.rl"


      def initialize(listener)
        @listener = listener

        # Initialize ivars to avoid warnings
        @keyword = nil

        # line 21 "lib/gherkin/lexer/pa.rb"
        class << self
          attr_accessor :_lexer_actions
          private :_lexer_actions, :_lexer_actions=
        end
        self._lexer_actions = [
          0, 1, 0, 1, 1, 1, 2, 1,
          3, 1, 4, 1, 5, 1, 6, 1,
          7, 1, 8, 1, 9, 1, 10, 1,
          11, 1, 12, 1, 13, 1, 16, 1,
          17, 1, 18, 1, 19, 1, 20, 1,
          21, 1, 22, 1, 23, 2, 2, 18,
          2, 3, 4, 2, 13, 0, 2, 14,
          15, 2, 17, 0, 2, 17, 1, 2,
          17, 16, 2, 17, 19, 2, 18, 6,
          2, 18, 7, 2, 18, 8, 2, 18,
          9, 2, 18, 10, 2, 18, 16, 2,
          20, 21, 2, 22, 0, 2, 22, 1,
          2, 22, 16, 2, 22, 19, 3, 4,
          14, 15, 3, 5, 14, 15, 3, 11,
          14, 15, 3, 12, 14, 15, 3, 13,
          14, 15, 3, 14, 15, 18, 3, 17,
          0, 11, 3, 17, 14, 15, 4, 2,
          14, 15, 18, 4, 3, 4, 14, 15,
          4, 17, 0, 14, 15, 5, 17, 0,
          11, 14, 15
        ]

        class << self
          attr_accessor :_lexer_key_offsets
          private :_lexer_key_offsets, :_lexer_key_offsets=
        end
        self._lexer_key_offsets = [
          0, 0, 12, 13, 21, 22, 23, 24,
          25, 26, 27, 28, 30, 32, 43, 44,
          45, 47, 49, 54, 59, 64, 69, 73,
          77, 79, 80, 81, 82, 83, 84, 85,
          86, 87, 88, 89, 90, 91, 92, 93,
          94, 99, 106, 111, 115, 121, 124, 126,
          132, 143, 144, 145, 146, 147, 148, 149,
          150, 151, 152, 153, 154, 155, 156, 157,
          158, 159, 160, 161, 162, 163, 164, 165,
          166, 167, 174, 176, 180, 182, 184, 186,
          188, 190, 192, 194, 196, 198, 200, 202,
          204, 206, 208, 210, 212, 223, 225, 227,
          229, 231, 233, 235, 237, 239, 241, 243,
          245, 247, 249, 251, 253, 255, 257, 259,
          261, 263, 265, 267, 269, 271, 273, 275,
          277, 279, 281, 283, 285, 287, 289, 291,
          293, 295, 297, 299, 301, 303, 305, 307,
          309, 310, 311, 312, 313, 314, 315, 316,
          317, 318, 319, 320, 321, 322, 323, 324,
          325, 326, 327, 335, 337, 343, 345, 347,
          349, 351, 353, 355, 357, 359, 361, 363,
          365, 367, 369, 371, 373, 375, 377, 379,
          381, 383, 385, 387, 389, 391, 393, 395,
          397, 399, 401, 403, 405, 407, 409, 411,
          413, 415, 417, 419, 421, 423, 425, 427,
          429, 431, 433, 435, 437, 439, 441, 443,
          445, 447, 449, 451, 453, 455, 457, 459,
          461, 463, 465, 468, 470, 472, 474, 476,
          478, 480, 482, 484, 486, 489, 491, 493,
          496, 498, 500, 502, 504, 506, 508, 510,
          512, 514, 516, 518, 520, 522, 524, 526,
          528, 530, 532, 534, 536, 538, 540, 542,
          544, 546, 548, 550, 552, 554, 556, 558,
          560, 562, 564, 566, 568, 570, 572, 574,
          576, 578, 580, 582, 584, 586, 588, 590,
          592, 594, 596, 598, 600, 602, 604, 606,
          608, 610, 612, 614, 616, 618, 620, 622,
          624, 626, 628, 630, 632, 634, 636, 638,
          640, 641, 643, 645, 646, 647, 648, 649,
          650, 651, 652, 653, 654, 655, 656, 657,
          658, 659, 660, 661, 662, 663, 664, 665,
          666, 667, 668, 669, 670, 671, 672, 673,
          674, 675, 676, 677, 678, 679, 680, 681,
          682, 683, 684, 685, 686, 687, 688, 689,
          690, 691, 692, 693, 694, 695, 696, 697,
          698, 699, 700, 701, 704, 705, 706, 707,
          708, 709, 710, 711, 712, 713, 715, 716,
          717, 719, 720, 721, 722, 723, 724, 725,
          726, 727, 728, 729, 730, 731, 732, 733,
          734, 743, 745, 753, 755, 757, 759, 761,
          763, 765, 767, 769, 771, 773, 775, 777,
          779, 781, 783, 785, 787, 789, 791, 793,
          795, 797, 799, 801, 804, 807, 809, 811,
          813, 815, 817, 819, 821, 823, 825, 827,
          829, 831, 833, 835, 837, 839, 841, 843,
          845, 847, 849, 851, 853, 855, 857, 859,
          861, 863, 865, 867, 869, 871, 873, 875,
          877, 879, 881, 883, 885, 887, 889, 891,
          893, 895, 897, 899, 901, 903, 905, 907,
          909, 911, 913, 915, 917, 919, 922, 924,
          926, 928, 930, 932, 934, 936, 938, 940,
          942, 944, 946, 948, 950, 952, 954, 956,
          958, 960, 962, 964, 966, 968, 970, 972,
          974, 976, 978, 980, 982, 984, 986, 988,
          990, 992, 994, 996, 998, 1000, 1002, 1004,
          1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
          1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
          1021, 1022, 1031, 1033, 1041, 1043, 1045, 1047,
          1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063,
          1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079,
          1081, 1083, 1085, 1087, 1089, 1092, 1095, 1097,
          1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113,
          1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129,
          1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145,
          1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161,
          1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177,
          1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193,
          1195, 1197, 1199, 1201, 1203, 1205, 1207, 1211,
          1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227,
          1229, 1232, 1234, 1236, 1239, 1241, 1243, 1245,
          1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261,
          1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277,
          1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293,
          1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309,
          1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325,
          1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341,
          1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357,
          1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373,
          1375, 1377, 1379, 1381, 1383, 1384, 1385, 1386,
          1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
          1395, 1396, 1397, 1398, 1407, 1409, 1417, 1419,
          1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435,
          1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451,
          1453, 1455, 1457, 1459, 1461, 1463, 1465, 1468,
          1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485,
          1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501,
          1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517,
          1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533,
          1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549,
          1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565,
          1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581,
          1583, 1586, 1588, 1590, 1592, 1594, 1596, 1598,
          1600, 1602, 1604, 1607, 1609, 1611, 1614, 1616,
          1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632,
          1634, 1636, 1638, 1640, 1642, 1644, 1646, 1648,
          1650, 1652, 1654, 1656, 1658, 1660, 1662, 1664,
          1666, 1668, 1670, 1672, 1674, 1676, 1678, 1680,
          1682, 1684, 1686, 1688, 1690, 1692, 1694, 1696,
          1698, 1700, 1702, 1704, 1706, 1708, 1710, 1712,
          1714, 1716, 1718, 1720, 1722, 1724, 1726, 1728,
          1730, 1732, 1734, 1735, 1736, 1737, 1738, 1739,
          1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
          1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
          1756, 1757
        ]

        class << self
          attr_accessor :_lexer_trans_keys
          private :_lexer_trans_keys, :_lexer_trans_keys=
        end
        self._lexer_trans_keys = [
          -32, -17, 10, 32, 34, 35, 37, 42,
          64, 124, 9, 13, -88, -123, -119, -106,
          -100, -92, -88, -86, -82, -32, -88, -92,
          -32, -87, -121, 32, 10, 13, 10, 13,
          -32, 10, 32, 34, 35, 37, 42, 64,
          124, 9, 13, 34, 34, 10, 13, 10,
          13, 10, 32, 34, 9, 13, 10, 32,
          34, 9, 13, 10, 32, 34, 9, 13,
          10, 32, 34, 9, 13, 10, 32, 9,
          13, 10, 32, 9, 13, 10, 13, 10,
          95, 70, 69, 65, 84, 85, 82, 69,
          95, 69, 78, 68, 95, 37, 13, 32,
          64, 9, 10, 9, 10, 13, 32, 64,
          11, 12, 10, 32, 64, 9, 13, 32,
          124, 9, 13, 10, 32, 92, 124, 9,
          13, 10, 92, 124, 10, 92, 10, 32,
          92, 124, 9, 13, -32, 10, 32, 34,
          35, 37, 42, 64, 124, 9, 13, -32,
          -88, -90, -32, -88, -66, -32, -88, -71,
          -32, -88, -80, -32, -88, -88, -32, -88,
          -66, -32, -88, -126, 58, 10, 10, -32,
          10, 32, 35, 124, 9, 13, -88, 10,
          -106, -88, -82, 10, -32, 10, -88, 10,
          -66, 10, -32, 10, -88, 10, -72, 10,
          -32, 10, -87, 10, -128, 10, -32, 10,
          -88, 10, -123, 10, -32, 10, -88, 10,
          -92, 10, 10, 58, -32, 10, 32, 34,
          35, 37, 42, 64, 124, 9, 13, -32,
          10, -88, 10, -107, 10, -32, 10, -88,
          10, -74, 10, 10, 32, -32, 10, -88,
          10, -88, 10, -32, 10, -87, 10, -127,
          10, -32, 10, -88, 10, -71, 10, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -80, 10, -32, 10, -87, 10, -127,
          10, -32, 10, -88, 10, -71, 10, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -126, 10, -32, 10, -88, 10, -90,
          10, -32, 10, -88, 10, -80, 10, -32,
          10, -88, 10, -66, 10, -32, -88, -66,
          -32, -88, -72, -32, -87, -128, -32, -88,
          -123, -32, -88, -92, 58, 10, 10, -32,
          10, 32, 35, 37, 64, 9, 13, -88,
          10, -119, -106, -88, -86, -82, 10, -32,
          10, -88, 10, -90, 10, -32, 10, -88,
          10, -66, 10, -32, 10, -88, 10, -71,
          10, -32, 10, -88, 10, -80, 10, -32,
          10, -88, 10, -88, 10, -32, 10, -88,
          10, -66, 10, -32, 10, -88, 10, -126,
          10, 10, 58, -32, 10, -88, 10, -66,
          10, -32, 10, -88, 10, -72, 10, -32,
          10, -87, 10, -128, 10, -32, 10, -88,
          10, -123, 10, -32, 10, -88, 10, -92,
          10, -32, 10, -88, 10, -107, 10, -32,
          10, -88, 10, -74, 10, 10, 32, -32,
          10, -88, 10, -88, 10, -32, 10, -87,
          10, -127, 10, -32, 10, -88, 10, -71,
          10, -32, 10, -88, 10, -66, 10, -32,
          10, -88, 10, -80, 10, -32, 10, -88,
          10, -97, -65, 10, -32, 10, -88, 10,
          -107, 10, -32, 10, -88, 10, -91, 10,
          -32, 10, -88, 10, -66, 10, 10, 32,
          58, -32, 10, -88, 10, -94, -80, 10,
          -32, 10, -88, 10, -66, 10, -32, 10,
          -88, 10, -126, 10, -32, 10, -88, 10,
          -102, 10, -32, 10, -88, 10, -66, 10,
          -32, 10, -87, 10, -126, 10, -32, 10,
          -88, 10, -86, 10, 10, 32, -32, 10,
          -88, 10, -80, 10, -32, 10, -87, 10,
          -121, 10, -32, 10, -88, 10, -106, 10,
          -32, 10, -88, 10, -101, 10, -32, 10,
          -87, 10, -117, 10, -32, 10, -88, 10,
          -107, 10, -32, 10, -87, 10, -100, 10,
          -32, 10, -87, 10, -127, 10, -32, 10,
          -88, 10, -71, 10, -32, 10, -88, 10,
          -66, 10, -32, 10, -88, 10, -126, 10,
          -32, 10, -88, 10, -90, 10, -32, 10,
          -88, 10, -80, 10, 10, 95, 10, 70,
          10, 69, 10, 65, 10, 84, 10, 85,
          10, 82, 10, 69, 10, 95, 10, 69,
          10, 78, 10, 68, 10, 95, 10, 37,
          -32, -88, -87, -90, -65, -32, -87, -117,
          -32, -88, -126, -32, -88, -75, -32, -87,
          -121, -32, -88, -126, 32, -32, -88, -107,
          -32, -88, -65, -121, -32, -88, -107, -32,
          -88, -80, -32, -88, -90, -32, -88, -107,
          -32, -88, -74, 32, -32, -88, -88, -32,
          -87, -127, -32, -88, -71, -32, -88, -66,
          -32, -88, -80, -32, -88, -97, -80, -65,
          -32, -88, -107, -32, -88, -91, -32, -88,
          -66, 32, 58, -32, -88, -94, -80, -32,
          -88, -66, -32, -88, -126, -32, -88, -102,
          -32, -88, -66, 58, 10, 10, -32, 10,
          32, 35, 37, 42, 64, 9, 13, -88,
          10, -123, -106, -100, -92, -88, -86, -82,
          10, -32, 10, -88, 10, -92, 10, -32,
          10, -87, 10, -121, 10, 10, 32, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -72, 10, -32, 10, -87, 10, -128,
          10, -32, 10, -88, 10, -123, 10, -32,
          10, -88, 10, -92, 10, 10, 58, -32,
          10, -88, -87, 10, -90, -65, 10, -32,
          10, -87, 10, -117, 10, -32, 10, -88,
          10, -126, 10, -32, 10, -88, 10, -75,
          10, -32, 10, -87, 10, -121, 10, -32,
          10, -88, 10, -126, 10, 10, 32, -32,
          10, -88, 10, -107, 10, -32, 10, -88,
          10, -65, 10, -121, 10, -32, 10, -88,
          10, -107, 10, -32, 10, -88, 10, -80,
          10, -32, 10, -88, 10, -90, 10, -32,
          10, -88, 10, -107, 10, -32, 10, -88,
          10, -74, 10, 10, 32, -32, 10, -88,
          10, -88, 10, -32, 10, -87, 10, -127,
          10, -32, 10, -88, 10, -71, 10, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -80, 10, -32, 10, -88, 10, -97,
          -80, 10, -32, 10, -88, 10, -107, 10,
          -32, 10, -88, 10, -91, 10, -32, 10,
          -88, 10, -66, 10, -32, 10, -87, 10,
          -127, 10, -32, 10, -88, 10, -71, 10,
          -32, 10, -88, 10, -66, 10, -32, 10,
          -88, 10, -126, 10, -32, 10, -88, 10,
          -90, 10, -32, 10, -88, 10, -80, 10,
          10, 95, 10, 70, 10, 69, 10, 65,
          10, 84, 10, 85, 10, 82, 10, 69,
          10, 95, 10, 69, 10, 78, 10, 68,
          10, 95, 10, 37, -32, -87, -126, -32,
          -88, -86, 32, -32, -88, -80, -32, -87,
          -121, -32, -88, -106, 10, 10, -32, 10,
          32, 35, 37, 42, 64, 9, 13, -88,
          10, -123, -106, -100, -92, -88, -86, -82,
          10, -32, 10, -88, 10, -92, 10, -32,
          10, -87, 10, -121, 10, 10, 32, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -72, 10, -32, 10, -87, 10, -128,
          10, -32, 10, -88, 10, -123, 10, -32,
          10, -88, 10, -92, 10, 10, 58, -32,
          10, -88, -87, 10, -90, -65, 10, -32,
          10, -87, 10, -117, 10, -32, 10, -88,
          10, -126, 10, -32, 10, -88, 10, -75,
          10, -32, 10, -87, 10, -121, 10, -32,
          10, -88, 10, -126, 10, 10, 32, -32,
          10, -88, 10, -107, 10, -32, 10, -88,
          10, -65, 10, -121, 10, -32, 10, -88,
          10, -107, 10, -32, 10, -88, 10, -80,
          10, -32, 10, -88, 10, -90, 10, -32,
          10, -88, 10, -107, 10, -32, 10, -88,
          10, -74, 10, 10, 32, -32, 10, -88,
          10, -88, 10, -32, 10, -87, 10, -127,
          10, -32, 10, -88, 10, -71, 10, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -80, 10, -32, 10, -88, 10, -97,
          -80, -65, 10, -32, 10, -88, 10, -107,
          10, -32, 10, -88, 10, -91, 10, -32,
          10, -88, 10, -66, 10, 10, 32, 58,
          -32, 10, -88, 10, -94, -80, 10, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -126, 10, -32, 10, -88, 10, -102,
          10, -32, 10, -88, 10, -66, 10, -32,
          10, -87, 10, -126, 10, -32, 10, -88,
          10, -86, 10, 10, 32, -32, 10, -88,
          10, -80, 10, -32, 10, -87, 10, -121,
          10, -32, 10, -88, 10, -106, 10, -32,
          10, -88, 10, -101, 10, -32, 10, -87,
          10, -117, 10, -32, 10, -88, 10, -107,
          10, -32, 10, -87, 10, -100, 10, -32,
          10, -87, 10, -127, 10, -32, 10, -88,
          10, -71, 10, -32, 10, -88, 10, -66,
          10, -32, 10, -88, 10, -126, 10, -32,
          10, -88, 10, -90, 10, -32, 10, -88,
          10, -80, 10, 10, 95, 10, 70, 10,
          69, 10, 65, 10, 84, 10, 85, 10,
          82, 10, 69, 10, 95, 10, 69, 10,
          78, 10, 68, 10, 95, 10, 37, -32,
          -88, -101, -32, -87, -117, -32, -88, -107,
          -32, -87, -100, 58, 10, 10, -32, 10,
          32, 35, 37, 42, 64, 9, 13, -88,
          10, -123, -106, -100, -92, -88, -86, -82,
          10, -32, 10, -88, 10, -92, 10, -32,
          10, -87, 10, -121, 10, 10, 32, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -72, 10, -32, 10, -87, 10, -128,
          10, -32, 10, -88, 10, -123, 10, -32,
          10, -88, 10, -92, 10, 10, 58, -32,
          10, -88, -87, 10, -90, -65, 10, -32,
          10, -87, 10, -117, 10, -32, 10, -88,
          10, -126, 10, -32, 10, -88, 10, -75,
          10, -32, 10, -87, 10, -121, 10, -32,
          10, -88, 10, -126, 10, 10, 32, -32,
          10, -88, 10, -107, 10, -32, 10, -88,
          10, -65, 10, -121, 10, -32, 10, -88,
          10, -107, 10, -32, 10, -88, 10, -80,
          10, -32, 10, -88, 10, -90, 10, -32,
          10, -88, 10, -107, 10, -32, 10, -88,
          10, -74, 10, 10, 32, -32, 10, -88,
          10, -88, 10, -32, 10, -87, 10, -127,
          10, -32, 10, -88, 10, -71, 10, -32,
          10, -88, 10, -66, 10, -32, 10, -88,
          10, -80, 10, -32, 10, -88, 10, -97,
          -80, 10, -32, 10, -88, 10, -107, 10,
          -32, 10, -88, 10, -91, 10, -32, 10,
          -88, 10, -66, 10, 10, 32, 58, -32,
          10, -88, 10, -94, -80, 10, -32, 10,
          -88, 10, -66, 10, -32, 10, -88, 10,
          -126, 10, -32, 10, -88, 10, -102, 10,
          -32, 10, -88, 10, -66, 10, -32, 10,
          -87, 10, -126, 10, -32, 10, -88, 10,
          -86, 10, 10, 32, -32, 10, -88, 10,
          -80, 10, -32, 10, -87, 10, -121, 10,
          -32, 10, -88, 10, -106, 10, -32, 10,
          -87, 10, -127, 10, -32, 10, -88, 10,
          -71, 10, -32, 10, -88, 10, -66, 10,
          -32, 10, -88, 10, -126, 10, -32, 10,
          -88, 10, -90, 10, -32, 10, -88, 10,
          -80, 10, 10, 95, 10, 70, 10, 69,
          10, 65, 10, 84, 10, 85, 10, 82,
          10, 69, 10, 95, 10, 69, 10, 78,
          10, 68, 10, 95, 10, 37, -32, -87,
          -127, -32, -88, -71, -32, -88, -66, -32,
          -88, -126, -32, -88, -90, -32, -88, -80,
          -32, -88, -66, -69, -65, 0
        ]

        class << self
          attr_accessor :_lexer_single_lengths
          private :_lexer_single_lengths, :_lexer_single_lengths=
        end
        self._lexer_single_lengths = [
          0, 10, 1, 8, 1, 1, 1, 1,
          1, 1, 1, 2, 2, 9, 1, 1,
          2, 2, 3, 3, 3, 3, 2, 2,
          2, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          3, 5, 3, 2, 4, 3, 2, 4,
          9, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 5, 2, 4, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 9, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 6, 2, 6, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 3,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          1, 2, 2, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 3, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 2, 1, 1,
          2, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          7, 2, 8, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 3, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 7, 2, 8, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 3, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 4, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 2, 3, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 7, 2, 8, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 3, 3,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 3, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 0
        ]

        class << self
          attr_accessor :_lexer_range_lengths
          private :_lexer_range_lengths, :_lexer_range_lengths=
        end
        self._lexer_range_lengths = [
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 1, 0, 0,
          0, 0, 1, 1, 1, 1, 1, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          1, 1, 1, 1, 1, 0, 0, 1,
          1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0
        ]

        class << self
          attr_accessor :_lexer_index_offsets
          private :_lexer_index_offsets, :_lexer_index_offsets=
        end
        self._lexer_index_offsets = [
          0, 0, 12, 14, 23, 25, 27, 29,
          31, 33, 35, 37, 40, 43, 54, 56,
          58, 61, 64, 69, 74, 79, 84, 88,
          92, 95, 97, 99, 101, 103, 105, 107,
          109, 111, 113, 115, 117, 119, 121, 123,
          125, 130, 137, 142, 146, 152, 156, 159,
          165, 176, 178, 180, 182, 184, 186, 188,
          190, 192, 194, 196, 198, 200, 202, 204,
          206, 208, 210, 212, 214, 216, 218, 220,
          222, 224, 231, 234, 239, 242, 245, 248,
          251, 254, 257, 260, 263, 266, 269, 272,
          275, 278, 281, 284, 287, 298, 301, 304,
          307, 310, 313, 316, 319, 322, 325, 328,
          331, 334, 337, 340, 343, 346, 349, 352,
          355, 358, 361, 364, 367, 370, 373, 376,
          379, 382, 385, 388, 391, 394, 397, 400,
          403, 406, 409, 412, 415, 418, 421, 424,
          427, 429, 431, 433, 435, 437, 439, 441,
          443, 445, 447, 449, 451, 453, 455, 457,
          459, 461, 463, 471, 474, 481, 484, 487,
          490, 493, 496, 499, 502, 505, 508, 511,
          514, 517, 520, 523, 526, 529, 532, 535,
          538, 541, 544, 547, 550, 553, 556, 559,
          562, 565, 568, 571, 574, 577, 580, 583,
          586, 589, 592, 595, 598, 601, 604, 607,
          610, 613, 616, 619, 622, 625, 628, 631,
          634, 637, 640, 643, 646, 649, 652, 655,
          658, 661, 664, 668, 671, 674, 677, 680,
          683, 686, 689, 692, 695, 699, 702, 705,
          709, 712, 715, 718, 721, 724, 727, 730,
          733, 736, 739, 742, 745, 748, 751, 754,
          757, 760, 763, 766, 769, 772, 775, 778,
          781, 784, 787, 790, 793, 796, 799, 802,
          805, 808, 811, 814, 817, 820, 823, 826,
          829, 832, 835, 838, 841, 844, 847, 850,
          853, 856, 859, 862, 865, 868, 871, 874,
          877, 880, 883, 886, 889, 892, 895, 898,
          901, 904, 907, 910, 913, 916, 919, 922,
          925, 927, 930, 933, 935, 937, 939, 941,
          943, 945, 947, 949, 951, 953, 955, 957,
          959, 961, 963, 965, 967, 969, 971, 973,
          975, 977, 979, 981, 983, 985, 987, 989,
          991, 993, 995, 997, 999, 1001, 1003, 1005,
          1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021,
          1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037,
          1039, 1041, 1043, 1045, 1049, 1051, 1053, 1055,
          1057, 1059, 1061, 1063, 1065, 1067, 1070, 1072,
          1074, 1077, 1079, 1081, 1083, 1085, 1087, 1089,
          1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105,
          1107, 1116, 1119, 1128, 1131, 1134, 1137, 1140,
          1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164,
          1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188,
          1191, 1194, 1197, 1200, 1204, 1208, 1211, 1214,
          1217, 1220, 1223, 1226, 1229, 1232, 1235, 1238,
          1241, 1244, 1247, 1250, 1253, 1256, 1259, 1262,
          1265, 1268, 1271, 1274, 1277, 1280, 1283, 1286,
          1289, 1292, 1295, 1298, 1301, 1304, 1307, 1310,
          1313, 1316, 1319, 1322, 1325, 1328, 1331, 1334,
          1337, 1340, 1343, 1346, 1349, 1352, 1355, 1358,
          1361, 1364, 1367, 1370, 1373, 1376, 1380, 1383,
          1386, 1389, 1392, 1395, 1398, 1401, 1404, 1407,
          1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431,
          1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455,
          1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479,
          1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503,
          1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519,
          1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535,
          1537, 1539, 1548, 1551, 1560, 1563, 1566, 1569,
          1572, 1575, 1578, 1581, 1584, 1587, 1590, 1593,
          1596, 1599, 1602, 1605, 1608, 1611, 1614, 1617,
          1620, 1623, 1626, 1629, 1632, 1636, 1640, 1643,
          1646, 1649, 1652, 1655, 1658, 1661, 1664, 1667,
          1670, 1673, 1676, 1679, 1682, 1685, 1688, 1691,
          1694, 1697, 1700, 1703, 1706, 1709, 1712, 1715,
          1718, 1721, 1724, 1727, 1730, 1733, 1736, 1739,
          1742, 1745, 1748, 1751, 1754, 1757, 1760, 1763,
          1766, 1769, 1772, 1775, 1778, 1781, 1784, 1787,
          1790, 1793, 1796, 1799, 1802, 1805, 1808, 1813,
          1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837,
          1840, 1844, 1847, 1850, 1854, 1857, 1860, 1863,
          1866, 1869, 1872, 1875, 1878, 1881, 1884, 1887,
          1890, 1893, 1896, 1899, 1902, 1905, 1908, 1911,
          1914, 1917, 1920, 1923, 1926, 1929, 1932, 1935,
          1938, 1941, 1944, 1947, 1950, 1953, 1956, 1959,
          1962, 1965, 1968, 1971, 1974, 1977, 1980, 1983,
          1986, 1989, 1992, 1995, 1998, 2001, 2004, 2007,
          2010, 2013, 2016, 2019, 2022, 2025, 2028, 2031,
          2034, 2037, 2040, 2043, 2046, 2049, 2052, 2055,
          2058, 2061, 2064, 2067, 2070, 2072, 2074, 2076,
          2078, 2080, 2082, 2084, 2086, 2088, 2090, 2092,
          2094, 2096, 2098, 2100, 2109, 2112, 2121, 2124,
          2127, 2130, 2133, 2136, 2139, 2142, 2145, 2148,
          2151, 2154, 2157, 2160, 2163, 2166, 2169, 2172,
          2175, 2178, 2181, 2184, 2187, 2190, 2193, 2197,
          2201, 2204, 2207, 2210, 2213, 2216, 2219, 2222,
          2225, 2228, 2231, 2234, 2237, 2240, 2243, 2246,
          2249, 2252, 2255, 2258, 2261, 2264, 2267, 2270,
          2273, 2276, 2279, 2282, 2285, 2288, 2291, 2294,
          2297, 2300, 2303, 2306, 2309, 2312, 2315, 2318,
          2321, 2324, 2327, 2330, 2333, 2336, 2339, 2342,
          2345, 2348, 2351, 2354, 2357, 2360, 2363, 2366,
          2369, 2373, 2376, 2379, 2382, 2385, 2388, 2391,
          2394, 2397, 2400, 2404, 2407, 2410, 2414, 2417,
          2420, 2423, 2426, 2429, 2432, 2435, 2438, 2441,
          2444, 2447, 2450, 2453, 2456, 2459, 2462, 2465,
          2468, 2471, 2474, 2477, 2480, 2483, 2486, 2489,
          2492, 2495, 2498, 2501, 2504, 2507, 2510, 2513,
          2516, 2519, 2522, 2525, 2528, 2531, 2534, 2537,
          2540, 2543, 2546, 2549, 2552, 2555, 2558, 2561,
          2564, 2567, 2570, 2573, 2576, 2579, 2582, 2585,
          2588, 2591, 2594, 2596, 2598, 2600, 2602, 2604,
          2606, 2608, 2610, 2612, 2614, 2616, 2618, 2620,
          2622, 2624, 2626, 2628, 2630, 2632, 2634, 2636,
          2638, 2640
        ]

        class << self
          attr_accessor :_lexer_indicies
          private :_lexer_indicies, :_lexer_indicies=
        end
        self._lexer_indicies = [
          1, 2, 4, 3, 5, 6, 7, 8,
          9, 10, 3, 0, 11, 0, 12, 13,
          14, 15, 16, 17, 18, 19, 0, 20,
          0, 21, 0, 22, 0, 23, 0, 24,
          0, 25, 0, 26, 0, 28, 29, 27,
          31, 32, 30, 1, 4, 3, 5, 6,
          7, 8, 9, 10, 3, 0, 33, 0,
          34, 0, 36, 37, 35, 39, 40, 38,
          43, 42, 44, 42, 41, 47, 46, 48,
          46, 45, 47, 46, 49, 46, 45, 47,
          46, 50, 46, 45, 52, 51, 51, 0,
          4, 53, 53, 0, 55, 56, 54, 4,
          0, 57, 0, 58, 0, 59, 0, 60,
          0, 61, 0, 62, 0, 63, 0, 64,
          0, 65, 0, 66, 0, 67, 0, 68,
          0, 69, 0, 70, 0, 0, 0, 0,
          0, 71, 72, 73, 72, 72, 75, 74,
          71, 4, 76, 9, 76, 0, 77, 78,
          77, 0, 81, 80, 82, 83, 80, 79,
          0, 85, 86, 84, 0, 85, 84, 81,
          87, 85, 86, 87, 84, 88, 81, 89,
          90, 91, 92, 93, 94, 95, 89, 0,
          96, 0, 97, 0, 98, 0, 99, 0,
          100, 0, 101, 0, 102, 0, 103, 0,
          104, 0, 105, 0, 106, 0, 107, 0,
          108, 0, 109, 0, 110, 0, 111, 0,
          112, 0, 113, 0, 114, 0, 115, 0,
          116, 0, 117, 0, 119, 118, 121, 120,
          122, 121, 123, 124, 124, 123, 120, 125,
          121, 120, 126, 127, 128, 121, 120, 129,
          121, 120, 130, 121, 120, 131, 121, 120,
          132, 121, 120, 133, 121, 120, 134, 121,
          120, 135, 121, 120, 136, 121, 120, 137,
          121, 120, 138, 121, 120, 139, 121, 120,
          140, 121, 120, 141, 121, 120, 142, 121,
          120, 143, 121, 120, 121, 144, 120, 145,
          147, 146, 148, 149, 150, 151, 152, 153,
          146, 0, 154, 121, 120, 155, 121, 120,
          156, 121, 120, 157, 121, 120, 158, 121,
          120, 159, 121, 120, 121, 160, 120, 161,
          121, 120, 162, 121, 120, 163, 121, 120,
          164, 121, 120, 165, 121, 120, 166, 121,
          120, 167, 121, 120, 168, 121, 120, 169,
          121, 120, 170, 121, 120, 171, 121, 120,
          172, 121, 120, 173, 121, 120, 174, 121,
          120, 143, 121, 120, 175, 121, 120, 176,
          121, 120, 177, 121, 120, 178, 121, 120,
          179, 121, 120, 180, 121, 120, 181, 121,
          120, 182, 121, 120, 183, 121, 120, 184,
          121, 120, 185, 121, 120, 186, 121, 120,
          187, 121, 120, 188, 121, 120, 189, 121,
          120, 190, 121, 120, 191, 121, 120, 192,
          121, 120, 193, 121, 120, 194, 121, 120,
          143, 121, 120, 195, 0, 196, 0, 197,
          0, 198, 0, 199, 0, 200, 0, 201,
          0, 202, 0, 203, 0, 204, 0, 205,
          0, 206, 0, 207, 0, 208, 0, 209,
          0, 210, 0, 212, 211, 214, 213, 215,
          214, 216, 217, 218, 217, 216, 213, 219,
          214, 213, 220, 221, 222, 223, 224, 214,
          213, 225, 214, 213, 226, 214, 213, 227,
          214, 213, 228, 214, 213, 229, 214, 213,
          230, 214, 213, 231, 214, 213, 232, 214,
          213, 233, 214, 213, 234, 214, 213, 235,
          214, 213, 236, 214, 213, 237, 214, 213,
          238, 214, 213, 239, 214, 213, 240, 214,
          213, 241, 214, 213, 242, 214, 213, 243,
          214, 213, 244, 214, 213, 245, 214, 213,
          214, 246, 213, 247, 214, 213, 248, 214,
          213, 249, 214, 213, 250, 214, 213, 251,
          214, 213, 252, 214, 213, 253, 214, 213,
          254, 214, 213, 255, 214, 213, 256, 214,
          213, 257, 214, 213, 258, 214, 213, 259,
          214, 213, 260, 214, 213, 245, 214, 213,
          261, 214, 213, 262, 214, 213, 263, 214,
          213, 264, 214, 213, 265, 214, 213, 266,
          214, 213, 214, 267, 213, 268, 214, 213,
          269, 214, 213, 270, 214, 213, 271, 214,
          213, 272, 214, 213, 273, 214, 213, 274,
          214, 213, 275, 214, 213, 276, 214, 213,
          277, 214, 213, 278, 214, 213, 279, 214,
          213, 280, 214, 213, 281, 214, 213, 245,
          214, 213, 282, 214, 213, 283, 214, 213,
          284, 285, 214, 213, 286, 214, 213, 287,
          214, 213, 288, 214, 213, 289, 214, 213,
          290, 214, 213, 291, 214, 213, 292, 214,
          213, 293, 214, 213, 294, 214, 213, 214,
          295, 246, 213, 296, 214, 213, 297, 214,
          213, 298, 299, 214, 213, 300, 214, 213,
          301, 214, 213, 302, 214, 213, 303, 214,
          213, 304, 214, 213, 305, 214, 213, 306,
          214, 213, 307, 214, 213, 308, 214, 213,
          309, 214, 213, 310, 214, 213, 245, 214,
          213, 311, 214, 213, 312, 214, 213, 313,
          214, 213, 314, 214, 213, 315, 214, 213,
          316, 214, 213, 214, 317, 213, 318, 214,
          213, 319, 214, 213, 320, 214, 213, 321,
          214, 213, 322, 214, 213, 323, 214, 213,
          324, 214, 213, 325, 214, 213, 308, 214,
          213, 326, 214, 213, 327, 214, 213, 328,
          214, 213, 329, 214, 213, 330, 214, 213,
          331, 214, 213, 332, 214, 213, 333, 214,
          213, 334, 214, 213, 335, 214, 213, 336,
          214, 213, 245, 214, 213, 337, 214, 213,
          338, 214, 213, 339, 214, 213, 340, 214,
          213, 341, 214, 213, 342, 214, 213, 343,
          214, 213, 344, 214, 213, 345, 214, 213,
          346, 214, 213, 347, 214, 213, 348, 214,
          213, 349, 214, 213, 350, 214, 213, 351,
          214, 213, 352, 214, 213, 353, 214, 213,
          308, 214, 213, 214, 354, 213, 214, 355,
          213, 214, 356, 213, 214, 357, 213, 214,
          358, 213, 214, 359, 213, 214, 360, 213,
          214, 361, 213, 214, 362, 213, 214, 363,
          213, 214, 364, 213, 214, 365, 213, 214,
          366, 213, 214, 367, 213, 368, 0, 369,
          370, 0, 371, 372, 0, 373, 0, 374,
          0, 375, 0, 376, 0, 377, 0, 25,
          0, 378, 0, 379, 0, 380, 0, 381,
          0, 382, 0, 383, 0, 384, 0, 385,
          0, 386, 0, 387, 0, 388, 0, 389,
          0, 390, 0, 391, 0, 392, 0, 25,
          0, 393, 0, 394, 0, 395, 0, 396,
          0, 397, 0, 398, 0, 25, 0, 399,
          0, 400, 0, 25, 0, 401, 0, 402,
          0, 403, 0, 404, 0, 405, 0, 406,
          0, 407, 0, 408, 0, 409, 0, 410,
          0, 411, 0, 412, 0, 413, 0, 414,
          0, 415, 0, 416, 0, 417, 0, 418,
          0, 419, 0, 420, 0, 421, 0, 209,
          0, 422, 0, 423, 0, 424, 25, 425,
          0, 426, 0, 427, 0, 428, 0, 429,
          0, 430, 0, 431, 0, 432, 0, 433,
          0, 434, 0, 435, 436, 0, 437, 0,
          438, 0, 439, 440, 0, 441, 0, 442,
          0, 443, 0, 444, 0, 445, 0, 446,
          0, 447, 0, 448, 0, 449, 0, 450,
          0, 451, 0, 452, 0, 453, 0, 455,
          454, 457, 456, 458, 457, 459, 460, 461,
          462, 460, 459, 456, 463, 457, 456, 464,
          465, 466, 467, 468, 469, 470, 457, 456,
          471, 457, 456, 472, 457, 456, 473, 457,
          456, 474, 457, 456, 475, 457, 456, 476,
          457, 456, 457, 477, 456, 478, 457, 456,
          479, 457, 456, 480, 457, 456, 481, 457,
          456, 482, 457, 456, 483, 457, 456, 484,
          457, 456, 485, 457, 456, 486, 457, 456,
          487, 457, 456, 488, 457, 456, 489, 457,
          456, 490, 457, 456, 491, 457, 456, 492,
          457, 456, 457, 477, 456, 493, 457, 456,
          494, 495, 457, 456, 496, 497, 457, 456,
          498, 457, 456, 499, 457, 456, 500, 457,
          456, 501, 457, 456, 502, 457, 456, 476,
          457, 456, 503, 457, 456, 504, 457, 456,
          505, 457, 456, 506, 457, 456, 507, 457,
          456, 508, 457, 456, 509, 457, 456, 510,
          457, 456, 511, 457, 456, 457, 512, 456,
          513, 457, 456, 514, 457, 456, 515, 457,
          456, 516, 457, 456, 517, 457, 456, 476,
          457, 456, 518, 457, 456, 519, 457, 456,
          520, 457, 456, 521, 457, 456, 522, 457,
          456, 523, 457, 456, 476, 457, 456, 524,
          457, 456, 525, 457, 456, 476, 457, 456,
          526, 457, 456, 527, 457, 456, 528, 457,
          456, 529, 457, 456, 530, 457, 456, 531,
          457, 456, 457, 532, 456, 533, 457, 456,
          534, 457, 456, 535, 457, 456, 536, 457,
          456, 537, 457, 456, 538, 457, 456, 539,
          457, 456, 540, 457, 456, 541, 457, 456,
          542, 457, 456, 543, 457, 456, 544, 457,
          456, 545, 457, 456, 546, 457, 456, 492,
          457, 456, 547, 457, 456, 548, 457, 456,
          549, 476, 457, 456, 550, 457, 456, 551,
          457, 456, 552, 457, 456, 553, 457, 456,
          554, 457, 456, 555, 457, 456, 556, 457,
          456, 557, 457, 456, 492, 457, 456, 558,
          457, 456, 559, 457, 456, 560, 457, 456,
          561, 457, 456, 562, 457, 456, 563, 457,
          456, 564, 457, 456, 565, 457, 456, 566,
          457, 456, 567, 457, 456, 568, 457, 456,
          569, 457, 456, 570, 457, 456, 571, 457,
          456, 572, 457, 456, 573, 457, 456, 574,
          457, 456, 555, 457, 456, 457, 575, 456,
          457, 576, 456, 457, 577, 456, 457, 578,
          456, 457, 579, 456, 457, 580, 456, 457,
          581, 456, 457, 582, 456, 457, 583, 456,
          457, 584, 456, 457, 585, 456, 457, 586,
          456, 457, 587, 456, 457, 588, 456, 589,
          0, 590, 0, 591, 0, 592, 0, 593,
          0, 594, 0, 595, 0, 596, 0, 597,
          0, 598, 0, 599, 0, 600, 0, 601,
          0, 602, 0, 603, 0, 449, 0, 605,
          604, 607, 606, 608, 607, 609, 610, 611,
          612, 610, 609, 606, 613, 607, 606, 614,
          615, 616, 617, 618, 619, 620, 607, 606,
          621, 607, 606, 622, 607, 606, 623, 607,
          606, 624, 607, 606, 625, 607, 606, 626,
          607, 606, 607, 627, 606, 628, 607, 606,
          629, 607, 606, 630, 607, 606, 631, 607,
          606, 632, 607, 606, 633, 607, 606, 634,
          607, 606, 635, 607, 606, 636, 607, 606,
          637, 607, 606, 638, 607, 606, 639, 607,
          606, 640, 607, 606, 641, 607, 606, 642,
          607, 606, 607, 627, 606, 643, 607, 606,
          644, 645, 607, 606, 646, 647, 607, 606,
          648, 607, 606, 649, 607, 606, 650, 607,
          606, 651, 607, 606, 652, 607, 606, 626,
          607, 606, 653, 607, 606, 654, 607, 606,
          655, 607, 606, 656, 607, 606, 657, 607,
          606, 658, 607, 606, 659, 607, 606, 660,
          607, 606, 661, 607, 606, 607, 662, 606,
          663, 607, 606, 664, 607, 606, 665, 607,
          606, 666, 607, 606, 667, 607, 606, 626,
          607, 606, 668, 607, 606, 669, 607, 606,
          670, 607, 606, 671, 607, 606, 672, 607,
          606, 673, 607, 606, 626, 607, 606, 674,
          607, 606, 675, 607, 606, 626, 607, 606,
          676, 607, 606, 677, 607, 606, 678, 607,
          606, 679, 607, 606, 680, 607, 606, 681,
          607, 606, 607, 682, 606, 683, 607, 606,
          684, 607, 606, 685, 607, 606, 686, 607,
          606, 687, 607, 606, 688, 607, 606, 689,
          607, 606, 690, 607, 606, 691, 607, 606,
          692, 607, 606, 693, 607, 606, 694, 607,
          606, 695, 607, 606, 696, 607, 606, 642,
          607, 606, 697, 607, 606, 698, 607, 606,
          699, 626, 700, 607, 606, 701, 607, 606,
          702, 607, 606, 703, 607, 606, 704, 607,
          606, 705, 607, 606, 706, 607, 606, 707,
          607, 606, 708, 607, 606, 709, 607, 606,
          607, 710, 627, 606, 711, 607, 606, 712,
          607, 606, 713, 714, 607, 606, 715, 607,
          606, 716, 607, 606, 717, 607, 606, 718,
          607, 606, 719, 607, 606, 720, 607, 606,
          721, 607, 606, 722, 607, 606, 723, 607,
          606, 724, 607, 606, 725, 607, 606, 642,
          607, 606, 726, 607, 606, 727, 607, 606,
          728, 607, 606, 729, 607, 606, 730, 607,
          606, 731, 607, 606, 607, 732, 606, 733,
          607, 606, 734, 607, 606, 735, 607, 606,
          736, 607, 606, 737, 607, 606, 738, 607,
          606, 739, 607, 606, 740, 607, 606, 723,
          607, 606, 741, 607, 606, 742, 607, 606,
          743, 607, 606, 744, 607, 606, 745, 607,
          606, 746, 607, 606, 747, 607, 606, 748,
          607, 606, 749, 607, 606, 750, 607, 606,
          751, 607, 606, 642, 607, 606, 752, 607,
          606, 753, 607, 606, 754, 607, 606, 755,
          607, 606, 756, 607, 606, 757, 607, 606,
          758, 607, 606, 759, 607, 606, 760, 607,
          606, 761, 607, 606, 762, 607, 606, 763,
          607, 606, 764, 607, 606, 765, 607, 606,
          766, 607, 606, 767, 607, 606, 768, 607,
          606, 723, 607, 606, 607, 769, 606, 607,
          770, 606, 607, 771, 606, 607, 772, 606,
          607, 773, 606, 607, 774, 606, 607, 775,
          606, 607, 776, 606, 607, 777, 606, 607,
          778, 606, 607, 779, 606, 607, 780, 606,
          607, 781, 606, 607, 782, 606, 783, 0,
          784, 0, 785, 0, 786, 0, 787, 0,
          788, 0, 789, 0, 790, 0, 791, 0,
          792, 0, 793, 0, 794, 0, 795, 0,
          797, 796, 799, 798, 800, 799, 801, 802,
          803, 804, 802, 801, 798, 805, 799, 798,
          806, 807, 808, 809, 810, 811, 812, 799,
          798, 813, 799, 798, 814, 799, 798, 815,
          799, 798, 816, 799, 798, 817, 799, 798,
          818, 799, 798, 799, 819, 798, 820, 799,
          798, 821, 799, 798, 822, 799, 798, 823,
          799, 798, 824, 799, 798, 825, 799, 798,
          826, 799, 798, 827, 799, 798, 828, 799,
          798, 829, 799, 798, 830, 799, 798, 831,
          799, 798, 832, 799, 798, 833, 799, 798,
          834, 799, 798, 799, 819, 798, 835, 799,
          798, 836, 837, 799, 798, 838, 839, 799,
          798, 840, 799, 798, 841, 799, 798, 842,
          799, 798, 843, 799, 798, 844, 799, 798,
          818, 799, 798, 845, 799, 798, 846, 799,
          798, 847, 799, 798, 848, 799, 798, 849,
          799, 798, 850, 799, 798, 851, 799, 798,
          852, 799, 798, 853, 799, 798, 799, 854,
          798, 855, 799, 798, 856, 799, 798, 857,
          799, 798, 858, 799, 798, 859, 799, 798,
          818, 799, 798, 860, 799, 798, 861, 799,
          798, 862, 799, 798, 863, 799, 798, 864,
          799, 798, 865, 799, 798, 818, 799, 798,
          866, 799, 798, 867, 799, 798, 818, 799,
          798, 868, 799, 798, 869, 799, 798, 870,
          799, 798, 871, 799, 798, 872, 799, 798,
          873, 799, 798, 799, 874, 798, 875, 799,
          798, 876, 799, 798, 877, 799, 798, 878,
          799, 798, 879, 799, 798, 880, 799, 798,
          881, 799, 798, 882, 799, 798, 883, 799,
          798, 884, 799, 798, 885, 799, 798, 886,
          799, 798, 887, 799, 798, 888, 799, 798,
          834, 799, 798, 889, 799, 798, 890, 799,
          798, 891, 818, 799, 798, 892, 799, 798,
          893, 799, 798, 894, 799, 798, 895, 799,
          798, 896, 799, 798, 897, 799, 798, 898,
          799, 798, 899, 799, 798, 900, 799, 798,
          799, 901, 819, 798, 902, 799, 798, 903,
          799, 798, 904, 905, 799, 798, 906, 799,
          798, 907, 799, 798, 908, 799, 798, 909,
          799, 798, 910, 799, 798, 911, 799, 798,
          912, 799, 798, 913, 799, 798, 914, 799,
          798, 915, 799, 798, 916, 799, 798, 834,
          799, 798, 917, 799, 798, 918, 799, 798,
          919, 799, 798, 920, 799, 798, 921, 799,
          798, 922, 799, 798, 799, 923, 798, 924,
          799, 798, 925, 799, 798, 926, 799, 798,
          927, 799, 798, 928, 799, 798, 929, 799,
          798, 930, 799, 798, 931, 799, 798, 914,
          799, 798, 932, 799, 798, 933, 799, 798,
          934, 799, 798, 935, 799, 798, 936, 799,
          798, 937, 799, 798, 938, 799, 798, 939,
          799, 798, 940, 799, 798, 941, 799, 798,
          942, 799, 798, 943, 799, 798, 944, 799,
          798, 945, 799, 798, 946, 799, 798, 947,
          799, 798, 948, 799, 798, 914, 799, 798,
          799, 949, 798, 799, 950, 798, 799, 951,
          798, 799, 952, 798, 799, 953, 798, 799,
          954, 798, 799, 955, 798, 799, 956, 798,
          799, 957, 798, 799, 958, 798, 799, 959,
          798, 799, 960, 798, 799, 961, 798, 799,
          962, 798, 963, 0, 964, 0, 965, 0,
          966, 0, 967, 0, 968, 0, 969, 0,
          970, 0, 971, 0, 972, 0, 973, 0,
          974, 0, 975, 0, 976, 0, 977, 0,
          978, 0, 979, 0, 980, 0, 981, 0,
          982, 0, 209, 0, 983, 0, 3, 0,
          984, 0
        ]

        class << self
          attr_accessor :_lexer_trans_targs
          private :_lexer_trans_targs, :_lexer_trans_targs=
        end
        self._lexer_trans_targs = [
          0, 2, 903, 13, 13, 14, 24, 26,
          10, 40, 43, 3, 4, 49, 136, 304,
          336, 339, 361, 882, 5, 6, 7, 8,
          9, 10, 11, 12, 13, 25, 12, 13,
          25, 15, 16, 17, 18, 17, 17, 18,
          17, 19, 19, 19, 20, 19, 19, 19,
          20, 21, 22, 23, 13, 23, 24, 13,
          25, 27, 28, 29, 30, 31, 32, 33,
          34, 35, 36, 37, 38, 39, 905, 41,
          42, 13, 41, 40, 42, 43, 44, 45,
          47, 48, 46, 44, 45, 46, 44, 47,
          2, 48, 14, 24, 26, 10, 40, 43,
          50, 51, 52, 53, 54, 55, 56, 57,
          58, 59, 60, 61, 62, 63, 64, 65,
          66, 67, 68, 69, 70, 71, 72, 73,
          72, 73, 74, 73, 13, 75, 76, 93,
          115, 77, 78, 79, 80, 81, 82, 83,
          84, 85, 86, 87, 88, 89, 90, 91,
          92, 2, 13, 13, 14, 24, 26, 10,
          40, 43, 94, 95, 96, 97, 98, 99,
          100, 101, 102, 103, 104, 105, 106, 107,
          108, 109, 110, 111, 112, 113, 114, 116,
          117, 118, 119, 120, 121, 122, 123, 124,
          125, 126, 127, 128, 129, 130, 131, 132,
          133, 134, 135, 137, 138, 139, 140, 141,
          142, 143, 144, 145, 146, 147, 148, 149,
          150, 151, 152, 153, 154, 153, 154, 155,
          154, 13, 290, 156, 157, 179, 194, 216,
          272, 158, 159, 160, 161, 162, 163, 164,
          165, 166, 167, 168, 169, 170, 171, 172,
          173, 174, 175, 176, 177, 178, 92, 180,
          181, 182, 183, 184, 185, 186, 187, 188,
          189, 190, 191, 192, 193, 195, 196, 197,
          198, 199, 200, 201, 202, 203, 204, 205,
          206, 207, 208, 209, 210, 211, 212, 213,
          214, 215, 217, 218, 219, 260, 220, 221,
          222, 223, 224, 225, 226, 227, 228, 229,
          230, 231, 232, 244, 233, 234, 235, 236,
          237, 238, 239, 240, 241, 242, 243, 245,
          246, 247, 248, 249, 250, 251, 252, 253,
          254, 255, 256, 257, 258, 259, 261, 262,
          263, 264, 265, 266, 267, 268, 269, 270,
          271, 273, 274, 275, 276, 277, 278, 279,
          280, 281, 282, 283, 284, 285, 286, 287,
          288, 289, 291, 292, 293, 294, 295, 296,
          297, 298, 299, 300, 301, 302, 303, 13,
          305, 306, 329, 307, 313, 308, 309, 310,
          311, 312, 314, 315, 316, 317, 318, 319,
          320, 321, 322, 323, 324, 325, 326, 327,
          328, 330, 331, 332, 333, 334, 335, 337,
          338, 340, 341, 342, 343, 344, 345, 346,
          347, 348, 349, 350, 351, 352, 353, 354,
          355, 356, 357, 358, 359, 360, 362, 363,
          364, 708, 365, 366, 367, 368, 369, 370,
          371, 372, 373, 374, 535, 375, 376, 377,
          519, 378, 379, 380, 381, 382, 383, 384,
          385, 386, 387, 388, 389, 390, 391, 392,
          391, 392, 393, 392, 13, 505, 401, 394,
          395, 402, 418, 450, 453, 475, 487, 396,
          397, 398, 399, 400, 401, 92, 403, 404,
          405, 406, 407, 408, 409, 410, 411, 412,
          413, 414, 415, 416, 417, 419, 420, 443,
          421, 427, 422, 423, 424, 425, 426, 428,
          429, 430, 431, 432, 433, 434, 435, 436,
          437, 438, 439, 440, 441, 442, 444, 445,
          446, 447, 448, 449, 451, 452, 454, 455,
          456, 457, 458, 459, 460, 461, 462, 463,
          464, 465, 466, 467, 468, 469, 470, 471,
          472, 473, 474, 476, 477, 478, 479, 480,
          481, 482, 483, 484, 485, 486, 488, 489,
          490, 491, 492, 493, 494, 495, 496, 497,
          498, 499, 500, 501, 502, 503, 504, 506,
          507, 508, 509, 510, 511, 512, 513, 514,
          515, 516, 517, 518, 13, 520, 521, 522,
          523, 524, 525, 526, 527, 528, 529, 530,
          531, 532, 533, 534, 536, 537, 536, 537,
          538, 537, 13, 694, 546, 539, 540, 547,
          563, 595, 598, 620, 676, 541, 542, 543,
          544, 545, 546, 92, 548, 549, 550, 551,
          552, 553, 554, 555, 556, 557, 558, 559,
          560, 561, 562, 564, 565, 588, 566, 572,
          567, 568, 569, 570, 571, 573, 574, 575,
          576, 577, 578, 579, 580, 581, 582, 583,
          584, 585, 586, 587, 589, 590, 591, 592,
          593, 594, 596, 597, 599, 600, 601, 602,
          603, 604, 605, 606, 607, 608, 609, 610,
          611, 612, 613, 614, 615, 616, 617, 618,
          619, 621, 622, 623, 664, 624, 625, 626,
          627, 628, 629, 630, 631, 632, 633, 634,
          635, 636, 648, 637, 638, 639, 640, 641,
          642, 643, 644, 645, 646, 647, 649, 650,
          651, 652, 653, 654, 655, 656, 657, 658,
          659, 660, 661, 662, 663, 665, 666, 667,
          668, 669, 670, 671, 672, 673, 674, 675,
          677, 678, 679, 680, 681, 682, 683, 684,
          685, 686, 687, 688, 689, 690, 691, 692,
          693, 695, 696, 697, 698, 699, 700, 701,
          702, 703, 704, 705, 706, 707, 13, 709,
          710, 711, 712, 713, 714, 715, 716, 717,
          718, 719, 720, 721, 722, 723, 722, 723,
          724, 723, 13, 868, 732, 725, 726, 733,
          749, 781, 784, 806, 850, 727, 728, 729,
          730, 731, 732, 92, 734, 735, 736, 737,
          738, 739, 740, 741, 742, 743, 744, 745,
          746, 747, 748, 750, 751, 774, 752, 758,
          753, 754, 755, 756, 757, 759, 760, 761,
          762, 763, 764, 765, 766, 767, 768, 769,
          770, 771, 772, 773, 775, 776, 777, 778,
          779, 780, 782, 783, 785, 786, 787, 788,
          789, 790, 791, 792, 793, 794, 795, 796,
          797, 798, 799, 800, 801, 802, 803, 804,
          805, 807, 808, 809, 810, 811, 812, 813,
          814, 815, 816, 817, 818, 819, 820, 821,
          822, 834, 823, 824, 825, 826, 827, 828,
          829, 830, 831, 832, 833, 835, 836, 837,
          838, 839, 840, 841, 842, 843, 844, 845,
          846, 847, 848, 849, 851, 852, 853, 854,
          855, 856, 857, 858, 859, 860, 861, 862,
          863, 864, 865, 866, 867, 869, 870, 871,
          872, 873, 874, 875, 876, 877, 878, 879,
          880, 881, 13, 883, 884, 885, 886, 887,
          888, 889, 890, 891, 892, 893, 894, 895,
          896, 897, 898, 899, 900, 901, 902, 904,
          0
        ]

        class << self
          attr_accessor :_lexer_trans_actions
          private :_lexer_trans_actions, :_lexer_trans_actions=
        end
        self._lexer_trans_actions = [
          43, 29, 0, 0, 54, 3, 1, 0,
          29, 1, 35, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 57, 149, 126, 0, 110,
          23, 0, 0, 7, 139, 48, 0, 102,
          9, 5, 45, 134, 45, 0, 33, 122,
          33, 33, 0, 11, 106, 0, 0, 114,
          25, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          27, 118, 27, 51, 0, 0, 0, 37,
          37, 54, 37, 87, 0, 0, 39, 0,
          96, 0, 93, 90, 41, 96, 90, 99,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 57, 144,
          0, 54, 84, 0, 81, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          21, 63, 31, 130, 60, 57, 31, 63,
          57, 66, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 57, 144, 0, 54, 84,
          0, 69, 33, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 13, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 13,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 57, 144,
          0, 54, 84, 0, 78, 33, 84, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 19, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 19, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 57, 144, 0, 54,
          84, 0, 75, 33, 84, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 17, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 17, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 57, 144, 0, 54,
          84, 0, 72, 33, 84, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 15, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 15, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0
        ]

        class << self
          attr_accessor :_lexer_eof_actions
          private :_lexer_eof_actions, :_lexer_eof_actions=
        end
        self._lexer_eof_actions = [
          0, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43
        ]

        class << self
          attr_accessor :lexer_start
        end
        self.lexer_start = 1;
        class << self
          attr_accessor :lexer_first_final
        end
        self.lexer_first_final = 905;
        class << self
          attr_accessor :lexer_error
        end
        self.lexer_error = 0;

        class << self
          attr_accessor :lexer_en_main
        end
        self.lexer_en_main = 1;


        # line 133 "ragel/i18n/pa.rb.rl"
      end

      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length

        @line_number = 1
        @last_newline = 0


        # line 1511 "lib/gherkin/lexer/pa.rb"
        begin
          p ||= 0
          pe ||= data.length
          cs = lexer_start
        end

        # line 143 "ragel/i18n/pa.rb.rl"

        # line 1520 "lib/gherkin/lexer/pa.rb"
        begin
          _klen, _trans, _keys, _acts, _nacts = nil
          _goto_level = 0
          _resume = 10
          _eof_trans = 15
          _again = 20
          _test_eof = 30
          _out = 40
          while true
            _trigger_goto = false
            if _goto_level <= 0
              if p == pe
                _goto_level = _test_eof
                next
              end
              if cs == 0
                _goto_level = _out
                next
              end
            end
            if _goto_level <= _resume
              _keys = _lexer_key_offsets[cs]
              _trans = _lexer_index_offsets[cs]
              _klen = _lexer_single_lengths[cs]
              _break_match = false

              begin
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + _klen - 1

                  loop do
                    break if _upper < _lower
                    _mid = _lower + ( (_upper - _lower) >> 1 )

                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 1
                    elsif data[p].ord > _lexer_trans_keys[_mid]
                      _lower = _mid + 1
                    else
                      _trans += (_mid - _keys)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _keys += _klen
                  _trans += _klen
                end
                _klen = _lexer_range_lengths[cs]
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + (_klen << 1) - 2
                  loop do
                    break if _upper < _lower
                    _mid = _lower + (((_upper-_lower) >> 1) & ~1)
                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 2
                    elsif data[p].ord > _lexer_trans_keys[_mid+1]
                      _lower = _mid + 2
                    else
                      _trans += ((_mid - _keys) >> 1)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _trans += _klen
                end
              end while false
              _trans = _lexer_indicies[_trans]
              cs = _lexer_trans_targs[_trans]
              if _lexer_trans_actions[_trans] != 0
                _acts = _lexer_trans_actions[_trans]
                _nacts = _lexer_actions[_acts]
                _acts += 1
                while _nacts > 0
                  _nacts -= 1
                  _acts += 1
                  case _lexer_actions[_acts - 1]
                  when 0 then
                    # line 11 "ragel/i18n/pa.rb.rl"
                    begin

                      @content_start = p
                      @current_line = @line_number
                      @start_col = p - @last_newline - "#{@keyword}:".length
                    end
                  when 1 then
                    # line 17 "ragel/i18n/pa.rb.rl"
                    begin

                      @current_line = @line_number
                      @start_col = p - @last_newline
                    end
                  when 2 then
                    # line 22 "ragel/i18n/pa.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 3 then
                    # line 26 "ragel/i18n/pa.rb.rl"
                    begin

                      @docstring_content_type_start = p
                    end
                  when 4 then
                    # line 29 "ragel/i18n/pa.rb.rl"
                    begin

                      @docstring_content_type_end = p
                    end
                  when 5 then
                    # line 33 "ragel/i18n/pa.rb.rl"
                    begin

                      con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
                      con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
                      @listener.doc_string(con_type, con, @current_line)
                    end
                  when 6 then
                    # line 38 "ragel/i18n/pa.rb.rl"
                    begin

                      p = store_keyword_content(:feature, data, p, eof)
                    end
                  when 7 then
                    # line 42 "ragel/i18n/pa.rb.rl"
                    begin

                      p = store_keyword_content(:background, data, p, eof)
                    end
                  when 8 then
                    # line 46 "ragel/i18n/pa.rb.rl"
                    begin

                      p = store_keyword_content(:scenario, data, p, eof)
                    end
                  when 9 then
                    # line 50 "ragel/i18n/pa.rb.rl"
                    begin

                      p = store_keyword_content(:scenario_outline, data, p, eof)
                    end
                  when 10 then
                    # line 54 "ragel/i18n/pa.rb.rl"
                    begin

                      p = store_keyword_content(:examples, data, p, eof)
                    end
                  when 11 then
                    # line 58 "ragel/i18n/pa.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.step(@keyword, con, @current_line)
                    end
                  when 12 then
                    # line 63 "ragel/i18n/pa.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.comment(con, @line_number)
                      @keyword_start = nil
                    end
                  when 13 then
                    # line 69 "ragel/i18n/pa.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.tag(con, @current_line)
                      @keyword_start = nil
                    end
                  when 14 then
                    # line 75 "ragel/i18n/pa.rb.rl"
                    begin

                      @line_number += 1
                    end
                  when 15 then
                    # line 79 "ragel/i18n/pa.rb.rl"
                    begin

                      @last_newline = p + 1
                    end
                  when 16 then
                    # line 83 "ragel/i18n/pa.rb.rl"
                    begin

                      @keyword_start ||= p
                    end
                  when 17 then
                    # line 87 "ragel/i18n/pa.rb.rl"
                    begin

                      @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
                      @keyword_start = nil
                    end
                  when 18 then
                    # line 92 "ragel/i18n/pa.rb.rl"
                    begin

                      @next_keyword_start = p
                    end
                  when 19 then
                    # line 96 "ragel/i18n/pa.rb.rl"
                    begin

                      p = p - 1
                      current_row = []
                      @current_line = @line_number
                    end
                  when 20 then
                    # line 102 "ragel/i18n/pa.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 21 then
                    # line 106 "ragel/i18n/pa.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
                    end
                  when 22 then
                    # line 111 "ragel/i18n/pa.rb.rl"
                    begin

                      @listener.row(current_row, @current_line)
                    end
                  when 23 then
                    # line 115 "ragel/i18n/pa.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1764 "lib/gherkin/lexer/pa.rb"
                  end # action switch
                end
              end
              if _trigger_goto
                next
              end
            end
            if _goto_level <= _again
              if cs == 0
                _goto_level = _out
                next
              end
              p += 1
              if p != pe
                _goto_level = _resume
                next
              end
            end
            if _goto_level <= _test_eof
              if p == eof
                __acts = _lexer_eof_actions[cs]
                __nacts =  _lexer_actions[__acts]
                __acts += 1
                while __nacts > 0
                  __nacts -= 1
                  __acts += 1
                  case _lexer_actions[__acts - 1]
                  when 23 then
                    # line 115 "ragel/i18n/pa.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1803 "lib/gherkin/lexer/pa.rb"
                  end # eof action switch
                end
                if _trigger_goto
                  next
                end
              end
            end
            if _goto_level <= _out
              break
            end
          end
        end

        # line 144 "ragel/i18n/pa.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end

      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9|2\.0/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
