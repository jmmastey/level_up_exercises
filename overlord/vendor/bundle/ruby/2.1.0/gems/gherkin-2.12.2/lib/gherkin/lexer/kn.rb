
# line 1 "ragel/i18n/kn.rb.rl"
require 'gherkin/native'

module Gherkin
  module Lexer
    class Kn #:nodoc:
      native_impl('gherkin')


      # line 125 "ragel/i18n/kn.rb.rl"


      def initialize(listener)
        @listener = listener

        # Initialize ivars to avoid warnings
        @keyword = nil

        # line 21 "lib/gherkin/lexer/kn.rb"
        class << self
          attr_accessor :_lexer_actions
          private :_lexer_actions, :_lexer_actions=
        end
        self._lexer_actions = [
          0, 1, 0, 1, 1, 1, 2, 1,
          3, 1, 4, 1, 5, 1, 6, 1,
          7, 1, 8, 1, 9, 1, 10, 1,
          11, 1, 12, 1, 13, 1, 16, 1,
          17, 1, 18, 1, 19, 1, 20, 1,
          21, 1, 22, 1, 23, 2, 2, 18,
          2, 3, 4, 2, 13, 0, 2, 14,
          15, 2, 17, 0, 2, 17, 1, 2,
          17, 16, 2, 17, 19, 2, 18, 6,
          2, 18, 7, 2, 18, 8, 2, 18,
          9, 2, 18, 10, 2, 18, 16, 2,
          20, 21, 2, 22, 0, 2, 22, 1,
          2, 22, 16, 2, 22, 19, 3, 4,
          14, 15, 3, 5, 14, 15, 3, 11,
          14, 15, 3, 12, 14, 15, 3, 13,
          14, 15, 3, 14, 15, 18, 3, 17,
          0, 11, 3, 17, 14, 15, 4, 2,
          14, 15, 18, 4, 3, 4, 14, 15,
          4, 17, 0, 14, 15, 5, 17, 0,
          11, 14, 15
        ]

        class << self
          attr_accessor :_lexer_key_offsets
          private :_lexer_key_offsets, :_lexer_key_offsets=
        end
        self._lexer_key_offsets = [
          0, 0, 12, 13, 21, 22, 23, 24,
          25, 26, 27, 28, 29, 30, 31, 33,
          35, 46, 47, 48, 50, 52, 57, 62,
          67, 72, 76, 80, 82, 83, 84, 85,
          86, 87, 88, 89, 90, 91, 92, 93,
          94, 95, 96, 97, 102, 109, 114, 118,
          124, 127, 129, 135, 146, 147, 148, 149,
          150, 151, 152, 153, 154, 155, 156, 157,
          158, 159, 160, 161, 162, 163, 164, 165,
          166, 167, 168, 169, 170, 171, 172, 173,
          174, 175, 176, 183, 185, 187, 189, 191,
          193, 195, 197, 199, 201, 203, 205, 207,
          209, 211, 213, 215, 217, 219, 230, 231,
          232, 233, 234, 235, 236, 237, 238, 239,
          240, 241, 242, 243, 244, 245, 246, 247,
          248, 249, 250, 251, 252, 253, 254, 255,
          256, 257, 266, 268, 276, 278, 280, 282,
          284, 286, 288, 290, 292, 294, 296, 298,
          300, 302, 304, 306, 308, 310, 312, 314,
          316, 318, 320, 322, 324, 326, 328, 330,
          332, 334, 336, 338, 340, 342, 344, 346,
          348, 350, 353, 355, 357, 359, 361, 363,
          365, 367, 369, 371, 373, 375, 377, 379,
          381, 383, 385, 387, 389, 391, 393, 395,
          397, 399, 401, 403, 405, 407, 409, 411,
          413, 415, 417, 419, 421, 423, 425, 427,
          429, 431, 433, 435, 437, 439, 441, 443,
          445, 447, 449, 451, 453, 455, 457, 459,
          461, 463, 465, 467, 469, 471, 473, 475,
          477, 479, 481, 483, 485, 487, 489, 491,
          493, 495, 497, 499, 502, 504, 506, 508,
          510, 512, 514, 516, 518, 520, 522, 524,
          526, 528, 530, 532, 534, 536, 538, 540,
          542, 544, 546, 548, 550, 552, 554, 556,
          558, 560, 562, 564, 566, 568, 570, 572,
          574, 576, 578, 580, 582, 584, 586, 588,
          589, 590, 592, 593, 594, 595, 596, 597,
          598, 599, 600, 601, 602, 603, 604, 605,
          606, 607, 608, 609, 610, 611, 612, 613,
          614, 615, 616, 617, 618, 619, 620, 621,
          622, 623, 624, 625, 626, 627, 628, 629,
          630, 631, 632, 633, 634, 635, 636, 637,
          638, 639, 640, 649, 651, 658, 660, 662,
          664, 666, 668, 670, 672, 674, 676, 678,
          680, 682, 684, 686, 688, 690, 692, 694,
          696, 698, 700, 702, 704, 706, 708, 710,
          712, 714, 716, 718, 720, 722, 724, 726,
          728, 730, 732, 735, 737, 739, 741, 743,
          745, 747, 749, 751, 753, 755, 757, 759,
          761, 763, 765, 767, 769, 771, 773, 775,
          777, 779, 781, 783, 785, 787, 789, 791,
          793, 795, 797, 799, 801, 803, 805, 807,
          809, 811, 813, 815, 817, 819, 821, 823,
          825, 827, 829, 831, 833, 835, 837, 839,
          841, 843, 845, 847, 849, 851, 853, 855,
          857, 859, 861, 863, 865, 867, 869, 871,
          873, 875, 877, 879, 881, 883, 885, 887,
          889, 891, 893, 895, 897, 899, 901, 903,
          905, 907, 908, 909, 910, 911, 912, 913,
          914, 915, 916, 917, 918, 919, 920, 921,
          922, 923, 924, 925, 926, 927, 928, 929,
          930, 931, 932, 933, 934, 935, 937, 938,
          939, 940, 941, 942, 943, 944, 945, 946,
          947, 948, 949, 950, 951, 952, 953, 954,
          955, 956, 957, 958, 959, 968, 970, 978,
          980, 982, 984, 986, 988, 990, 992, 994,
          996, 998, 1000, 1002, 1004, 1006, 1008, 1010,
          1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026,
          1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042,
          1044, 1046, 1048, 1050, 1052, 1055, 1057, 1059,
          1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075,
          1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091,
          1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107,
          1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123,
          1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139,
          1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155,
          1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171,
          1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187,
          1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203,
          1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219,
          1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235,
          1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251,
          1253, 1255, 1257, 1258, 1259, 1260, 1261, 1262,
          1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
          1271, 1272, 1273, 1281, 1283, 1288, 1290, 1292,
          1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308,
          1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324,
          1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340,
          1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356,
          1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372,
          1374, 1376, 1378, 1380, 1382, 1384, 1386, 1388,
          1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404,
          1406, 1408, 1410, 1412, 1414, 1416, 1418, 1420,
          1422, 1424, 1427, 1429, 1431, 1433, 1435, 1437,
          1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453,
          1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469,
          1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485,
          1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501,
          1503, 1505, 1507, 1509, 1511, 1513, 1514, 1515
        ]

        class << self
          attr_accessor :_lexer_trans_keys
          private :_lexer_trans_keys, :_lexer_trans_keys=
        end
        self._lexer_trans_keys = [
          -32, -17, 10, 32, 34, 35, 37, 42,
          64, 124, 9, 13, -78, -122, -119, -107,
          -88, -82, -75, -72, -71, -32, -78, -90,
          -32, -78, -80, -32, -77, -122, 32, 10,
          13, 10, 13, -32, 10, 32, 34, 35,
          37, 42, 64, 124, 9, 13, 34, 34,
          10, 13, 10, 13, 10, 32, 34, 9,
          13, 10, 32, 34, 9, 13, 10, 32,
          34, 9, 13, 10, 32, 34, 9, 13,
          10, 32, 9, 13, 10, 32, 9, 13,
          10, 13, 10, 95, 70, 69, 65, 84,
          85, 82, 69, 95, 69, 78, 68, 95,
          37, 13, 32, 64, 9, 10, 9, 10,
          13, 32, 64, 11, 12, 10, 32, 64,
          9, 13, 32, 124, 9, 13, 10, 32,
          92, 124, 9, 13, 10, 92, 124, 10,
          92, 10, 32, 92, 124, 9, 13, -32,
          10, 32, 34, 35, 37, 42, 64, 124,
          9, 13, -32, -78, -90, -32, -78, -66,
          -32, -78, -71, -32, -78, -80, -32, -78,
          -93, -32, -77, -122, -32, -78, -105, -32,
          -78, -77, -32, -77, -127, 58, 10, 10,
          -32, 10, 32, 35, 124, 9, 13, -78,
          10, -71, 10, -32, 10, -77, 10, -122,
          10, -32, 10, -78, 10, -102, 10, -32,
          10, -77, 10, -115, 10, -32, 10, -78,
          10, -102, 10, -32, 10, -78, 10, -77,
          10, 10, 58, -32, 10, 32, 34, 35,
          37, 42, 64, 124, 9, 13, -32, -78,
          -91, -32, -78, -66, -32, -78, -72, -32,
          -78, -66, -32, -78, -80, -32, -78, -66,
          -32, -78, -126, -32, -78, -74, 58, 10,
          10, -32, 10, 32, 35, 37, 42, 64,
          9, 13, -78, 10, -122, -107, -88, -82,
          -75, -72, -71, 10, -32, 10, -78, 10,
          -90, 10, -32, 10, -78, 10, -80, 10,
          -32, 10, -77, 10, -122, 10, 10, 32,
          -32, 10, -78, 10, -91, 10, -32, 10,
          -78, 10, -66, 10, -32, 10, -78, 10,
          -72, 10, -32, 10, -78, 10, -66, 10,
          -32, 10, -78, 10, -80, 10, -32, 10,
          -78, 10, -66, 10, -32, 10, -78, 10,
          -126, 10, -32, 10, -78, 10, -74, 10,
          10, 58, -32, 10, -78, 10, -126, -65,
          10, -32, 10, -78, 10, -92, 10, -32,
          10, -78, 10, -80, 10, -32, 10, -77,
          10, -107, 10, -32, 10, -78, 10, -95,
          10, -32, 10, -78, 10, -65, 10, -32,
          10, -78, 10, -90, 10, -32, 10, -78,
          10, -92, 10, -32, 10, -77, 10, -115,
          10, -32, 10, -78, 10, -92, 10, -32,
          10, -77, 10, -127, 10, -32, 10, -78,
          10, -65, 10, -32, 10, -78, 10, -75,
          10, -32, 10, -78, 10, -80, 10, -32,
          10, -78, 10, -93, 10, -32, 10, -77,
          10, -122, 10, -32, 10, -77, 10, -115,
          10, -32, 10, -78, 10, -91, 10, -32,
          10, -78, 10, -65, 10, -32, 10, -78,
          10, -92, 10, -32, 10, -78, 10, -65,
          10, -32, 10, -78, 10, -81, 10, -32,
          10, -78, 10, -88, 10, -32, 10, -77,
          10, -115, 10, -32, 10, -78, 10, -88,
          10, -32, 10, -78, -77, 10, -65, 10,
          -32, 10, -78, 10, -88, 10, -32, 10,
          -77, 10, -115, 10, -32, 10, -78, 10,
          -88, 10, -32, 10, -77, 10, -122, 10,
          -32, 10, -78, 10, -78, 10, -122, 10,
          -32, 10, -78, 10, -102, 10, -32, 10,
          -77, 10, -115, 10, -32, 10, -78, 10,
          -102, 10, -32, 10, -78, 10, -77, 10,
          10, 95, 10, 70, 10, 69, 10, 65,
          10, 84, 10, 85, 10, 82, 10, 69,
          10, 95, 10, 69, 10, 78, 10, 68,
          10, 95, 10, 37, -32, -78, -126, -65,
          -32, -78, -92, -32, -78, -80, -32, -77,
          -107, -32, -78, -95, -32, -78, -65, -32,
          -78, -90, -32, -78, -92, -32, -77, -115,
          -32, -78, -92, -32, -77, -127, -32, -78,
          -65, -32, -78, -75, -32, -78, -80, -32,
          -78, -93, -32, -77, -122, 58, 10, 10,
          -32, 10, 32, 35, 37, 42, 64, 9,
          13, -78, 10, -122, -107, -88, -82, -72,
          -71, 10, -32, 10, -78, 10, -90, 10,
          -32, 10, -78, 10, -80, 10, -32, 10,
          -77, 10, -122, 10, 10, 32, -32, 10,
          -78, 10, -91, 10, -32, 10, -78, 10,
          -66, 10, -32, 10, -78, 10, -72, 10,
          -32, 10, -78, 10, -66, 10, -32, 10,
          -78, 10, -80, 10, -32, 10, -78, 10,
          -66, 10, -32, 10, -78, 10, -126, 10,
          -32, 10, -78, 10, -74, 10, 10, 58,
          -32, 10, -78, 10, -126, -65, 10, -32,
          10, -78, 10, -92, 10, -32, 10, -78,
          10, -80, 10, -32, 10, -77, 10, -107,
          10, -32, 10, -78, 10, -95, 10, -32,
          10, -78, 10, -65, 10, -32, 10, -78,
          10, -90, 10, -32, 10, -78, 10, -92,
          10, -32, 10, -77, 10, -115, 10, -32,
          10, -78, 10, -92, 10, -32, 10, -77,
          10, -127, 10, -32, 10, -77, 10, -115,
          10, -32, 10, -78, 10, -91, 10, -32,
          10, -78, 10, -65, 10, -32, 10, -78,
          10, -92, 10, -32, 10, -78, 10, -65,
          10, -32, 10, -78, 10, -81, 10, -32,
          10, -78, 10, -88, 10, -32, 10, -77,
          10, -115, 10, -32, 10, -78, 10, -88,
          10, -32, 10, -77, 10, -122, 10, -32,
          10, -78, 10, -102, 10, -32, 10, -77,
          10, -115, 10, -32, 10, -78, 10, -102,
          10, -32, 10, -78, 10, -77, 10, 10,
          95, 10, 70, 10, 69, 10, 65, 10,
          84, 10, 85, 10, 82, 10, 69, 10,
          95, 10, 69, 10, 78, 10, 68, 10,
          95, 10, 37, -32, -77, -115, -32, -78,
          -91, -32, -78, -65, -32, -78, -92, -32,
          -78, -65, -32, -78, -81, -32, -78, -88,
          -32, -77, -115, -32, -78, -88, -32, -78,
          -77, -65, -32, -78, -88, -32, -77, -115,
          -32, -78, -88, -32, -77, -122, -32, -78,
          -78, -32, -77, -122, 58, 10, 10, -32,
          10, 32, 35, 37, 42, 64, 9, 13,
          -78, 10, -122, -107, -88, -82, -75, -72,
          -71, 10, -32, 10, -78, 10, -90, 10,
          -32, 10, -78, 10, -80, 10, -32, 10,
          -77, 10, -122, 10, 10, 32, -32, 10,
          -78, 10, -91, 10, -32, 10, -78, 10,
          -66, 10, -32, 10, -78, 10, -72, 10,
          -32, 10, -78, 10, -66, 10, -32, 10,
          -78, 10, -80, 10, -32, 10, -78, 10,
          -66, 10, -32, 10, -78, 10, -126, 10,
          -32, 10, -78, 10, -74, 10, 10, 58,
          -32, 10, -78, 10, -126, -65, 10, -32,
          10, -78, 10, -92, 10, -32, 10, -78,
          10, -80, 10, -32, 10, -77, 10, -107,
          10, -32, 10, -78, 10, -95, 10, -32,
          10, -78, 10, -65, 10, -32, 10, -78,
          10, -90, 10, -32, 10, -78, 10, -92,
          10, -32, 10, -77, 10, -115, 10, -32,
          10, -78, 10, -92, 10, -32, 10, -77,
          10, -127, 10, -32, 10, -78, 10, -65,
          10, -32, 10, -78, 10, -75, 10, -32,
          10, -78, 10, -80, 10, -32, 10, -78,
          10, -93, 10, -32, 10, -77, 10, -122,
          10, -32, 10, -77, 10, -115, 10, -32,
          10, -78, 10, -91, 10, -32, 10, -78,
          10, -65, 10, -32, 10, -78, 10, -92,
          10, -32, 10, -78, 10, -65, 10, -32,
          10, -78, 10, -81, 10, -32, 10, -78,
          10, -88, 10, -32, 10, -77, 10, -115,
          10, -32, 10, -78, 10, -88, 10, -32,
          10, -77, 10, -122, 10, -32, 10, -78,
          10, -102, 10, -32, 10, -77, 10, -115,
          10, -32, 10, -78, 10, -102, 10, -32,
          10, -78, 10, -77, 10, 10, 95, 10,
          70, 10, 69, 10, 65, 10, 84, 10,
          85, 10, 82, 10, 69, 10, 95, 10,
          69, 10, 78, 10, 68, 10, 95, 10,
          37, -122, -32, -78, -102, -32, -77, -115,
          -32, -78, -102, -32, -78, -77, 58, 10,
          10, -32, 10, 32, 35, 37, 64, 9,
          13, -78, 10, -119, -107, -75, -71, 10,
          -32, 10, -78, 10, -90, 10, -32, 10,
          -78, 10, -66, 10, -32, 10, -78, 10,
          -71, 10, -32, 10, -78, 10, -80, 10,
          -32, 10, -78, 10, -93, 10, -32, 10,
          -77, 10, -122, 10, -32, 10, -78, 10,
          -105, 10, -32, 10, -78, 10, -77, 10,
          -32, 10, -77, 10, -127, 10, 10, 58,
          -32, 10, -78, 10, -91, 10, -32, 10,
          -78, 10, -66, 10, -32, 10, -78, 10,
          -72, 10, -32, 10, -78, 10, -66, 10,
          -32, 10, -78, 10, -80, 10, -32, 10,
          -78, 10, -66, 10, -32, 10, -78, 10,
          -126, 10, -32, 10, -78, 10, -74, 10,
          -32, 10, -78, 10, -65, 10, -32, 10,
          -78, 10, -75, 10, -32, 10, -78, 10,
          -80, 10, -32, 10, -78, 10, -93, 10,
          -32, 10, -77, 10, -122, 10, -32, 10,
          -78, -77, 10, -65, 10, -32, 10, -78,
          10, -88, 10, -32, 10, -77, 10, -115,
          10, -32, 10, -78, 10, -88, 10, -32,
          10, -77, 10, -122, 10, -32, 10, -78,
          10, -78, 10, -122, 10, -32, 10, -78,
          10, -102, 10, -32, 10, -77, 10, -115,
          10, -32, 10, -78, 10, -102, 10, -32,
          10, -78, 10, -77, 10, 10, 95, 10,
          70, 10, 69, 10, 65, 10, 84, 10,
          85, 10, 82, 10, 69, 10, 95, 10,
          69, 10, 78, 10, 68, 10, 95, 10,
          37, -69, -65, 0
        ]

        class << self
          attr_accessor :_lexer_single_lengths
          private :_lexer_single_lengths, :_lexer_single_lengths=
        end
        self._lexer_single_lengths = [
          0, 10, 1, 8, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 2, 2,
          9, 1, 1, 2, 2, 3, 3, 3,
          3, 2, 2, 2, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 3, 5, 3, 2, 4,
          3, 2, 4, 9, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 5, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 9, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 7, 2, 8, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 1,
          1, 2, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 7, 2, 7, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 2, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 7, 2, 8, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 6, 2, 5, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 1, 1, 0
        ]

        class << self
          attr_accessor :_lexer_range_lengths
          private :_lexer_range_lengths, :_lexer_range_lengths=
        end
        self._lexer_range_lengths = [
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 0, 1, 1, 1,
          1, 1, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 1, 1, 1, 1,
          0, 0, 1, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 1, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0
        ]

        class << self
          attr_accessor :_lexer_index_offsets
          private :_lexer_index_offsets, :_lexer_index_offsets=
        end
        self._lexer_index_offsets = [
          0, 0, 12, 14, 23, 25, 27, 29,
          31, 33, 35, 37, 39, 41, 43, 46,
          49, 60, 62, 64, 67, 70, 75, 80,
          85, 90, 94, 98, 101, 103, 105, 107,
          109, 111, 113, 115, 117, 119, 121, 123,
          125, 127, 129, 131, 136, 143, 148, 152,
          158, 162, 165, 171, 182, 184, 186, 188,
          190, 192, 194, 196, 198, 200, 202, 204,
          206, 208, 210, 212, 214, 216, 218, 220,
          222, 224, 226, 228, 230, 232, 234, 236,
          238, 240, 242, 249, 252, 255, 258, 261,
          264, 267, 270, 273, 276, 279, 282, 285,
          288, 291, 294, 297, 300, 303, 314, 316,
          318, 320, 322, 324, 326, 328, 330, 332,
          334, 336, 338, 340, 342, 344, 346, 348,
          350, 352, 354, 356, 358, 360, 362, 364,
          366, 368, 377, 380, 389, 392, 395, 398,
          401, 404, 407, 410, 413, 416, 419, 422,
          425, 428, 431, 434, 437, 440, 443, 446,
          449, 452, 455, 458, 461, 464, 467, 470,
          473, 476, 479, 482, 485, 488, 491, 494,
          497, 500, 504, 507, 510, 513, 516, 519,
          522, 525, 528, 531, 534, 537, 540, 543,
          546, 549, 552, 555, 558, 561, 564, 567,
          570, 573, 576, 579, 582, 585, 588, 591,
          594, 597, 600, 603, 606, 609, 612, 615,
          618, 621, 624, 627, 630, 633, 636, 639,
          642, 645, 648, 651, 654, 657, 660, 663,
          666, 669, 672, 675, 678, 681, 684, 687,
          690, 693, 696, 699, 702, 705, 708, 711,
          714, 717, 720, 723, 727, 730, 733, 736,
          739, 742, 745, 748, 751, 754, 757, 760,
          763, 766, 769, 772, 775, 778, 781, 784,
          787, 790, 793, 796, 799, 802, 805, 808,
          811, 814, 817, 820, 823, 826, 829, 832,
          835, 838, 841, 844, 847, 850, 853, 856,
          858, 860, 863, 865, 867, 869, 871, 873,
          875, 877, 879, 881, 883, 885, 887, 889,
          891, 893, 895, 897, 899, 901, 903, 905,
          907, 909, 911, 913, 915, 917, 919, 921,
          923, 925, 927, 929, 931, 933, 935, 937,
          939, 941, 943, 945, 947, 949, 951, 953,
          955, 957, 959, 968, 971, 979, 982, 985,
          988, 991, 994, 997, 1000, 1003, 1006, 1009,
          1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033,
          1036, 1039, 1042, 1045, 1048, 1051, 1054, 1057,
          1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081,
          1084, 1087, 1090, 1094, 1097, 1100, 1103, 1106,
          1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130,
          1133, 1136, 1139, 1142, 1145, 1148, 1151, 1154,
          1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178,
          1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202,
          1205, 1208, 1211, 1214, 1217, 1220, 1223, 1226,
          1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250,
          1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274,
          1277, 1280, 1283, 1286, 1289, 1292, 1295, 1298,
          1301, 1304, 1307, 1310, 1313, 1316, 1319, 1322,
          1325, 1328, 1331, 1334, 1337, 1340, 1343, 1346,
          1349, 1352, 1354, 1356, 1358, 1360, 1362, 1364,
          1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380,
          1382, 1384, 1386, 1388, 1390, 1392, 1394, 1396,
          1398, 1400, 1402, 1404, 1406, 1408, 1411, 1413,
          1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429,
          1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445,
          1447, 1449, 1451, 1453, 1455, 1464, 1467, 1476,
          1479, 1482, 1485, 1488, 1491, 1494, 1497, 1500,
          1503, 1506, 1509, 1512, 1515, 1518, 1521, 1524,
          1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548,
          1551, 1554, 1557, 1560, 1563, 1566, 1569, 1572,
          1575, 1578, 1581, 1584, 1587, 1591, 1594, 1597,
          1600, 1603, 1606, 1609, 1612, 1615, 1618, 1621,
          1624, 1627, 1630, 1633, 1636, 1639, 1642, 1645,
          1648, 1651, 1654, 1657, 1660, 1663, 1666, 1669,
          1672, 1675, 1678, 1681, 1684, 1687, 1690, 1693,
          1696, 1699, 1702, 1705, 1708, 1711, 1714, 1717,
          1720, 1723, 1726, 1729, 1732, 1735, 1738, 1741,
          1744, 1747, 1750, 1753, 1756, 1759, 1762, 1765,
          1768, 1771, 1774, 1777, 1780, 1783, 1786, 1789,
          1792, 1795, 1798, 1801, 1804, 1807, 1810, 1813,
          1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837,
          1840, 1843, 1846, 1849, 1852, 1855, 1858, 1861,
          1864, 1867, 1870, 1873, 1876, 1879, 1882, 1885,
          1888, 1891, 1894, 1896, 1898, 1900, 1902, 1904,
          1906, 1908, 1910, 1912, 1914, 1916, 1918, 1920,
          1922, 1924, 1926, 1934, 1937, 1943, 1946, 1949,
          1952, 1955, 1958, 1961, 1964, 1967, 1970, 1973,
          1976, 1979, 1982, 1985, 1988, 1991, 1994, 1997,
          2000, 2003, 2006, 2009, 2012, 2015, 2018, 2021,
          2024, 2027, 2030, 2033, 2036, 2039, 2042, 2045,
          2048, 2051, 2054, 2057, 2060, 2063, 2066, 2069,
          2072, 2075, 2078, 2081, 2084, 2087, 2090, 2093,
          2096, 2099, 2102, 2105, 2108, 2111, 2114, 2117,
          2120, 2123, 2126, 2129, 2132, 2135, 2138, 2141,
          2144, 2147, 2151, 2154, 2157, 2160, 2163, 2166,
          2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190,
          2193, 2196, 2199, 2202, 2205, 2208, 2211, 2214,
          2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238,
          2241, 2244, 2247, 2250, 2253, 2256, 2259, 2262,
          2265, 2268, 2271, 2274, 2277, 2280, 2282, 2284
        ]

        class << self
          attr_accessor :_lexer_indicies
          private :_lexer_indicies, :_lexer_indicies=
        end
        self._lexer_indicies = [
          1, 2, 4, 3, 5, 6, 7, 8,
          9, 10, 3, 0, 11, 0, 12, 13,
          14, 15, 16, 17, 18, 19, 0, 20,
          0, 21, 0, 22, 0, 23, 0, 24,
          0, 25, 0, 26, 0, 27, 0, 28,
          0, 29, 0, 31, 32, 30, 34, 35,
          33, 1, 4, 3, 5, 6, 7, 8,
          9, 10, 3, 0, 36, 0, 37, 0,
          39, 40, 38, 42, 43, 41, 46, 45,
          47, 45, 44, 50, 49, 51, 49, 48,
          50, 49, 52, 49, 48, 50, 49, 53,
          49, 48, 55, 54, 54, 0, 4, 56,
          56, 0, 58, 59, 57, 4, 0, 60,
          0, 61, 0, 62, 0, 63, 0, 64,
          0, 65, 0, 66, 0, 67, 0, 68,
          0, 69, 0, 70, 0, 71, 0, 72,
          0, 73, 0, 0, 0, 0, 0, 74,
          75, 76, 75, 75, 78, 77, 74, 4,
          79, 9, 79, 0, 80, 81, 80, 0,
          84, 83, 85, 86, 83, 82, 0, 88,
          89, 87, 0, 88, 87, 84, 90, 88,
          89, 90, 87, 91, 84, 92, 93, 94,
          95, 96, 97, 98, 92, 0, 99, 0,
          100, 0, 101, 0, 102, 0, 103, 0,
          104, 0, 105, 0, 106, 0, 107, 0,
          108, 0, 109, 0, 110, 0, 111, 0,
          112, 0, 113, 0, 114, 0, 115, 0,
          116, 0, 117, 0, 118, 0, 119, 0,
          120, 0, 121, 0, 122, 0, 123, 0,
          124, 0, 125, 0, 126, 0, 128, 127,
          130, 129, 131, 130, 132, 133, 133, 132,
          129, 134, 130, 129, 135, 130, 129, 136,
          130, 129, 137, 130, 129, 138, 130, 129,
          139, 130, 129, 140, 130, 129, 141, 130,
          129, 142, 130, 129, 143, 130, 129, 144,
          130, 129, 145, 130, 129, 146, 130, 129,
          147, 130, 129, 148, 130, 129, 149, 130,
          129, 150, 130, 129, 130, 151, 129, 152,
          154, 153, 155, 156, 157, 158, 159, 160,
          153, 0, 161, 0, 162, 0, 163, 0,
          164, 0, 165, 0, 166, 0, 167, 0,
          168, 0, 169, 0, 170, 0, 171, 0,
          172, 0, 173, 0, 174, 0, 175, 0,
          176, 0, 177, 0, 178, 0, 179, 0,
          180, 0, 181, 0, 182, 0, 183, 0,
          184, 0, 185, 0, 187, 186, 189, 188,
          190, 189, 191, 192, 193, 194, 192, 191,
          188, 195, 189, 188, 196, 197, 198, 199,
          200, 201, 202, 189, 188, 203, 189, 188,
          204, 189, 188, 205, 189, 188, 206, 189,
          188, 207, 189, 188, 208, 189, 188, 209,
          189, 188, 210, 189, 188, 211, 189, 188,
          189, 212, 188, 213, 189, 188, 214, 189,
          188, 215, 189, 188, 216, 189, 188, 217,
          189, 188, 218, 189, 188, 219, 189, 188,
          220, 189, 188, 221, 189, 188, 222, 189,
          188, 223, 189, 188, 224, 189, 188, 225,
          189, 188, 226, 189, 188, 227, 189, 188,
          228, 189, 188, 229, 189, 188, 230, 189,
          188, 231, 189, 188, 232, 189, 188, 233,
          189, 188, 234, 189, 188, 235, 189, 188,
          236, 189, 188, 189, 212, 188, 237, 189,
          188, 238, 189, 188, 239, 240, 189, 188,
          241, 189, 188, 242, 189, 188, 243, 189,
          188, 244, 189, 188, 245, 189, 188, 211,
          189, 188, 246, 189, 188, 247, 189, 188,
          248, 189, 188, 249, 189, 188, 250, 189,
          188, 251, 189, 188, 252, 189, 188, 253,
          189, 188, 254, 189, 188, 255, 189, 188,
          256, 189, 188, 211, 189, 188, 257, 189,
          188, 258, 189, 188, 259, 189, 188, 260,
          189, 188, 261, 189, 188, 262, 189, 188,
          263, 189, 188, 264, 189, 188, 265, 189,
          188, 266, 189, 188, 267, 189, 188, 211,
          189, 188, 268, 189, 188, 269, 189, 188,
          270, 189, 188, 271, 189, 188, 272, 189,
          188, 273, 189, 188, 274, 189, 188, 275,
          189, 188, 276, 189, 188, 277, 189, 188,
          278, 189, 188, 279, 189, 188, 280, 189,
          188, 281, 189, 188, 236, 189, 188, 282,
          189, 188, 283, 189, 188, 284, 189, 188,
          285, 189, 188, 286, 189, 188, 287, 189,
          188, 288, 189, 188, 289, 189, 188, 290,
          189, 188, 291, 189, 188, 292, 189, 188,
          293, 189, 188, 294, 189, 188, 295, 189,
          188, 296, 189, 188, 297, 189, 188, 298,
          189, 188, 299, 189, 188, 300, 189, 188,
          301, 189, 188, 302, 189, 188, 303, 189,
          188, 304, 189, 188, 305, 189, 188, 306,
          189, 188, 307, 189, 188, 265, 189, 188,
          308, 189, 188, 309, 310, 189, 188, 311,
          189, 188, 312, 189, 188, 313, 189, 188,
          314, 189, 188, 315, 189, 188, 316, 189,
          188, 317, 189, 188, 318, 189, 188, 319,
          189, 188, 320, 189, 188, 321, 189, 188,
          322, 189, 188, 323, 189, 188, 324, 189,
          188, 325, 189, 188, 279, 189, 188, 326,
          189, 188, 327, 189, 188, 328, 189, 188,
          329, 189, 188, 330, 189, 188, 331, 189,
          188, 332, 189, 188, 333, 189, 188, 334,
          189, 188, 335, 189, 188, 336, 189, 188,
          337, 189, 188, 236, 189, 188, 189, 338,
          188, 189, 339, 188, 189, 340, 188, 189,
          341, 188, 189, 342, 188, 189, 343, 188,
          189, 344, 188, 189, 345, 188, 189, 346,
          188, 189, 347, 188, 189, 348, 188, 189,
          349, 188, 189, 350, 188, 189, 351, 188,
          352, 0, 353, 0, 354, 355, 0, 356,
          0, 357, 0, 358, 0, 359, 0, 360,
          0, 28, 0, 361, 0, 362, 0, 363,
          0, 364, 0, 365, 0, 366, 0, 367,
          0, 368, 0, 369, 0, 370, 0, 371,
          0, 28, 0, 372, 0, 373, 0, 374,
          0, 375, 0, 376, 0, 377, 0, 378,
          0, 379, 0, 380, 0, 381, 0, 382,
          0, 28, 0, 383, 0, 384, 0, 385,
          0, 386, 0, 387, 0, 388, 0, 389,
          0, 390, 0, 391, 0, 392, 0, 393,
          0, 394, 0, 395, 0, 396, 0, 397,
          0, 398, 0, 400, 399, 402, 401, 403,
          402, 404, 405, 406, 407, 405, 404, 401,
          408, 402, 401, 409, 410, 411, 412, 413,
          414, 402, 401, 415, 402, 401, 416, 402,
          401, 417, 402, 401, 418, 402, 401, 419,
          402, 401, 420, 402, 401, 421, 402, 401,
          422, 402, 401, 423, 402, 401, 402, 424,
          401, 425, 402, 401, 426, 402, 401, 427,
          402, 401, 428, 402, 401, 429, 402, 401,
          430, 402, 401, 431, 402, 401, 432, 402,
          401, 433, 402, 401, 434, 402, 401, 435,
          402, 401, 436, 402, 401, 437, 402, 401,
          438, 402, 401, 439, 402, 401, 440, 402,
          401, 441, 402, 401, 442, 402, 401, 443,
          402, 401, 444, 402, 401, 445, 402, 401,
          446, 402, 401, 447, 402, 401, 448, 402,
          401, 402, 424, 401, 449, 402, 401, 450,
          402, 401, 451, 452, 402, 401, 453, 402,
          401, 454, 402, 401, 455, 402, 401, 456,
          402, 401, 457, 402, 401, 423, 402, 401,
          458, 402, 401, 459, 402, 401, 460, 402,
          401, 461, 402, 401, 462, 402, 401, 463,
          402, 401, 464, 402, 401, 465, 402, 401,
          466, 402, 401, 467, 402, 401, 468, 402,
          401, 423, 402, 401, 469, 402, 401, 470,
          402, 401, 471, 402, 401, 472, 402, 401,
          473, 402, 401, 474, 402, 401, 475, 402,
          401, 476, 402, 401, 477, 402, 401, 478,
          402, 401, 479, 402, 401, 423, 402, 401,
          480, 402, 401, 481, 402, 401, 482, 402,
          401, 483, 402, 401, 484, 402, 401, 485,
          402, 401, 486, 402, 401, 487, 402, 401,
          488, 402, 401, 489, 402, 401, 490, 402,
          401, 491, 402, 401, 492, 402, 401, 493,
          402, 401, 494, 402, 401, 495, 402, 401,
          496, 402, 401, 497, 402, 401, 498, 402,
          401, 499, 402, 401, 500, 402, 401, 501,
          402, 401, 502, 402, 401, 503, 402, 401,
          504, 402, 401, 505, 402, 401, 477, 402,
          401, 506, 402, 401, 507, 402, 401, 508,
          402, 401, 509, 402, 401, 510, 402, 401,
          511, 402, 401, 512, 402, 401, 513, 402,
          401, 514, 402, 401, 515, 402, 401, 516,
          402, 401, 517, 402, 401, 518, 402, 401,
          519, 402, 401, 448, 402, 401, 402, 520,
          401, 402, 521, 401, 402, 522, 401, 402,
          523, 401, 402, 524, 401, 402, 525, 401,
          402, 526, 401, 402, 527, 401, 402, 528,
          401, 402, 529, 401, 402, 530, 401, 402,
          531, 401, 402, 532, 401, 402, 533, 401,
          534, 0, 535, 0, 536, 0, 537, 0,
          538, 0, 539, 0, 540, 0, 541, 0,
          542, 0, 543, 0, 544, 0, 545, 0,
          546, 0, 547, 0, 548, 0, 549, 0,
          550, 0, 551, 0, 552, 0, 553, 0,
          554, 0, 555, 0, 556, 0, 557, 0,
          558, 0, 559, 0, 380, 0, 560, 0,
          561, 562, 0, 563, 0, 564, 0, 565,
          0, 566, 0, 567, 0, 568, 0, 569,
          0, 570, 0, 571, 0, 572, 0, 573,
          0, 574, 0, 575, 0, 576, 0, 577,
          0, 578, 0, 579, 0, 580, 0, 581,
          0, 582, 0, 584, 583, 586, 585, 587,
          586, 588, 589, 590, 591, 589, 588, 585,
          592, 586, 585, 593, 594, 595, 596, 597,
          598, 599, 586, 585, 600, 586, 585, 601,
          586, 585, 602, 586, 585, 603, 586, 585,
          604, 586, 585, 605, 586, 585, 606, 586,
          585, 607, 586, 585, 608, 586, 585, 586,
          609, 585, 610, 586, 585, 611, 586, 585,
          612, 586, 585, 613, 586, 585, 614, 586,
          585, 615, 586, 585, 616, 586, 585, 617,
          586, 585, 618, 586, 585, 619, 586, 585,
          620, 586, 585, 621, 586, 585, 622, 586,
          585, 623, 586, 585, 624, 586, 585, 625,
          586, 585, 626, 586, 585, 627, 586, 585,
          628, 586, 585, 629, 586, 585, 630, 586,
          585, 631, 586, 585, 632, 586, 585, 633,
          586, 585, 586, 609, 585, 634, 586, 585,
          635, 586, 585, 636, 637, 586, 585, 638,
          586, 585, 639, 586, 585, 640, 586, 585,
          641, 586, 585, 642, 586, 585, 608, 586,
          585, 643, 586, 585, 644, 586, 585, 645,
          586, 585, 646, 586, 585, 647, 586, 585,
          648, 586, 585, 649, 586, 585, 650, 586,
          585, 651, 586, 585, 652, 586, 585, 653,
          586, 585, 608, 586, 585, 654, 586, 585,
          655, 586, 585, 656, 586, 585, 657, 586,
          585, 658, 586, 585, 659, 586, 585, 660,
          586, 585, 661, 586, 585, 662, 586, 585,
          663, 586, 585, 664, 586, 585, 608, 586,
          585, 665, 586, 585, 666, 586, 585, 667,
          586, 585, 668, 586, 585, 669, 586, 585,
          670, 586, 585, 671, 586, 585, 672, 586,
          585, 673, 586, 585, 674, 586, 585, 675,
          586, 585, 676, 586, 585, 677, 586, 585,
          678, 586, 585, 633, 586, 585, 679, 586,
          585, 680, 586, 585, 681, 586, 585, 682,
          586, 585, 683, 586, 585, 684, 586, 585,
          685, 586, 585, 686, 586, 585, 687, 586,
          585, 688, 586, 585, 689, 586, 585, 690,
          586, 585, 691, 586, 585, 692, 586, 585,
          693, 586, 585, 694, 586, 585, 695, 586,
          585, 696, 586, 585, 697, 586, 585, 698,
          586, 585, 699, 586, 585, 700, 586, 585,
          701, 586, 585, 702, 586, 585, 703, 586,
          585, 704, 586, 585, 662, 586, 585, 705,
          586, 585, 706, 586, 585, 707, 586, 585,
          708, 586, 585, 709, 586, 585, 710, 586,
          585, 711, 586, 585, 712, 586, 585, 713,
          586, 585, 714, 586, 585, 715, 586, 585,
          716, 586, 585, 717, 586, 585, 718, 586,
          585, 633, 586, 585, 586, 719, 585, 586,
          720, 585, 586, 721, 585, 586, 722, 585,
          586, 723, 585, 586, 724, 585, 586, 725,
          585, 586, 726, 585, 586, 727, 585, 586,
          728, 585, 586, 729, 585, 586, 730, 585,
          586, 731, 585, 586, 732, 585, 733, 0,
          734, 0, 735, 0, 736, 0, 737, 0,
          738, 0, 739, 0, 740, 0, 741, 0,
          742, 0, 743, 0, 744, 0, 745, 0,
          746, 0, 748, 747, 750, 749, 751, 750,
          752, 753, 754, 753, 752, 749, 755, 750,
          749, 756, 757, 758, 759, 750, 749, 760,
          750, 749, 761, 750, 749, 762, 750, 749,
          763, 750, 749, 764, 750, 749, 765, 750,
          749, 766, 750, 749, 767, 750, 749, 768,
          750, 749, 769, 750, 749, 770, 750, 749,
          771, 750, 749, 772, 750, 749, 773, 750,
          749, 774, 750, 749, 775, 750, 749, 776,
          750, 749, 777, 750, 749, 778, 750, 749,
          779, 750, 749, 780, 750, 749, 781, 750,
          749, 782, 750, 749, 783, 750, 749, 784,
          750, 749, 785, 750, 749, 786, 750, 749,
          750, 787, 749, 788, 750, 749, 789, 750,
          749, 790, 750, 749, 791, 750, 749, 792,
          750, 749, 793, 750, 749, 794, 750, 749,
          795, 750, 749, 796, 750, 749, 797, 750,
          749, 798, 750, 749, 799, 750, 749, 800,
          750, 749, 801, 750, 749, 802, 750, 749,
          803, 750, 749, 804, 750, 749, 805, 750,
          749, 806, 750, 749, 807, 750, 749, 808,
          750, 749, 809, 750, 749, 810, 750, 749,
          786, 750, 749, 811, 750, 749, 812, 750,
          749, 813, 750, 749, 814, 750, 749, 815,
          750, 749, 816, 750, 749, 817, 750, 749,
          818, 750, 749, 819, 750, 749, 820, 750,
          749, 821, 750, 749, 822, 750, 749, 823,
          750, 749, 824, 750, 749, 786, 750, 749,
          825, 750, 749, 826, 827, 750, 749, 828,
          750, 749, 829, 750, 749, 830, 750, 749,
          831, 750, 749, 832, 750, 749, 833, 750,
          749, 834, 750, 749, 835, 750, 749, 836,
          750, 749, 837, 750, 749, 838, 750, 749,
          839, 750, 749, 840, 750, 749, 841, 750,
          749, 842, 750, 749, 822, 750, 749, 843,
          750, 749, 844, 750, 749, 845, 750, 749,
          846, 750, 749, 847, 750, 749, 848, 750,
          749, 849, 750, 749, 850, 750, 749, 851,
          750, 749, 852, 750, 749, 853, 750, 749,
          854, 750, 749, 786, 750, 749, 750, 855,
          749, 750, 856, 749, 750, 857, 749, 750,
          858, 749, 750, 859, 749, 750, 860, 749,
          750, 861, 749, 750, 862, 749, 750, 863,
          749, 750, 864, 749, 750, 865, 749, 750,
          866, 749, 750, 867, 749, 750, 868, 749,
          869, 0, 3, 0, 870, 0
        ]

        class << self
          attr_accessor :_lexer_trans_targs
          private :_lexer_trans_targs, :_lexer_trans_targs=
        end
        self._lexer_trans_targs = [
          0, 2, 789, 16, 16, 17, 27, 29,
          13, 43, 46, 3, 4, 52, 102, 287,
          308, 320, 465, 492, 5, 6, 7, 8,
          9, 10, 11, 12, 13, 14, 15, 16,
          28, 15, 16, 28, 18, 19, 20, 21,
          20, 20, 21, 20, 22, 22, 22, 23,
          22, 22, 22, 23, 24, 25, 26, 16,
          26, 27, 16, 28, 30, 31, 32, 33,
          34, 35, 36, 37, 38, 39, 40, 41,
          42, 791, 44, 45, 16, 44, 43, 45,
          46, 47, 48, 50, 51, 49, 47, 48,
          49, 47, 50, 2, 51, 17, 27, 29,
          13, 43, 46, 53, 54, 55, 56, 57,
          58, 59, 60, 61, 62, 63, 64, 65,
          66, 67, 68, 69, 70, 71, 72, 73,
          74, 75, 76, 77, 78, 79, 80, 81,
          82, 81, 82, 83, 82, 16, 84, 85,
          86, 87, 88, 89, 90, 91, 92, 93,
          94, 95, 96, 97, 98, 99, 100, 101,
          2, 16, 16, 17, 27, 29, 13, 43,
          46, 103, 104, 105, 106, 107, 108, 109,
          110, 111, 112, 113, 114, 115, 116, 117,
          118, 119, 120, 121, 122, 123, 124, 125,
          126, 127, 128, 129, 128, 129, 130, 129,
          16, 273, 141, 131, 132, 142, 167, 188,
          200, 215, 242, 133, 134, 135, 136, 137,
          138, 139, 140, 141, 101, 143, 144, 145,
          146, 147, 148, 149, 150, 151, 152, 153,
          154, 155, 156, 157, 158, 159, 160, 161,
          162, 163, 164, 165, 166, 168, 169, 170,
          176, 171, 172, 173, 174, 175, 177, 178,
          179, 180, 181, 182, 183, 184, 185, 186,
          187, 189, 190, 191, 192, 193, 194, 195,
          196, 197, 198, 199, 201, 202, 203, 204,
          205, 206, 207, 208, 209, 210, 211, 212,
          213, 214, 216, 217, 218, 219, 220, 221,
          222, 223, 224, 225, 226, 227, 228, 229,
          230, 231, 232, 233, 234, 235, 236, 237,
          238, 239, 240, 241, 243, 244, 260, 245,
          246, 247, 248, 249, 250, 251, 252, 253,
          254, 255, 256, 257, 258, 259, 261, 262,
          263, 264, 265, 266, 267, 268, 269, 270,
          271, 272, 274, 275, 276, 277, 278, 279,
          280, 281, 282, 283, 284, 285, 286, 16,
          288, 289, 290, 296, 291, 292, 293, 294,
          295, 297, 298, 299, 300, 301, 302, 303,
          304, 305, 306, 307, 309, 310, 311, 312,
          313, 314, 315, 316, 317, 318, 319, 321,
          322, 323, 324, 325, 326, 327, 328, 329,
          330, 331, 332, 333, 334, 335, 336, 337,
          338, 337, 338, 339, 338, 16, 451, 350,
          340, 341, 351, 376, 397, 409, 436, 342,
          343, 344, 345, 346, 347, 348, 349, 350,
          101, 352, 353, 354, 355, 356, 357, 358,
          359, 360, 361, 362, 363, 364, 365, 366,
          367, 368, 369, 370, 371, 372, 373, 374,
          375, 377, 378, 379, 385, 380, 381, 382,
          383, 384, 386, 387, 388, 389, 390, 391,
          392, 393, 394, 395, 396, 398, 399, 400,
          401, 402, 403, 404, 405, 406, 407, 408,
          410, 411, 412, 413, 414, 415, 416, 417,
          418, 419, 420, 421, 422, 423, 424, 425,
          426, 427, 428, 429, 430, 431, 432, 433,
          434, 435, 437, 438, 439, 440, 441, 442,
          443, 444, 445, 446, 447, 448, 449, 450,
          452, 453, 454, 455, 456, 457, 458, 459,
          460, 461, 462, 463, 464, 16, 466, 467,
          468, 469, 470, 471, 472, 473, 474, 475,
          476, 477, 478, 479, 480, 481, 482, 483,
          484, 485, 486, 487, 488, 489, 490, 491,
          493, 494, 658, 495, 496, 497, 498, 499,
          500, 501, 502, 503, 504, 505, 506, 507,
          508, 509, 510, 511, 512, 513, 514, 515,
          516, 515, 516, 517, 516, 16, 644, 528,
          518, 519, 529, 554, 575, 587, 602, 629,
          520, 521, 522, 523, 524, 525, 526, 527,
          528, 101, 530, 531, 532, 533, 534, 535,
          536, 537, 538, 539, 540, 541, 542, 543,
          544, 545, 546, 547, 548, 549, 550, 551,
          552, 553, 555, 556, 557, 563, 558, 559,
          560, 561, 562, 564, 565, 566, 567, 568,
          569, 570, 571, 572, 573, 574, 576, 577,
          578, 579, 580, 581, 582, 583, 584, 585,
          586, 588, 589, 590, 591, 592, 593, 594,
          595, 596, 597, 598, 599, 600, 601, 603,
          604, 605, 606, 607, 608, 609, 610, 611,
          612, 613, 614, 615, 616, 617, 618, 619,
          620, 621, 622, 623, 624, 625, 626, 627,
          628, 630, 631, 632, 633, 634, 635, 636,
          637, 638, 639, 640, 641, 642, 643, 645,
          646, 647, 648, 649, 650, 651, 652, 653,
          654, 655, 656, 657, 16, 659, 660, 661,
          662, 663, 664, 665, 666, 667, 668, 669,
          670, 671, 672, 673, 674, 673, 674, 675,
          674, 16, 775, 676, 677, 705, 729, 744,
          678, 679, 680, 681, 682, 683, 684, 685,
          686, 687, 688, 689, 690, 691, 692, 693,
          694, 695, 696, 697, 698, 699, 700, 701,
          702, 703, 704, 101, 706, 707, 708, 709,
          710, 711, 712, 713, 714, 715, 716, 717,
          718, 719, 720, 721, 722, 723, 724, 725,
          726, 727, 728, 730, 731, 732, 733, 734,
          735, 736, 737, 738, 739, 740, 741, 742,
          743, 745, 746, 762, 747, 748, 749, 750,
          751, 752, 753, 754, 755, 756, 757, 758,
          759, 760, 761, 763, 764, 765, 766, 767,
          768, 769, 770, 771, 772, 773, 774, 776,
          777, 778, 779, 780, 781, 782, 783, 784,
          785, 786, 787, 788, 16, 790, 0
        ]

        class << self
          attr_accessor :_lexer_trans_actions
          private :_lexer_trans_actions, :_lexer_trans_actions=
        end
        self._lexer_trans_actions = [
          43, 29, 0, 0, 54, 3, 1, 0,
          29, 1, 35, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 57, 149,
          126, 0, 110, 23, 0, 0, 7, 139,
          48, 0, 102, 9, 5, 45, 134, 45,
          0, 33, 122, 33, 33, 0, 11, 106,
          0, 0, 114, 25, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 27, 118, 27, 51, 0,
          0, 0, 37, 37, 54, 37, 87, 0,
          0, 39, 0, 96, 0, 93, 90, 41,
          96, 90, 99, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 84, 0, 81, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 21,
          63, 31, 130, 60, 57, 31, 63, 57,
          66, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 144, 0, 54, 84, 0,
          75, 33, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 17, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 17,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 84, 0, 78, 33, 84,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          19, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 19, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 84, 0, 72, 33, 84,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 15, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 15, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 57, 144, 0, 54, 84,
          0, 69, 33, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 13, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 13, 0, 0
        ]

        class << self
          attr_accessor :_lexer_eof_actions
          private :_lexer_eof_actions, :_lexer_eof_actions=
        end
        self._lexer_eof_actions = [
          0, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43
        ]

        class << self
          attr_accessor :lexer_start
        end
        self.lexer_start = 1;
        class << self
          attr_accessor :lexer_first_final
        end
        self.lexer_first_final = 791;
        class << self
          attr_accessor :lexer_error
        end
        self.lexer_error = 0;

        class << self
          attr_accessor :lexer_en_main
        end
        self.lexer_en_main = 1;


        # line 133 "ragel/i18n/kn.rb.rl"
      end

      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length

        @line_number = 1
        @last_newline = 0


        # line 1331 "lib/gherkin/lexer/kn.rb"
        begin
          p ||= 0
          pe ||= data.length
          cs = lexer_start
        end

        # line 143 "ragel/i18n/kn.rb.rl"

        # line 1340 "lib/gherkin/lexer/kn.rb"
        begin
          _klen, _trans, _keys, _acts, _nacts = nil
          _goto_level = 0
          _resume = 10
          _eof_trans = 15
          _again = 20
          _test_eof = 30
          _out = 40
          while true
            _trigger_goto = false
            if _goto_level <= 0
              if p == pe
                _goto_level = _test_eof
                next
              end
              if cs == 0
                _goto_level = _out
                next
              end
            end
            if _goto_level <= _resume
              _keys = _lexer_key_offsets[cs]
              _trans = _lexer_index_offsets[cs]
              _klen = _lexer_single_lengths[cs]
              _break_match = false

              begin
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + _klen - 1

                  loop do
                    break if _upper < _lower
                    _mid = _lower + ( (_upper - _lower) >> 1 )

                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 1
                    elsif data[p].ord > _lexer_trans_keys[_mid]
                      _lower = _mid + 1
                    else
                      _trans += (_mid - _keys)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _keys += _klen
                  _trans += _klen
                end
                _klen = _lexer_range_lengths[cs]
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + (_klen << 1) - 2
                  loop do
                    break if _upper < _lower
                    _mid = _lower + (((_upper-_lower) >> 1) & ~1)
                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 2
                    elsif data[p].ord > _lexer_trans_keys[_mid+1]
                      _lower = _mid + 2
                    else
                      _trans += ((_mid - _keys) >> 1)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _trans += _klen
                end
              end while false
              _trans = _lexer_indicies[_trans]
              cs = _lexer_trans_targs[_trans]
              if _lexer_trans_actions[_trans] != 0
                _acts = _lexer_trans_actions[_trans]
                _nacts = _lexer_actions[_acts]
                _acts += 1
                while _nacts > 0
                  _nacts -= 1
                  _acts += 1
                  case _lexer_actions[_acts - 1]
                  when 0 then
                    # line 11 "ragel/i18n/kn.rb.rl"
                    begin

                      @content_start = p
                      @current_line = @line_number
                      @start_col = p - @last_newline - "#{@keyword}:".length
                    end
                  when 1 then
                    # line 17 "ragel/i18n/kn.rb.rl"
                    begin

                      @current_line = @line_number
                      @start_col = p - @last_newline
                    end
                  when 2 then
                    # line 22 "ragel/i18n/kn.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 3 then
                    # line 26 "ragel/i18n/kn.rb.rl"
                    begin

                      @docstring_content_type_start = p
                    end
                  when 4 then
                    # line 29 "ragel/i18n/kn.rb.rl"
                    begin

                      @docstring_content_type_end = p
                    end
                  when 5 then
                    # line 33 "ragel/i18n/kn.rb.rl"
                    begin

                      con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
                      con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
                      @listener.doc_string(con_type, con, @current_line)
                    end
                  when 6 then
                    # line 38 "ragel/i18n/kn.rb.rl"
                    begin

                      p = store_keyword_content(:feature, data, p, eof)
                    end
                  when 7 then
                    # line 42 "ragel/i18n/kn.rb.rl"
                    begin

                      p = store_keyword_content(:background, data, p, eof)
                    end
                  when 8 then
                    # line 46 "ragel/i18n/kn.rb.rl"
                    begin

                      p = store_keyword_content(:scenario, data, p, eof)
                    end
                  when 9 then
                    # line 50 "ragel/i18n/kn.rb.rl"
                    begin

                      p = store_keyword_content(:scenario_outline, data, p, eof)
                    end
                  when 10 then
                    # line 54 "ragel/i18n/kn.rb.rl"
                    begin

                      p = store_keyword_content(:examples, data, p, eof)
                    end
                  when 11 then
                    # line 58 "ragel/i18n/kn.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.step(@keyword, con, @current_line)
                    end
                  when 12 then
                    # line 63 "ragel/i18n/kn.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.comment(con, @line_number)
                      @keyword_start = nil
                    end
                  when 13 then
                    # line 69 "ragel/i18n/kn.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.tag(con, @current_line)
                      @keyword_start = nil
                    end
                  when 14 then
                    # line 75 "ragel/i18n/kn.rb.rl"
                    begin

                      @line_number += 1
                    end
                  when 15 then
                    # line 79 "ragel/i18n/kn.rb.rl"
                    begin

                      @last_newline = p + 1
                    end
                  when 16 then
                    # line 83 "ragel/i18n/kn.rb.rl"
                    begin

                      @keyword_start ||= p
                    end
                  when 17 then
                    # line 87 "ragel/i18n/kn.rb.rl"
                    begin

                      @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
                      @keyword_start = nil
                    end
                  when 18 then
                    # line 92 "ragel/i18n/kn.rb.rl"
                    begin

                      @next_keyword_start = p
                    end
                  when 19 then
                    # line 96 "ragel/i18n/kn.rb.rl"
                    begin

                      p = p - 1
                      current_row = []
                      @current_line = @line_number
                    end
                  when 20 then
                    # line 102 "ragel/i18n/kn.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 21 then
                    # line 106 "ragel/i18n/kn.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
                    end
                  when 22 then
                    # line 111 "ragel/i18n/kn.rb.rl"
                    begin

                      @listener.row(current_row, @current_line)
                    end
                  when 23 then
                    # line 115 "ragel/i18n/kn.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1584 "lib/gherkin/lexer/kn.rb"
                  end # action switch
                end
              end
              if _trigger_goto
                next
              end
            end
            if _goto_level <= _again
              if cs == 0
                _goto_level = _out
                next
              end
              p += 1
              if p != pe
                _goto_level = _resume
                next
              end
            end
            if _goto_level <= _test_eof
              if p == eof
                __acts = _lexer_eof_actions[cs]
                __nacts =  _lexer_actions[__acts]
                __acts += 1
                while __nacts > 0
                  __nacts -= 1
                  __acts += 1
                  case _lexer_actions[__acts - 1]
                  when 23 then
                    # line 115 "ragel/i18n/kn.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1623 "lib/gherkin/lexer/kn.rb"
                  end # eof action switch
                end
                if _trigger_goto
                  next
                end
              end
            end
            if _goto_level <= _out
              break
            end
          end
        end

        # line 144 "ragel/i18n/kn.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end

      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9|2\.0/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
