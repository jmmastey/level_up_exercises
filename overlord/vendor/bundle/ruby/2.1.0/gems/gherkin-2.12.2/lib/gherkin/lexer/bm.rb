
# line 1 "ragel/i18n/bm.rb.rl"
require 'gherkin/native'

module Gherkin
  module Lexer
    class Bm #:nodoc:
      native_impl('gherkin')


      # line 125 "ragel/i18n/bm.rb.rl"


      def initialize(listener)
        @listener = listener

        # Initialize ivars to avoid warnings
        @keyword = nil

        # line 21 "lib/gherkin/lexer/bm.rb"
        class << self
          attr_accessor :_lexer_actions
          private :_lexer_actions, :_lexer_actions=
        end
        self._lexer_actions = [
          0, 1, 0, 1, 1, 1, 2, 1,
          3, 1, 4, 1, 5, 1, 6, 1,
          7, 1, 8, 1, 9, 1, 10, 1,
          11, 1, 12, 1, 13, 1, 16, 1,
          17, 1, 18, 1, 19, 1, 20, 1,
          21, 1, 22, 1, 23, 2, 2, 18,
          2, 3, 4, 2, 13, 0, 2, 14,
          15, 2, 17, 0, 2, 17, 1, 2,
          17, 16, 2, 17, 19, 2, 18, 6,
          2, 18, 7, 2, 18, 8, 2, 18,
          9, 2, 18, 10, 2, 18, 16, 2,
          20, 21, 2, 22, 0, 2, 22, 1,
          2, 22, 16, 2, 22, 19, 3, 4,
          14, 15, 3, 5, 14, 15, 3, 11,
          14, 15, 3, 12, 14, 15, 3, 13,
          14, 15, 3, 14, 15, 18, 3, 17,
          0, 11, 3, 17, 14, 15, 4, 2,
          14, 15, 18, 4, 3, 4, 14, 15,
          4, 17, 0, 14, 15, 5, 17, 0,
          11, 14, 15
        ]

        class << self
          attr_accessor :_lexer_key_offsets
          private :_lexer_key_offsets, :_lexer_key_offsets=
        end
        self._lexer_key_offsets = [
          0, 0, 21, 22, 23, 43, 44, 45,
          47, 49, 54, 59, 64, 69, 73, 77,
          79, 80, 81, 82, 83, 84, 85, 86,
          87, 88, 89, 90, 91, 92, 93, 94,
          95, 97, 99, 104, 111, 116, 117, 118,
          119, 120, 121, 122, 123, 124, 125, 126,
          127, 128, 129, 130, 131, 132, 133, 140,
          142, 144, 146, 148, 150, 152, 172, 174,
          175, 176, 177, 178, 179, 180, 181, 182,
          183, 184, 185, 186, 200, 202, 204, 206,
          208, 210, 212, 214, 216, 218, 220, 222,
          224, 226, 228, 230, 232, 234, 236, 238,
          240, 242, 244, 246, 248, 250, 252, 254,
          256, 258, 260, 262, 264, 266, 268, 270,
          272, 274, 276, 278, 280, 282, 284, 286,
          288, 290, 292, 294, 296, 298, 300, 302,
          304, 306, 308, 310, 312, 314, 316, 318,
          320, 322, 324, 326, 329, 331, 333, 335,
          337, 339, 341, 343, 345, 347, 349, 351,
          354, 355, 357, 358, 359, 360, 361, 362,
          363, 364, 381, 383, 385, 387, 389, 391,
          393, 395, 397, 399, 401, 403, 405, 407,
          409, 411, 413, 415, 417, 419, 421, 423,
          425, 427, 429, 432, 434, 436, 438, 440,
          442, 444, 446, 448, 450, 452, 454, 457,
          459, 461, 463, 465, 467, 469, 471, 473,
          475, 477, 479, 481, 483, 485, 487, 489,
          491, 493, 495, 497, 499, 502, 504, 506,
          508, 510, 512, 514, 516, 518, 520, 522,
          524, 526, 528, 530, 532, 534, 536, 538,
          540, 543, 545, 547, 549, 552, 554, 557,
          559, 561, 563, 565, 567, 569, 572, 574,
          576, 578, 579, 580, 581, 582, 583, 584,
          585, 586, 587, 588, 589, 590, 591, 592,
          593, 594, 595, 596, 597, 598, 614, 616,
          618, 620, 622, 624, 626, 628, 630, 632,
          634, 636, 638, 640, 642, 644, 646, 648,
          650, 652, 654, 656, 658, 660, 662, 665,
          667, 669, 671, 673, 675, 677, 679, 681,
          683, 685, 687, 690, 692, 694, 696, 698,
          700, 702, 704, 706, 709, 711, 713, 715,
          717, 719, 721, 723, 725, 727, 729, 731,
          733, 735, 737, 739, 741, 743, 745, 747,
          750, 752, 754, 756, 759, 761, 764, 766,
          768, 770, 772, 774, 776, 779, 781, 783,
          785, 787, 788, 789, 790, 791, 792, 793,
          794, 795, 796, 797, 798, 799, 800, 801,
          802, 803, 804, 805, 806, 807, 808, 809,
          825, 827, 829, 831, 833, 835, 837, 839,
          841, 843, 845, 847, 849, 851, 853, 855,
          857, 859, 861, 863, 865, 867, 869, 871,
          873, 876, 878, 880, 882, 884, 886, 888,
          890, 892, 894, 896, 898, 901, 903, 905,
          907, 909, 911, 913, 915, 917, 919, 921,
          924, 926, 928, 930, 932, 934, 936, 938,
          940, 943, 945, 947, 949, 951, 952, 953,
          954, 955, 956, 957, 958, 959, 960, 962,
          963, 965, 966, 967, 968, 969, 970, 971,
          973, 974, 975, 976, 977, 978, 979, 981,
          982, 983, 984, 985, 986, 990, 996, 999,
          1001, 1007, 1027
        ]

        class << self
          attr_accessor :_lexer_trans_keys
          private :_lexer_trans_keys, :_lexer_trans_keys=
        end
        self._lexer_trans_keys = [
          -17, 10, 32, 34, 35, 37, 42, 64,
          65, 66, 67, 68, 70, 75, 76, 77,
          83, 84, 124, 9, 13, -69, -65, 10,
          32, 34, 35, 37, 42, 64, 65, 66,
          67, 68, 70, 75, 76, 77, 83, 84,
          124, 9, 13, 34, 34, 10, 13, 10,
          13, 10, 32, 34, 9, 13, 10, 32,
          34, 9, 13, 10, 32, 34, 9, 13,
          10, 32, 34, 9, 13, 10, 32, 9,
          13, 10, 32, 9, 13, 10, 13, 10,
          95, 70, 69, 65, 84, 85, 82, 69,
          95, 69, 78, 68, 95, 37, 32, 10,
          13, 10, 13, 13, 32, 64, 9, 10,
          9, 10, 13, 32, 64, 11, 12, 10,
          32, 64, 9, 13, 112, 97, 98, 105,
          108, 97, 97, 103, 105, 111, 110, 116,
          111, 104, 58, 10, 10, 10, 32, 35,
          70, 124, 9, 13, 10, 117, 10, 110,
          10, 103, 10, 115, 10, 105, 10, 58,
          10, 32, 34, 35, 37, 42, 64, 65,
          66, 67, 68, 70, 75, 76, 77, 83,
          84, 124, 9, 13, 97, 105, 110, 98,
          101, 114, 117, 110, 103, 115, 105, 58,
          10, 10, 10, 32, 35, 37, 64, 67,
          70, 75, 76, 77, 83, 84, 9, 13,
          10, 95, 10, 70, 10, 69, 10, 65,
          10, 84, 10, 85, 10, 82, 10, 69,
          10, 95, 10, 69, 10, 78, 10, 68,
          10, 95, 10, 37, 10, 111, 10, 110,
          10, 116, 10, 111, 10, 104, 10, 58,
          10, 117, 10, 110, 10, 103, 10, 115,
          10, 105, 10, 101, 10, 97, 10, 100,
          10, 97, 10, 97, 10, 110, 10, 97,
          10, 116, 10, 97, 10, 114, 10, 32,
          10, 66, 10, 101, 10, 108, 10, 97,
          10, 107, 10, 97, 10, 110, 10, 103,
          10, 101, 10, 110, 10, 103, 10, 103,
          10, 97, 10, 114, 10, 105, 10, 115,
          10, 107, 10, 97, 10, 110, 10, 32,
          10, 83, 10, 101, 10, 110, 10, 97,
          10, 114, 10, 105, 10, 111, 10, 101,
          105, 10, 116, 10, 117, 10, 97, 10,
          101, 10, 109, 10, 112, 10, 108, 10,
          97, 10, 116, 10, 101, 10, 32, 10,
          75, 83, 101, 97, 109, 100, 97, 97,
          110, 58, 10, 10, 10, 32, 35, 37,
          42, 64, 65, 66, 68, 70, 75, 76,
          77, 83, 84, 9, 13, 10, 95, 10,
          70, 10, 69, 10, 65, 10, 84, 10,
          85, 10, 82, 10, 69, 10, 95, 10,
          69, 10, 78, 10, 68, 10, 95, 10,
          37, 10, 32, 10, 112, 10, 97, 10,
          98, 10, 105, 10, 108, 10, 97, 10,
          97, 10, 103, 10, 105, 10, 97, 105,
          10, 110, 10, 98, 10, 101, 10, 114,
          10, 117, 10, 110, 10, 103, 10, 115,
          10, 105, 10, 58, 10, 101, 10, 97,
          109, 10, 100, 10, 97, 10, 97, 10,
          110, 10, 117, 10, 100, 10, 105, 10,
          97, 10, 97, 10, 116, 10, 97, 10,
          114, 10, 32, 10, 66, 10, 101, 10,
          108, 10, 97, 10, 107, 10, 97, 10,
          110, 10, 103, 10, 97, 101, 10, 107,
          10, 110, 10, 103, 10, 103, 10, 97,
          10, 114, 10, 105, 10, 115, 10, 107,
          10, 97, 10, 110, 10, 32, 10, 83,
          10, 101, 10, 110, 10, 97, 10, 114,
          10, 105, 10, 111, 10, 101, 105, 10,
          116, 10, 117, 10, 97, 10, 97, 101,
          10, 112, 10, 109, 116, 10, 112, 10,
          108, 10, 97, 10, 116, 10, 101, 10,
          32, 10, 75, 83, 10, 101, 10, 97,
          10, 97, 117, 100, 105, 97, 97, 116,
          97, 114, 32, 66, 101, 108, 97, 107,
          97, 110, 103, 58, 10, 10, 10, 32,
          35, 37, 42, 64, 65, 66, 68, 70,
          75, 77, 83, 84, 9, 13, 10, 95,
          10, 70, 10, 69, 10, 65, 10, 84,
          10, 85, 10, 82, 10, 69, 10, 95,
          10, 69, 10, 78, 10, 68, 10, 95,
          10, 37, 10, 32, 10, 112, 10, 97,
          10, 98, 10, 105, 10, 108, 10, 97,
          10, 97, 10, 103, 10, 105, 10, 97,
          105, 10, 110, 10, 98, 10, 101, 10,
          114, 10, 117, 10, 110, 10, 103, 10,
          115, 10, 105, 10, 58, 10, 101, 10,
          97, 109, 10, 100, 10, 97, 10, 97,
          10, 110, 10, 117, 10, 100, 10, 105,
          10, 97, 10, 97, 101, 10, 107, 10,
          110, 10, 103, 10, 103, 10, 97, 10,
          114, 10, 105, 10, 115, 10, 107, 10,
          97, 10, 110, 10, 32, 10, 83, 10,
          101, 10, 110, 10, 97, 10, 114, 10,
          105, 10, 111, 10, 101, 105, 10, 116,
          10, 117, 10, 97, 10, 97, 101, 10,
          112, 10, 109, 116, 10, 112, 10, 108,
          10, 97, 10, 116, 10, 101, 10, 32,
          10, 75, 83, 10, 101, 10, 97, 10,
          97, 97, 101, 107, 110, 103, 103, 97,
          114, 105, 115, 107, 97, 110, 32, 83,
          101, 110, 97, 114, 105, 111, 58, 10,
          10, 10, 32, 35, 37, 42, 64, 65,
          66, 68, 70, 75, 77, 83, 84, 9,
          13, 10, 95, 10, 70, 10, 69, 10,
          65, 10, 84, 10, 85, 10, 82, 10,
          69, 10, 95, 10, 69, 10, 78, 10,
          68, 10, 95, 10, 37, 10, 32, 10,
          112, 10, 97, 10, 98, 10, 105, 10,
          108, 10, 97, 10, 97, 10, 103, 10,
          105, 10, 97, 105, 10, 110, 10, 98,
          10, 101, 10, 114, 10, 117, 10, 110,
          10, 103, 10, 115, 10, 105, 10, 58,
          10, 101, 10, 97, 109, 10, 100, 10,
          97, 10, 97, 10, 110, 10, 117, 10,
          100, 10, 105, 10, 97, 10, 97, 10,
          107, 10, 101, 105, 10, 110, 10, 97,
          10, 114, 10, 105, 10, 111, 10, 116,
          10, 117, 10, 97, 10, 97, 101, 10,
          112, 10, 116, 10, 97, 101, 105, 110,
          97, 114, 105, 111, 116, 117, 97, 105,
          97, 101, 112, 109, 116, 112, 108, 97,
          116, 101, 32, 75, 83, 101, 97, 100,
          97, 97, 110, 101, 105, 116, 117, 97,
          105, 97, 32, 124, 9, 13, 10, 32,
          92, 124, 9, 13, 10, 92, 124, 10,
          92, 10, 32, 92, 124, 9, 13, 10,
          32, 34, 35, 37, 42, 64, 65, 66,
          67, 68, 70, 75, 76, 77, 83, 84,
          124, 9, 13, 0
        ]

        class << self
          attr_accessor :_lexer_single_lengths
          private :_lexer_single_lengths, :_lexer_single_lengths=
        end
        self._lexer_single_lengths = [
          0, 19, 1, 1, 18, 1, 1, 2,
          2, 3, 3, 3, 3, 2, 2, 2,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          2, 2, 3, 5, 3, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 5, 2,
          2, 2, 2, 2, 2, 18, 2, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 12, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 3,
          1, 2, 1, 1, 1, 1, 1, 1,
          1, 15, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 3, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 2, 2, 3, 2, 3, 2,
          2, 2, 2, 2, 2, 3, 2, 2,
          2, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 14, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 3, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 3,
          2, 2, 2, 3, 2, 3, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 14,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 3,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 2, 2, 2, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 2, 1,
          2, 1, 1, 1, 1, 1, 1, 2,
          1, 1, 1, 1, 1, 1, 2, 1,
          1, 1, 1, 1, 2, 4, 3, 2,
          4, 18, 0
        ]

        class << self
          attr_accessor :_lexer_range_lengths
          private :_lexer_range_lengths, :_lexer_range_lengths=
        end
        self._lexer_range_lengths = [
          0, 1, 0, 0, 1, 0, 0, 0,
          0, 1, 1, 1, 1, 1, 1, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 1, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 1, 0,
          0, 0, 0, 0, 0, 1, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 1, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 1, 0, 0,
          1, 1, 0
        ]

        class << self
          attr_accessor :_lexer_index_offsets
          private :_lexer_index_offsets, :_lexer_index_offsets=
        end
        self._lexer_index_offsets = [
          0, 0, 21, 23, 25, 45, 47, 49,
          52, 55, 60, 65, 70, 75, 79, 83,
          86, 88, 90, 92, 94, 96, 98, 100,
          102, 104, 106, 108, 110, 112, 114, 116,
          118, 121, 124, 129, 136, 141, 143, 145,
          147, 149, 151, 153, 155, 157, 159, 161,
          163, 165, 167, 169, 171, 173, 175, 182,
          185, 188, 191, 194, 197, 200, 220, 223,
          225, 227, 229, 231, 233, 235, 237, 239,
          241, 243, 245, 247, 261, 264, 267, 270,
          273, 276, 279, 282, 285, 288, 291, 294,
          297, 300, 303, 306, 309, 312, 315, 318,
          321, 324, 327, 330, 333, 336, 339, 342,
          345, 348, 351, 354, 357, 360, 363, 366,
          369, 372, 375, 378, 381, 384, 387, 390,
          393, 396, 399, 402, 405, 408, 411, 414,
          417, 420, 423, 426, 429, 432, 435, 438,
          441, 444, 447, 450, 454, 457, 460, 463,
          466, 469, 472, 475, 478, 481, 484, 487,
          491, 493, 496, 498, 500, 502, 504, 506,
          508, 510, 527, 530, 533, 536, 539, 542,
          545, 548, 551, 554, 557, 560, 563, 566,
          569, 572, 575, 578, 581, 584, 587, 590,
          593, 596, 599, 603, 606, 609, 612, 615,
          618, 621, 624, 627, 630, 633, 636, 640,
          643, 646, 649, 652, 655, 658, 661, 664,
          667, 670, 673, 676, 679, 682, 685, 688,
          691, 694, 697, 700, 703, 707, 710, 713,
          716, 719, 722, 725, 728, 731, 734, 737,
          740, 743, 746, 749, 752, 755, 758, 761,
          764, 768, 771, 774, 777, 781, 784, 788,
          791, 794, 797, 800, 803, 806, 810, 813,
          816, 819, 821, 823, 825, 827, 829, 831,
          833, 835, 837, 839, 841, 843, 845, 847,
          849, 851, 853, 855, 857, 859, 875, 878,
          881, 884, 887, 890, 893, 896, 899, 902,
          905, 908, 911, 914, 917, 920, 923, 926,
          929, 932, 935, 938, 941, 944, 947, 951,
          954, 957, 960, 963, 966, 969, 972, 975,
          978, 981, 984, 988, 991, 994, 997, 1000,
          1003, 1006, 1009, 1012, 1016, 1019, 1022, 1025,
          1028, 1031, 1034, 1037, 1040, 1043, 1046, 1049,
          1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073,
          1077, 1080, 1083, 1086, 1090, 1093, 1097, 1100,
          1103, 1106, 1109, 1112, 1115, 1119, 1122, 1125,
          1128, 1131, 1133, 1135, 1137, 1139, 1141, 1143,
          1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159,
          1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175,
          1191, 1194, 1197, 1200, 1203, 1206, 1209, 1212,
          1215, 1218, 1221, 1224, 1227, 1230, 1233, 1236,
          1239, 1242, 1245, 1248, 1251, 1254, 1257, 1260,
          1263, 1267, 1270, 1273, 1276, 1279, 1282, 1285,
          1288, 1291, 1294, 1297, 1300, 1304, 1307, 1310,
          1313, 1316, 1319, 1322, 1325, 1328, 1331, 1334,
          1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359,
          1362, 1366, 1369, 1372, 1375, 1378, 1380, 1382,
          1384, 1386, 1388, 1390, 1392, 1394, 1396, 1399,
          1401, 1404, 1406, 1408, 1410, 1412, 1414, 1416,
          1419, 1421, 1423, 1425, 1427, 1429, 1431, 1434,
          1436, 1438, 1440, 1442, 1444, 1448, 1454, 1458,
          1461, 1467, 1487
        ]

        class << self
          attr_accessor :_lexer_indicies
          private :_lexer_indicies, :_lexer_indicies=
        end
        self._lexer_indicies = [
          1, 3, 2, 4, 5, 6, 7, 8,
          9, 10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 2, 0, 20, 0, 2,
          0, 3, 2, 4, 5, 6, 7, 8,
          9, 10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 2, 0, 21, 0, 22,
          0, 24, 25, 23, 27, 28, 26, 31,
          30, 32, 30, 29, 35, 34, 36, 34,
          33, 35, 34, 37, 34, 33, 35, 34,
          38, 34, 33, 40, 39, 39, 0, 3,
          41, 41, 0, 43, 44, 42, 3, 0,
          45, 0, 46, 0, 47, 0, 48, 0,
          49, 0, 50, 0, 51, 0, 52, 0,
          53, 0, 54, 0, 55, 0, 56, 0,
          57, 0, 58, 0, 59, 0, 61, 62,
          60, 64, 65, 63, 0, 0, 0, 0,
          66, 67, 68, 67, 67, 70, 69, 66,
          3, 71, 8, 71, 0, 72, 0, 73,
          0, 74, 0, 75, 0, 76, 0, 77,
          0, 78, 0, 79, 0, 77, 0, 80,
          0, 81, 0, 82, 0, 83, 0, 84,
          0, 85, 0, 87, 86, 89, 88, 89,
          90, 91, 92, 91, 90, 88, 89, 93,
          88, 89, 94, 88, 89, 95, 88, 89,
          96, 88, 89, 97, 88, 89, 98, 88,
          100, 99, 101, 102, 103, 104, 105, 106,
          107, 108, 109, 110, 111, 112, 113, 114,
          115, 116, 99, 0, 117, 118, 0, 77,
          0, 119, 0, 120, 0, 79, 0, 121,
          0, 122, 0, 123, 0, 124, 0, 125,
          0, 126, 0, 128, 127, 130, 129, 130,
          131, 132, 133, 132, 134, 135, 136, 137,
          138, 139, 140, 131, 129, 130, 141, 129,
          130, 142, 129, 130, 143, 129, 130, 144,
          129, 130, 145, 129, 130, 146, 129, 130,
          147, 129, 130, 148, 129, 130, 149, 129,
          130, 150, 129, 130, 151, 129, 130, 152,
          129, 130, 153, 129, 130, 154, 129, 130,
          155, 129, 130, 156, 129, 130, 157, 129,
          130, 158, 129, 130, 159, 129, 130, 160,
          129, 130, 161, 129, 130, 162, 129, 130,
          163, 129, 130, 164, 129, 130, 159, 129,
          130, 165, 129, 130, 166, 129, 130, 167,
          129, 130, 168, 129, 130, 169, 129, 130,
          159, 129, 130, 170, 129, 130, 171, 129,
          130, 172, 129, 130, 173, 129, 130, 174,
          129, 130, 175, 129, 130, 176, 129, 130,
          177, 129, 130, 178, 129, 130, 179, 129,
          130, 180, 129, 130, 181, 129, 130, 159,
          129, 130, 182, 129, 130, 183, 129, 130,
          184, 129, 130, 185, 129, 130, 186, 129,
          130, 187, 129, 130, 188, 129, 130, 189,
          129, 130, 190, 129, 130, 191, 129, 130,
          192, 129, 130, 193, 129, 130, 194, 129,
          130, 195, 129, 130, 196, 129, 130, 197,
          129, 130, 198, 129, 130, 199, 129, 130,
          159, 129, 130, 195, 200, 129, 130, 201,
          129, 130, 202, 129, 130, 164, 129, 130,
          203, 129, 130, 204, 129, 130, 205, 129,
          130, 206, 129, 130, 207, 129, 130, 208,
          129, 130, 209, 129, 130, 210, 129, 130,
          211, 212, 129, 213, 0, 214, 215, 0,
          216, 0, 217, 0, 218, 0, 219, 0,
          220, 0, 222, 221, 224, 223, 224, 225,
          226, 227, 228, 226, 229, 230, 231, 232,
          233, 234, 235, 236, 237, 225, 223, 224,
          238, 223, 224, 239, 223, 224, 240, 223,
          224, 241, 223, 224, 242, 223, 224, 243,
          223, 224, 244, 223, 224, 245, 223, 224,
          246, 223, 224, 247, 223, 224, 248, 223,
          224, 249, 223, 224, 250, 223, 224, 251,
          223, 224, 252, 223, 224, 253, 223, 224,
          254, 223, 224, 255, 223, 224, 256, 223,
          224, 257, 223, 224, 258, 223, 224, 259,
          223, 224, 260, 223, 224, 258, 223, 224,
          261, 262, 223, 224, 258, 223, 224, 263,
          223, 224, 264, 223, 224, 260, 223, 224,
          265, 223, 224, 266, 223, 224, 267, 223,
          224, 268, 223, 224, 269, 223, 224, 252,
          223, 224, 270, 223, 224, 271, 272, 223,
          224, 273, 223, 224, 274, 223, 224, 275,
          223, 224, 269, 223, 224, 276, 223, 224,
          277, 223, 224, 278, 223, 224, 261, 223,
          224, 279, 223, 224, 280, 223, 224, 281,
          223, 224, 282, 223, 224, 283, 223, 224,
          284, 223, 224, 285, 223, 224, 286, 223,
          224, 287, 223, 224, 288, 223, 224, 289,
          223, 224, 290, 223, 224, 269, 223, 224,
          291, 292, 223, 224, 257, 223, 224, 293,
          223, 224, 294, 223, 224, 295, 223, 224,
          296, 223, 224, 297, 223, 224, 298, 223,
          224, 299, 223, 224, 300, 223, 224, 301,
          223, 224, 302, 223, 224, 303, 223, 224,
          304, 223, 224, 305, 223, 224, 306, 223,
          224, 307, 223, 224, 308, 223, 224, 309,
          223, 224, 269, 223, 224, 305, 310, 223,
          224, 311, 223, 224, 312, 223, 224, 268,
          223, 224, 313, 314, 223, 224, 260, 223,
          224, 315, 316, 223, 224, 317, 223, 224,
          318, 223, 224, 319, 223, 224, 320, 223,
          224, 321, 223, 224, 322, 223, 224, 323,
          324, 223, 224, 325, 223, 224, 271, 223,
          224, 313, 223, 326, 0, 327, 0, 328,
          0, 117, 0, 329, 0, 330, 0, 331,
          0, 332, 0, 333, 0, 334, 0, 335,
          0, 336, 0, 337, 0, 338, 0, 339,
          0, 340, 0, 341, 0, 342, 0, 344,
          343, 346, 345, 346, 347, 348, 349, 350,
          348, 351, 352, 353, 354, 355, 356, 357,
          358, 347, 345, 346, 359, 345, 346, 360,
          345, 346, 361, 345, 346, 362, 345, 346,
          363, 345, 346, 364, 345, 346, 365, 345,
          346, 366, 345, 346, 367, 345, 346, 368,
          345, 346, 369, 345, 346, 370, 345, 346,
          371, 345, 346, 372, 345, 346, 373, 345,
          346, 374, 345, 346, 375, 345, 346, 376,
          345, 346, 377, 345, 346, 378, 345, 346,
          379, 345, 346, 380, 345, 346, 381, 345,
          346, 379, 345, 346, 382, 383, 345, 346,
          379, 345, 346, 384, 345, 346, 385, 345,
          346, 381, 345, 346, 386, 345, 346, 387,
          345, 346, 388, 345, 346, 389, 345, 346,
          390, 345, 346, 373, 345, 346, 391, 345,
          346, 392, 393, 345, 346, 394, 345, 346,
          395, 345, 346, 396, 345, 346, 390, 345,
          346, 397, 345, 346, 398, 345, 346, 399,
          345, 346, 382, 345, 346, 400, 401, 345,
          346, 378, 345, 346, 402, 345, 346, 403,
          345, 346, 404, 345, 346, 405, 345, 346,
          406, 345, 346, 407, 345, 346, 408, 345,
          346, 409, 345, 346, 410, 345, 346, 411,
          345, 346, 412, 345, 346, 413, 345, 346,
          414, 345, 346, 415, 345, 346, 416, 345,
          346, 417, 345, 346, 418, 345, 346, 390,
          345, 346, 414, 419, 345, 346, 420, 345,
          346, 421, 345, 346, 389, 345, 346, 422,
          423, 345, 346, 381, 345, 346, 424, 425,
          345, 346, 426, 345, 346, 427, 345, 346,
          428, 345, 346, 429, 345, 346, 430, 345,
          346, 431, 345, 346, 432, 433, 345, 346,
          434, 345, 346, 392, 345, 346, 422, 345,
          435, 436, 0, 76, 0, 437, 0, 438,
          0, 439, 0, 440, 0, 441, 0, 442,
          0, 443, 0, 444, 0, 445, 0, 446,
          0, 447, 0, 448, 0, 449, 0, 450,
          0, 451, 0, 452, 0, 453, 0, 454,
          0, 455, 0, 457, 456, 459, 458, 459,
          460, 461, 462, 463, 461, 464, 465, 466,
          467, 468, 469, 470, 471, 460, 458, 459,
          472, 458, 459, 473, 458, 459, 474, 458,
          459, 475, 458, 459, 476, 458, 459, 477,
          458, 459, 478, 458, 459, 479, 458, 459,
          480, 458, 459, 481, 458, 459, 482, 458,
          459, 483, 458, 459, 484, 458, 459, 485,
          458, 459, 486, 458, 459, 487, 458, 459,
          488, 458, 459, 489, 458, 459, 490, 458,
          459, 491, 458, 459, 492, 458, 459, 493,
          458, 459, 494, 458, 459, 492, 458, 459,
          495, 496, 458, 459, 492, 458, 459, 497,
          458, 459, 498, 458, 459, 494, 458, 459,
          499, 458, 459, 500, 458, 459, 501, 458,
          459, 502, 458, 459, 503, 458, 459, 486,
          458, 459, 504, 458, 459, 505, 506, 458,
          459, 507, 458, 459, 508, 458, 459, 509,
          458, 459, 503, 458, 459, 510, 458, 459,
          511, 458, 459, 512, 458, 459, 495, 458,
          459, 513, 458, 459, 491, 458, 459, 514,
          515, 458, 459, 516, 458, 459, 517, 458,
          459, 518, 458, 459, 519, 458, 459, 503,
          458, 459, 520, 458, 459, 521, 458, 459,
          502, 458, 459, 522, 523, 458, 459, 494,
          458, 459, 524, 458, 459, 522, 458, 525,
          526, 0, 527, 0, 528, 0, 529, 0,
          530, 0, 219, 0, 531, 0, 532, 0,
          533, 0, 219, 0, 534, 535, 0, 79,
          0, 536, 537, 0, 538, 0, 539, 0,
          540, 0, 541, 0, 542, 0, 543, 0,
          544, 545, 0, 546, 0, 547, 0, 548,
          0, 549, 0, 550, 0, 454, 0, 449,
          551, 0, 552, 0, 553, 0, 554, 0,
          454, 0, 534, 0, 555, 556, 555, 0,
          559, 558, 560, 561, 558, 557, 0, 563,
          564, 562, 0, 563, 562, 559, 565, 563,
          564, 565, 562, 559, 566, 567, 568, 569,
          570, 571, 572, 573, 574, 575, 576, 577,
          578, 579, 580, 581, 582, 566, 0, 583,
          0
        ]

        class << self
          attr_accessor :_lexer_trans_targs
          private :_lexer_trans_targs, :_lexer_trans_targs=
        end
        self._lexer_trans_targs = [
          0, 2, 4, 4, 5, 15, 17, 31,
          34, 37, 43, 46, 62, 67, 152, 261,
          360, 444, 454, 476, 3, 6, 7, 8,
          9, 8, 8, 9, 8, 10, 10, 10,
          11, 10, 10, 10, 11, 12, 13, 14,
          4, 14, 15, 4, 16, 18, 19, 20,
          21, 22, 23, 24, 25, 26, 27, 28,
          29, 30, 482, 32, 33, 4, 16, 33,
          4, 16, 35, 36, 4, 35, 34, 36,
          38, 39, 40, 41, 42, 31, 44, 45,
          47, 48, 49, 50, 51, 52, 53, 54,
          53, 54, 54, 4, 55, 56, 57, 58,
          59, 60, 61, 4, 4, 5, 15, 17,
          31, 34, 37, 43, 46, 62, 67, 152,
          261, 360, 444, 454, 476, 63, 64, 65,
          66, 68, 69, 70, 71, 72, 73, 74,
          75, 74, 75, 75, 4, 76, 90, 96,
          101, 107, 120, 139, 143, 77, 78, 79,
          80, 81, 82, 83, 84, 85, 86, 87,
          88, 89, 4, 91, 92, 93, 94, 95,
          61, 97, 98, 99, 100, 102, 103, 104,
          105, 106, 108, 109, 110, 111, 112, 113,
          114, 115, 116, 117, 118, 119, 121, 122,
          123, 124, 125, 126, 127, 128, 129, 130,
          131, 132, 133, 134, 135, 136, 137, 138,
          140, 141, 142, 144, 145, 146, 147, 148,
          149, 150, 151, 101, 139, 153, 154, 257,
          155, 156, 157, 158, 159, 160, 161, 160,
          161, 161, 4, 162, 176, 177, 183, 186,
          191, 197, 207, 220, 240, 244, 163, 164,
          165, 166, 167, 168, 169, 170, 171, 172,
          173, 174, 175, 4, 61, 178, 179, 180,
          181, 182, 176, 184, 185, 187, 188, 189,
          190, 192, 193, 194, 195, 196, 198, 199,
          203, 200, 201, 202, 204, 205, 206, 208,
          209, 210, 211, 212, 213, 214, 215, 216,
          217, 218, 219, 221, 222, 223, 224, 225,
          226, 227, 228, 229, 230, 231, 232, 233,
          234, 235, 236, 237, 238, 239, 241, 242,
          243, 245, 246, 247, 256, 248, 249, 250,
          251, 252, 253, 254, 240, 255, 258, 259,
          260, 262, 263, 264, 265, 266, 267, 268,
          269, 270, 271, 272, 273, 274, 275, 276,
          277, 276, 277, 277, 4, 278, 292, 293,
          299, 302, 307, 313, 323, 343, 347, 279,
          280, 281, 282, 283, 284, 285, 286, 287,
          288, 289, 290, 291, 4, 61, 294, 295,
          296, 297, 298, 292, 300, 301, 303, 304,
          305, 306, 308, 309, 310, 311, 312, 314,
          315, 319, 316, 317, 318, 320, 321, 322,
          324, 325, 326, 327, 328, 329, 330, 331,
          332, 333, 334, 335, 336, 337, 338, 339,
          340, 341, 342, 344, 345, 346, 348, 349,
          350, 359, 351, 352, 353, 354, 355, 356,
          357, 343, 358, 361, 362, 363, 364, 365,
          366, 367, 368, 369, 370, 371, 372, 373,
          374, 375, 376, 377, 378, 379, 380, 381,
          382, 383, 382, 383, 383, 4, 384, 398,
          399, 405, 408, 413, 419, 429, 431, 440,
          385, 386, 387, 388, 389, 390, 391, 392,
          393, 394, 395, 396, 397, 4, 61, 400,
          401, 402, 403, 404, 398, 406, 407, 409,
          410, 411, 412, 414, 415, 416, 417, 418,
          420, 421, 425, 422, 423, 424, 426, 427,
          428, 430, 432, 437, 433, 434, 435, 436,
          438, 439, 441, 442, 443, 445, 450, 446,
          447, 448, 449, 451, 452, 453, 455, 456,
          457, 475, 458, 459, 460, 461, 462, 463,
          464, 470, 465, 466, 467, 468, 469, 471,
          472, 473, 474, 476, 477, 478, 480, 481,
          479, 477, 478, 479, 477, 480, 481, 5,
          15, 17, 31, 34, 37, 43, 46, 62,
          67, 152, 261, 360, 444, 454, 476, 0
        ]

        class << self
          attr_accessor :_lexer_trans_actions
          private :_lexer_trans_actions, :_lexer_trans_actions=
        end
        self._lexer_trans_actions = [
          43, 0, 0, 54, 3, 1, 0, 29,
          1, 29, 29, 29, 29, 29, 29, 29,
          29, 29, 29, 35, 0, 0, 0, 7,
          139, 48, 0, 102, 9, 5, 45, 134,
          45, 0, 33, 122, 33, 33, 0, 11,
          106, 0, 0, 114, 25, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 57, 149, 126, 0,
          110, 23, 0, 27, 118, 27, 51, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 57, 144,
          0, 54, 0, 81, 84, 0, 0, 0,
          0, 0, 21, 31, 130, 60, 57, 31,
          63, 57, 63, 63, 63, 63, 63, 63,
          63, 63, 63, 63, 66, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 0, 69, 33, 84, 84,
          84, 84, 84, 84, 84, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 13, 0, 0, 0, 0, 0,
          13, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 57, 144, 0,
          54, 0, 75, 33, 84, 84, 84, 84,
          84, 84, 84, 84, 84, 84, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 17, 17, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 0, 72, 33, 84, 84,
          84, 84, 84, 84, 84, 84, 84, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 15, 15, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          57, 144, 0, 54, 0, 78, 33, 84,
          84, 84, 84, 84, 84, 84, 84, 84,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 19, 19, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 37, 37, 54,
          37, 87, 0, 0, 39, 0, 0, 93,
          90, 41, 96, 90, 96, 96, 96, 96,
          96, 96, 96, 96, 96, 96, 99, 0
        ]

        class << self
          attr_accessor :_lexer_eof_actions
          private :_lexer_eof_actions, :_lexer_eof_actions=
        end
        self._lexer_eof_actions = [
          0, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43
        ]

        class << self
          attr_accessor :lexer_start
        end
        self.lexer_start = 1;
        class << self
          attr_accessor :lexer_first_final
        end
        self.lexer_first_final = 482;
        class << self
          attr_accessor :lexer_error
        end
        self.lexer_error = 0;

        class << self
          attr_accessor :lexer_en_main
        end
        self.lexer_en_main = 1;


        # line 133 "ragel/i18n/bm.rb.rl"
      end

      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length

        @line_number = 1
        @last_newline = 0


        # line 909 "lib/gherkin/lexer/bm.rb"
        begin
          p ||= 0
          pe ||= data.length
          cs = lexer_start
        end

        # line 143 "ragel/i18n/bm.rb.rl"

        # line 918 "lib/gherkin/lexer/bm.rb"
        begin
          _klen, _trans, _keys, _acts, _nacts = nil
          _goto_level = 0
          _resume = 10
          _eof_trans = 15
          _again = 20
          _test_eof = 30
          _out = 40
          while true
            _trigger_goto = false
            if _goto_level <= 0
              if p == pe
                _goto_level = _test_eof
                next
              end
              if cs == 0
                _goto_level = _out
                next
              end
            end
            if _goto_level <= _resume
              _keys = _lexer_key_offsets[cs]
              _trans = _lexer_index_offsets[cs]
              _klen = _lexer_single_lengths[cs]
              _break_match = false

              begin
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + _klen - 1

                  loop do
                    break if _upper < _lower
                    _mid = _lower + ( (_upper - _lower) >> 1 )

                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 1
                    elsif data[p].ord > _lexer_trans_keys[_mid]
                      _lower = _mid + 1
                    else
                      _trans += (_mid - _keys)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _keys += _klen
                  _trans += _klen
                end
                _klen = _lexer_range_lengths[cs]
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + (_klen << 1) - 2
                  loop do
                    break if _upper < _lower
                    _mid = _lower + (((_upper-_lower) >> 1) & ~1)
                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 2
                    elsif data[p].ord > _lexer_trans_keys[_mid+1]
                      _lower = _mid + 2
                    else
                      _trans += ((_mid - _keys) >> 1)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _trans += _klen
                end
              end while false
              _trans = _lexer_indicies[_trans]
              cs = _lexer_trans_targs[_trans]
              if _lexer_trans_actions[_trans] != 0
                _acts = _lexer_trans_actions[_trans]
                _nacts = _lexer_actions[_acts]
                _acts += 1
                while _nacts > 0
                  _nacts -= 1
                  _acts += 1
                  case _lexer_actions[_acts - 1]
                  when 0 then
                    # line 11 "ragel/i18n/bm.rb.rl"
                    begin

                      @content_start = p
                      @current_line = @line_number
                      @start_col = p - @last_newline - "#{@keyword}:".length
                    end
                  when 1 then
                    # line 17 "ragel/i18n/bm.rb.rl"
                    begin

                      @current_line = @line_number
                      @start_col = p - @last_newline
                    end
                  when 2 then
                    # line 22 "ragel/i18n/bm.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 3 then
                    # line 26 "ragel/i18n/bm.rb.rl"
                    begin

                      @docstring_content_type_start = p
                    end
                  when 4 then
                    # line 29 "ragel/i18n/bm.rb.rl"
                    begin

                      @docstring_content_type_end = p
                    end
                  when 5 then
                    # line 33 "ragel/i18n/bm.rb.rl"
                    begin

                      con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
                      con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
                      @listener.doc_string(con_type, con, @current_line)
                    end
                  when 6 then
                    # line 38 "ragel/i18n/bm.rb.rl"
                    begin

                      p = store_keyword_content(:feature, data, p, eof)
                    end
                  when 7 then
                    # line 42 "ragel/i18n/bm.rb.rl"
                    begin

                      p = store_keyword_content(:background, data, p, eof)
                    end
                  when 8 then
                    # line 46 "ragel/i18n/bm.rb.rl"
                    begin

                      p = store_keyword_content(:scenario, data, p, eof)
                    end
                  when 9 then
                    # line 50 "ragel/i18n/bm.rb.rl"
                    begin

                      p = store_keyword_content(:scenario_outline, data, p, eof)
                    end
                  when 10 then
                    # line 54 "ragel/i18n/bm.rb.rl"
                    begin

                      p = store_keyword_content(:examples, data, p, eof)
                    end
                  when 11 then
                    # line 58 "ragel/i18n/bm.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.step(@keyword, con, @current_line)
                    end
                  when 12 then
                    # line 63 "ragel/i18n/bm.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.comment(con, @line_number)
                      @keyword_start = nil
                    end
                  when 13 then
                    # line 69 "ragel/i18n/bm.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.tag(con, @current_line)
                      @keyword_start = nil
                    end
                  when 14 then
                    # line 75 "ragel/i18n/bm.rb.rl"
                    begin

                      @line_number += 1
                    end
                  when 15 then
                    # line 79 "ragel/i18n/bm.rb.rl"
                    begin

                      @last_newline = p + 1
                    end
                  when 16 then
                    # line 83 "ragel/i18n/bm.rb.rl"
                    begin

                      @keyword_start ||= p
                    end
                  when 17 then
                    # line 87 "ragel/i18n/bm.rb.rl"
                    begin

                      @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
                      @keyword_start = nil
                    end
                  when 18 then
                    # line 92 "ragel/i18n/bm.rb.rl"
                    begin

                      @next_keyword_start = p
                    end
                  when 19 then
                    # line 96 "ragel/i18n/bm.rb.rl"
                    begin

                      p = p - 1
                      current_row = []
                      @current_line = @line_number
                    end
                  when 20 then
                    # line 102 "ragel/i18n/bm.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 21 then
                    # line 106 "ragel/i18n/bm.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
                    end
                  when 22 then
                    # line 111 "ragel/i18n/bm.rb.rl"
                    begin

                      @listener.row(current_row, @current_line)
                    end
                  when 23 then
                    # line 115 "ragel/i18n/bm.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1162 "lib/gherkin/lexer/bm.rb"
                  end # action switch
                end
              end
              if _trigger_goto
                next
              end
            end
            if _goto_level <= _again
              if cs == 0
                _goto_level = _out
                next
              end
              p += 1
              if p != pe
                _goto_level = _resume
                next
              end
            end
            if _goto_level <= _test_eof
              if p == eof
                __acts = _lexer_eof_actions[cs]
                __nacts =  _lexer_actions[__acts]
                __acts += 1
                while __nacts > 0
                  __nacts -= 1
                  __acts += 1
                  case _lexer_actions[__acts - 1]
                  when 23 then
                    # line 115 "ragel/i18n/bm.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1201 "lib/gherkin/lexer/bm.rb"
                  end # eof action switch
                end
                if _trigger_goto
                  next
                end
              end
            end
            if _goto_level <= _out
              break
            end
          end
        end

        # line 144 "ragel/i18n/bm.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end

      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9|2\.0/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
