require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe VenuesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Venue. As you add validations to Venue, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryGirl.build(:venue).attributes
  end

  let(:invalid_attributes) do
    FactoryGirl.attributes_for(:venue_invalid)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VenuesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all venues as @venues" do
      venues = Venue.all
      get :index, {}, valid_session
      expect(assigns(:venues)).to eq(venues)
    end
  end

  describe "GET show" do
    it "assigns the requested venue as @venue" do
      venue = FactoryGirl.create(:venue)
      get :show, { id: venue.to_param }, valid_session
      expect(assigns(:venue)).to eq(venue)
    end
  end

  describe "GET new" do
    it "assigns a new venue as @venue" do
      get :new, {}, valid_session
      expect(assigns(:venue)).to be_a_new(Venue)
    end
  end

  describe "GET edit" do
    it "assigns the requested venue as @venue" do
      venue = FactoryGirl.create(:venue)
      get :edit, { id: venue.to_param }, valid_session
      expect(assigns(:venue)).to eq(venue)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Venue" do
        expect do
          post :create, { venue: valid_attributes }, valid_session
        end.to change(Venue, :count).by(1)
      end

      it "assigns a newly created venue as @venue" do
        post :create, { venue: valid_attributes }, valid_session
        expect(assigns(:venue)).to be_a(Venue)
        expect(assigns(:venue)).to be_persisted
      end

      it "redirects to the created venue" do
        post :create, { venue: valid_attributes }, valid_session
        expect(response).to redirect_to(Venue.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved venue as @venue" do
        post :create, { venue: invalid_attributes }, valid_session
        expect(assigns(:venue)).to be_a_new(Venue)
      end

      it "re-renders the 'new' template" do
        post :create, { venue: invalid_attributes }, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) do
        FactoryGirl.attributes_for(:venue,
          venue_url: "http://google.com",
          description: "I've changed",
          city: "Rockford")
      end

      it "updates the requested venue" do
        venue = FactoryGirl.create(:venue)
        put :update, { id: venue.to_param,
                       venue: new_attributes }, valid_session
        venue.reload
        expect(assigns(:venue).venue_url).to eq(new_attributes[:venue_url])
        expect(assigns(:venue).description).to eq(new_attributes[:description])
        expect(assigns(:venue).city).to eq(new_attributes[:city])
      end

      it "assigns the requested venue as @venue" do
        venue = FactoryGirl.create(:venue)
        put :update, { id: venue.to_param,
                       venue: valid_attributes }, valid_session
        expect(assigns(:venue)).to eq(venue)
      end

      it "redirects to the venue" do
        venue = FactoryGirl.create(:venue)
        put :update, { id: venue.to_param,
                       venue: valid_attributes }, valid_session
        expect(response).to redirect_to(venue)
      end
    end

    describe "with invalid params" do
      it "assigns the venue as @venue" do
        venue = FactoryGirl.create(:venue)
        put :update, { id: venue.to_param,
                       venue: invalid_attributes }, valid_session
        expect(assigns(:venue)).to eq(venue)
      end

      it "re-renders the 'edit' template" do
        venue = FactoryGirl.create(:venue)
        put :update, { id: venue.to_param,
                       venue: invalid_attributes }, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested venue" do
      venue = FactoryGirl.create(:venue)
      expect do
        delete :destroy, { id: venue.to_param }, valid_session
      end.to change(Venue, :count).by(-1)
    end

    it "redirects to the venues list" do
      venue = FactoryGirl.create(:venue)
      delete :destroy, { id: venue.to_param }, valid_session
      expect(response).to redirect_to(venues_url)
    end
  end

end
