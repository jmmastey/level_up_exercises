
# line 1 "ragel/i18n/el.rb.rl"
require 'gherkin/native'

module Gherkin
  module Lexer
    class El #:nodoc:
      native_impl('gherkin')


      # line 125 "ragel/i18n/el.rb.rl"


      def initialize(listener)
        @listener = listener

        # Initialize ivars to avoid warnings
        @keyword = nil

        # line 21 "lib/gherkin/lexer/el.rb"
        class << self
          attr_accessor :_lexer_actions
          private :_lexer_actions, :_lexer_actions=
        end
        self._lexer_actions = [
          0, 1, 0, 1, 1, 1, 2, 1,
          3, 1, 4, 1, 5, 1, 6, 1,
          7, 1, 8, 1, 9, 1, 10, 1,
          11, 1, 12, 1, 13, 1, 16, 1,
          17, 1, 18, 1, 19, 1, 20, 1,
          21, 1, 22, 1, 23, 2, 2, 18,
          2, 3, 4, 2, 13, 0, 2, 14,
          15, 2, 17, 0, 2, 17, 1, 2,
          17, 16, 2, 17, 19, 2, 18, 6,
          2, 18, 7, 2, 18, 8, 2, 18,
          9, 2, 18, 10, 2, 18, 16, 2,
          20, 21, 2, 22, 0, 2, 22, 1,
          2, 22, 16, 2, 22, 19, 3, 4,
          14, 15, 3, 5, 14, 15, 3, 11,
          14, 15, 3, 12, 14, 15, 3, 13,
          14, 15, 3, 14, 15, 18, 3, 17,
          0, 11, 3, 17, 14, 15, 4, 2,
          14, 15, 18, 4, 3, 4, 14, 15,
          4, 17, 0, 14, 15, 5, 17, 0,
          11, 14, 15
        ]

        class << self
          attr_accessor :_lexer_key_offsets
          private :_lexer_key_offsets, :_lexer_key_offsets=
        end
        self._lexer_key_offsets = [
          0, 0, 12, 21, 22, 23, 24, 25,
          26, 27, 28, 30, 32, 43, 44, 45,
          47, 49, 54, 59, 64, 69, 73, 77,
          79, 80, 81, 82, 83, 84, 85, 86,
          87, 88, 89, 90, 91, 92, 93, 94,
          99, 106, 111, 115, 121, 124, 126, 132,
          143, 144, 145, 146, 147, 148, 149, 151,
          152, 153, 154, 155, 156, 157, 158, 159,
          160, 161, 162, 163, 164, 165, 166, 167,
          168, 169, 170, 171, 172, 173, 174, 175,
          176, 177, 178, 179, 180, 181, 182, 183,
          184, 185, 186, 194, 200, 202, 204, 206,
          208, 210, 212, 214, 216, 218, 220, 222,
          224, 226, 228, 230, 232, 234, 236, 238,
          249, 251, 253, 255, 257, 259, 261, 263,
          265, 267, 269, 271, 273, 275, 277, 279,
          281, 283, 286, 288, 290, 292, 294, 296,
          298, 300, 302, 304, 306, 308, 310, 312,
          314, 316, 318, 320, 322, 324, 326, 328,
          330, 332, 334, 336, 338, 340, 342, 344,
          346, 348, 350, 352, 354, 356, 358, 360,
          362, 364, 366, 368, 370, 372, 374, 376,
          378, 380, 382, 384, 386, 388, 390, 392,
          394, 396, 398, 400, 402, 405, 407, 409,
          411, 413, 415, 417, 419, 421, 423, 425,
          427, 429, 431, 433, 435, 437, 439, 441,
          443, 445, 447, 449, 451, 453, 455, 457,
          459, 461, 462, 463, 464, 465, 466, 467,
          468, 469, 470, 471, 472, 473, 474, 475,
          476, 477, 478, 479, 480, 481, 482, 484,
          485, 486, 487, 488, 489, 490, 491, 492,
          493, 494, 495, 496, 497, 498, 499, 500,
          501, 502, 503, 504, 505, 506, 507, 514,
          517, 519, 521, 523, 525, 527, 529, 531,
          533, 535, 537, 539, 541, 543, 545, 547,
          549, 551, 553, 555, 557, 559, 561, 563,
          565, 567, 569, 571, 573, 575, 577, 579,
          581, 583, 585, 587, 588, 589, 590, 591,
          592, 593, 594, 595, 596, 597, 598, 599,
          600, 601, 602, 603, 604, 605, 606, 607,
          608, 609, 610, 611, 612, 613, 614, 615,
          616, 617, 618, 619, 620, 621, 630, 638,
          640, 642, 644, 646, 648, 650, 652, 654,
          656, 658, 660, 662, 664, 667, 669, 671,
          673, 675, 677, 679, 681, 683, 685, 687,
          689, 691, 693, 695, 697, 699, 701, 703,
          705, 707, 709, 711, 713, 715, 717, 719,
          721, 723, 725, 727, 729, 731, 733, 735,
          737, 739, 741, 743, 745, 747, 749, 751,
          753, 755, 757, 759, 761, 763, 765, 767,
          769, 771, 773, 775, 777, 779, 781, 783,
          785, 787, 789, 791, 793, 795, 797, 799,
          801, 803, 805, 807, 809, 811, 813, 815,
          817, 819, 821, 823, 825, 827, 829, 831,
          833, 835, 837, 838, 839, 840, 841, 842,
          843, 844, 845, 846, 847, 848, 850, 851,
          852, 853, 862, 872, 874, 876, 878, 880,
          882, 884, 886, 888, 890, 892, 894, 896,
          898, 901, 903, 905, 907, 909, 911, 913,
          915, 917, 919, 921, 923, 925, 927, 929,
          931, 933, 935, 937, 939, 941, 943, 945,
          947, 949, 951, 953, 955, 957, 959, 961,
          963, 965, 967, 969, 971, 973, 975, 977,
          979, 981, 983, 985, 987, 989, 991, 993,
          995, 997, 999, 1001, 1003, 1005, 1007, 1009,
          1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025,
          1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041,
          1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057,
          1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073,
          1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089,
          1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105,
          1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121,
          1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137,
          1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153,
          1155, 1157, 1159, 1161, 1162, 1163, 1164, 1165,
          1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
          1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
          1182, 1183, 1184, 1193, 1202, 1204, 1206, 1208,
          1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224,
          1226, 1228, 1231, 1233, 1235, 1237, 1239, 1241,
          1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257,
          1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273,
          1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289,
          1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305,
          1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321,
          1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337,
          1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353,
          1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369,
          1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385,
          1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401,
          1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417,
          1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433,
          1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449,
          1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465,
          1467, 1468, 1469
        ]

        class << self
          attr_accessor :_lexer_trans_keys
          private :_lexer_trans_keys, :_lexer_trans_keys=
        end
        self._lexer_trans_keys = [
          -50, -17, 10, 32, 34, 35, 37, 42,
          64, 124, 9, 13, -116, -111, -108, -102,
          -101, -96, -93, -92, -91, -49, -124, -50,
          -79, -50, -67, 32, 10, 13, 10, 13,
          -50, 10, 32, 34, 35, 37, 42, 64,
          124, 9, 13, 34, 34, 10, 13, 10,
          13, 10, 32, 34, 9, 13, 10, 32,
          34, 9, 13, 10, 32, 34, 9, 13,
          10, 32, 34, 9, 13, 10, 32, 9,
          13, 10, 32, 9, 13, 10, 13, 10,
          95, 70, 69, 65, 84, 85, 82, 69,
          95, 69, 78, 68, 95, 37, 13, 32,
          64, 9, 10, 9, 10, 13, 32, 64,
          11, 12, 10, 32, 64, 9, 13, 32,
          124, 9, 13, 10, 32, 92, 124, 9,
          13, 10, 92, 124, 10, 92, 10, 32,
          92, 124, 9, 13, -50, 10, 32, 34,
          35, 37, 42, 64, 124, 9, 13, -50,
          -69, -50, -69, -50, -84, -50, -49, -75,
          -50, -76, -50, -65, -50, -68, -50, -83,
          -50, -67, -50, -65, -49, -123, -123, -50,
          -67, -50, -79, -49, -124, -49, -116, -49,
          -124, -50, -73, -49, -124, -50, -79, 58,
          10, 10, -50, 10, 32, 35, 37, 64,
          9, 13, -108, -101, -96, -93, -91, 10,
          -49, 10, -123, 10, -50, 10, -67, 10,
          -50, 10, -79, 10, -49, 10, -124, 10,
          -49, 10, -116, 10, -49, 10, -124, 10,
          -50, 10, -73, 10, -49, 10, -124, 10,
          -50, 10, -79, 10, 10, 58, -50, 10,
          32, 34, 35, 37, 42, 64, 124, 9,
          13, -50, 10, -75, 10, -50, 10, -71,
          10, -49, 10, -124, 10, -50, 10, -65,
          10, -49, 10, -123, 10, -49, 10, -127,
          10, -50, 10, -77, 10, -50, 10, -81,
          10, -50, 10, -79, -75, 10, -49, 10,
          -127, 10, -50, 10, -79, 10, -50, 10,
          -76, 10, -50, 10, -75, 10, -50, 10,
          -81, 10, -50, 10, -77, 10, -50, 10,
          -68, 10, -50, 10, -79, 10, -49, 10,
          -127, 10, -50, 10, -71, 10, -50, 10,
          -77, 10, -49, 10, -127, 10, -50, 10,
          -79, 10, -49, 10, -122, 10, -50, 10,
          -82, 10, 10, 32, -50, 10, -93, 10,
          -50, 10, -75, 10, -50, 10, -67, 10,
          -50, 10, -79, 10, -49, 10, -127, 10,
          -50, 10, -81, 10, -50, 10, -65, 10,
          -49, 10, -123, 10, -50, 10, -75, 10,
          -50, 10, -67, 10, -50, 10, -84, 10,
          -49, 10, -127, 10, -50, 10, -71, 10,
          -50, 10, -79, -65, 10, -49, 10, -128,
          10, -49, 10, -116, 10, -50, 10, -78,
          10, -50, 10, -79, 10, -50, 10, -72,
          10, -49, 10, -127, 10, -50, 10, -65,
          10, 10, 95, 10, 70, 10, 69, 10,
          65, 10, 84, 10, 85, 10, 82, 10,
          69, 10, 95, 10, 69, 10, 78, 10,
          68, 10, 95, 10, 37, -50, -79, -50,
          -71, -50, -75, -50, -71, -49, -124, -50,
          -65, -49, -123, -49, -127, -50, -77, -50,
          -81, -50, -79, -75, -49, -127, -50, -79,
          -50, -76, -50, -75, -50, -81, -50, -77,
          -50, -68, -50, -79, -49, -124, -50, -79,
          58, 10, 10, -50, 10, 32, 35, 124,
          9, 13, -108, -101, 10, -49, 10, -123,
          10, -50, 10, -67, 10, -50, 10, -79,
          10, -49, 10, -124, 10, -49, 10, -116,
          10, -49, 10, -124, 10, -50, 10, -73,
          10, -49, 10, -124, 10, -50, 10, -79,
          10, 10, 58, -50, 10, -75, 10, -50,
          10, -71, 10, -49, 10, -124, 10, -50,
          10, -65, 10, -49, 10, -123, 10, -49,
          10, -127, 10, -50, 10, -77, 10, -50,
          10, -81, 10, -49, -127, -50, -71, -50,
          -77, -49, -127, -50, -79, -49, -122, -50,
          -82, 32, -50, -93, -50, -75, -50, -67,
          -50, -79, -49, -127, -50, -81, -50, -65,
          -49, -123, 58, 10, 10, -50, 10, 32,
          35, 37, 42, 64, 9, 13, -116, -111,
          -108, -102, -101, -93, -92, 10, -49, 10,
          -124, 10, -50, 10, -79, 10, -50, 10,
          -67, 10, 10, 32, -50, 10, -69, 10,
          -50, 10, -69, 10, -50, 10, -84, 10,
          -50, -49, 10, -75, 10, -50, 10, -76,
          10, -50, 10, -65, 10, -50, 10, -68,
          10, -50, 10, -83, 10, -50, 10, -67,
          10, -50, 10, -65, 10, -49, 10, -123,
          10, -123, 10, -50, 10, -67, 10, -50,
          10, -79, 10, -49, 10, -124, 10, -49,
          10, -116, 10, -49, 10, -124, 10, -50,
          10, -73, 10, -49, 10, -124, 10, -50,
          10, -79, 10, 10, 58, -50, 10, -79,
          10, -50, 10, -71, 10, -50, 10, -75,
          10, -50, 10, -71, 10, -49, 10, -124,
          10, -50, 10, -65, 10, -49, 10, -123,
          10, -49, 10, -127, 10, -50, 10, -77,
          10, -50, 10, -81, 10, -50, 10, -75,
          10, -50, 10, -67, 10, -50, 10, -84,
          10, -49, 10, -127, 10, -50, 10, -71,
          10, -50, 10, -65, 10, -49, 10, -116,
          10, -49, 10, -124, 10, -50, 10, -75,
          10, 10, 95, 10, 70, 10, 69, 10,
          65, 10, 84, 10, 85, 10, 82, 10,
          69, 10, 95, 10, 69, 10, 78, 10,
          68, 10, 95, 10, 37, -50, -75, -50,
          -67, -50, -84, -49, -127, -50, -71, -50,
          -79, -65, 58, 10, 10, -50, 10, 32,
          35, 37, 42, 64, 9, 13, -116, -111,
          -108, -102, -101, -96, -93, -92, -91, 10,
          -49, 10, -124, 10, -50, 10, -79, 10,
          -50, 10, -67, 10, 10, 32, -50, 10,
          -69, 10, -50, 10, -69, 10, -50, 10,
          -84, 10, -50, -49, 10, -75, 10, -50,
          10, -76, 10, -50, 10, -65, 10, -50,
          10, -68, 10, -50, 10, -83, 10, -50,
          10, -67, 10, -50, 10, -65, 10, -49,
          10, -123, 10, -123, 10, -50, 10, -67,
          10, -50, 10, -79, 10, -49, 10, -124,
          10, -49, 10, -116, 10, -49, 10, -124,
          10, -50, 10, -73, 10, -49, 10, -124,
          10, -50, 10, -79, 10, 10, 58, -50,
          10, -79, 10, -50, 10, -71, 10, -50,
          10, -75, 10, -50, 10, -71, 10, -49,
          10, -124, 10, -50, 10, -65, 10, -49,
          10, -123, 10, -49, 10, -127, 10, -50,
          10, -77, 10, -50, 10, -81, 10, -50,
          10, -75, 10, -49, 10, -127, 10, -50,
          10, -71, 10, -50, 10, -77, 10, -49,
          10, -127, 10, -50, 10, -79, 10, -49,
          10, -122, 10, -50, 10, -82, 10, 10,
          32, -50, 10, -93, 10, -50, 10, -75,
          10, -50, 10, -67, 10, -50, 10, -79,
          10, -49, 10, -127, 10, -50, 10, -81,
          10, -50, 10, -65, 10, -49, 10, -123,
          10, -50, 10, -75, 10, -50, 10, -67,
          10, -50, 10, -84, 10, -49, 10, -127,
          10, -50, 10, -71, 10, -50, 10, -65,
          10, -49, 10, -116, 10, -49, 10, -124,
          10, -50, 10, -75, 10, -49, 10, -128,
          10, -49, 10, -116, 10, -50, 10, -78,
          10, -50, 10, -79, 10, -50, 10, -72,
          10, -49, 10, -127, 10, 10, 95, 10,
          70, 10, 69, 10, 65, 10, 84, 10,
          85, 10, 82, 10, 69, 10, 95, 10,
          69, 10, 78, 10, 68, 10, 95, 10,
          37, -49, -116, -49, -124, -50, -75, -49,
          -128, -49, -116, -50, -78, -50, -79, -50,
          -72, -49, -127, -50, -65, 58, 10, 10,
          -50, 10, 32, 35, 37, 42, 64, 9,
          13, -116, -111, -108, -102, -101, -96, -93,
          -92, 10, -49, 10, -124, 10, -50, 10,
          -79, 10, -50, 10, -67, 10, 10, 32,
          -50, 10, -69, 10, -50, 10, -69, 10,
          -50, 10, -84, 10, -50, -49, 10, -75,
          10, -50, 10, -76, 10, -50, 10, -65,
          10, -50, 10, -68, 10, -50, 10, -83,
          10, -50, 10, -67, 10, -50, 10, -65,
          10, -49, 10, -123, 10, -123, 10, -50,
          10, -67, 10, -50, 10, -79, 10, -49,
          10, -124, 10, -49, 10, -116, 10, -49,
          10, -124, 10, -50, 10, -73, 10, -49,
          10, -124, 10, -50, 10, -79, 10, 10,
          58, -50, 10, -79, 10, -50, 10, -71,
          10, -50, 10, -75, 10, -50, 10, -71,
          10, -49, 10, -124, 10, -50, 10, -65,
          10, -49, 10, -123, 10, -49, 10, -127,
          10, -50, 10, -77, 10, -50, 10, -81,
          10, -50, 10, -75, 10, -49, 10, -127,
          10, -50, 10, -71, 10, -50, 10, -77,
          10, -49, 10, -127, 10, -50, 10, -79,
          10, -49, 10, -122, 10, -50, 10, -82,
          10, 10, 32, -50, 10, -93, 10, -50,
          10, -75, 10, -50, 10, -67, 10, -50,
          10, -79, 10, -49, 10, -127, 10, -50,
          10, -81, 10, -50, 10, -65, 10, -49,
          10, -123, 10, -50, 10, -75, 10, -50,
          10, -67, 10, -50, 10, -84, 10, -49,
          10, -127, 10, -50, 10, -71, 10, -50,
          10, -65, 10, -49, 10, -116, 10, -49,
          10, -124, 10, -50, 10, -75, 10, 10,
          95, 10, 70, 10, 69, 10, 65, 10,
          84, 10, 85, 10, 82, 10, 69, 10,
          95, 10, 69, 10, 78, 10, 68, 10,
          95, 10, 37, -69, -65, 0
        ]

        class << self
          attr_accessor :_lexer_single_lengths
          private :_lexer_single_lengths, :_lexer_single_lengths=
        end
        self._lexer_single_lengths = [
          0, 10, 9, 1, 1, 1, 1, 1,
          1, 1, 2, 2, 9, 1, 1, 2,
          2, 3, 3, 3, 3, 2, 2, 2,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 3,
          5, 3, 2, 4, 3, 2, 4, 9,
          1, 1, 1, 1, 1, 1, 2, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 6, 6, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 9,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 2, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 5, 3,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 7, 8, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 2, 1, 1,
          1, 7, 10, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 7, 9, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          1, 1, 0
        ]

        class << self
          attr_accessor :_lexer_range_lengths
          private :_lexer_range_lengths, :_lexer_range_lengths=
        end
        self._lexer_range_lengths = [
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 0, 0, 0,
          0, 1, 1, 1, 1, 1, 1, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 1,
          1, 1, 1, 1, 0, 0, 1, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 1, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 1, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0
        ]

        class << self
          attr_accessor :_lexer_index_offsets
          private :_lexer_index_offsets, :_lexer_index_offsets=
        end
        self._lexer_index_offsets = [
          0, 0, 12, 22, 24, 26, 28, 30,
          32, 34, 36, 39, 42, 53, 55, 57,
          60, 63, 68, 73, 78, 83, 87, 91,
          94, 96, 98, 100, 102, 104, 106, 108,
          110, 112, 114, 116, 118, 120, 122, 124,
          129, 136, 141, 145, 151, 155, 158, 164,
          175, 177, 179, 181, 183, 185, 187, 190,
          192, 194, 196, 198, 200, 202, 204, 206,
          208, 210, 212, 214, 216, 218, 220, 222,
          224, 226, 228, 230, 232, 234, 236, 238,
          240, 242, 244, 246, 248, 250, 252, 254,
          256, 258, 260, 268, 275, 278, 281, 284,
          287, 290, 293, 296, 299, 302, 305, 308,
          311, 314, 317, 320, 323, 326, 329, 332,
          343, 346, 349, 352, 355, 358, 361, 364,
          367, 370, 373, 376, 379, 382, 385, 388,
          391, 394, 398, 401, 404, 407, 410, 413,
          416, 419, 422, 425, 428, 431, 434, 437,
          440, 443, 446, 449, 452, 455, 458, 461,
          464, 467, 470, 473, 476, 479, 482, 485,
          488, 491, 494, 497, 500, 503, 506, 509,
          512, 515, 518, 521, 524, 527, 530, 533,
          536, 539, 542, 545, 548, 551, 554, 557,
          560, 563, 566, 569, 572, 576, 579, 582,
          585, 588, 591, 594, 597, 600, 603, 606,
          609, 612, 615, 618, 621, 624, 627, 630,
          633, 636, 639, 642, 645, 648, 651, 654,
          657, 660, 662, 664, 666, 668, 670, 672,
          674, 676, 678, 680, 682, 684, 686, 688,
          690, 692, 694, 696, 698, 700, 702, 705,
          707, 709, 711, 713, 715, 717, 719, 721,
          723, 725, 727, 729, 731, 733, 735, 737,
          739, 741, 743, 745, 747, 749, 751, 758,
          762, 765, 768, 771, 774, 777, 780, 783,
          786, 789, 792, 795, 798, 801, 804, 807,
          810, 813, 816, 819, 822, 825, 828, 831,
          834, 837, 840, 843, 846, 849, 852, 855,
          858, 861, 864, 867, 869, 871, 873, 875,
          877, 879, 881, 883, 885, 887, 889, 891,
          893, 895, 897, 899, 901, 903, 905, 907,
          909, 911, 913, 915, 917, 919, 921, 923,
          925, 927, 929, 931, 933, 935, 944, 953,
          956, 959, 962, 965, 968, 971, 974, 977,
          980, 983, 986, 989, 992, 996, 999, 1002,
          1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026,
          1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050,
          1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074,
          1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098,
          1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122,
          1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146,
          1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170,
          1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194,
          1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218,
          1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242,
          1245, 1248, 1251, 1253, 1255, 1257, 1259, 1261,
          1263, 1265, 1267, 1269, 1271, 1273, 1276, 1278,
          1280, 1282, 1291, 1302, 1305, 1308, 1311, 1314,
          1317, 1320, 1323, 1326, 1329, 1332, 1335, 1338,
          1341, 1345, 1348, 1351, 1354, 1357, 1360, 1363,
          1366, 1369, 1372, 1375, 1378, 1381, 1384, 1387,
          1390, 1393, 1396, 1399, 1402, 1405, 1408, 1411,
          1414, 1417, 1420, 1423, 1426, 1429, 1432, 1435,
          1438, 1441, 1444, 1447, 1450, 1453, 1456, 1459,
          1462, 1465, 1468, 1471, 1474, 1477, 1480, 1483,
          1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507,
          1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531,
          1534, 1537, 1540, 1543, 1546, 1549, 1552, 1555,
          1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579,
          1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603,
          1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627,
          1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651,
          1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675,
          1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699,
          1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723,
          1726, 1729, 1732, 1735, 1737, 1739, 1741, 1743,
          1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759,
          1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775,
          1777, 1779, 1781, 1790, 1800, 1803, 1806, 1809,
          1812, 1815, 1818, 1821, 1824, 1827, 1830, 1833,
          1836, 1839, 1843, 1846, 1849, 1852, 1855, 1858,
          1861, 1864, 1867, 1870, 1873, 1876, 1879, 1882,
          1885, 1888, 1891, 1894, 1897, 1900, 1903, 1906,
          1909, 1912, 1915, 1918, 1921, 1924, 1927, 1930,
          1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954,
          1957, 1960, 1963, 1966, 1969, 1972, 1975, 1978,
          1981, 1984, 1987, 1990, 1993, 1996, 1999, 2002,
          2005, 2008, 2011, 2014, 2017, 2020, 2023, 2026,
          2029, 2032, 2035, 2038, 2041, 2044, 2047, 2050,
          2053, 2056, 2059, 2062, 2065, 2068, 2071, 2074,
          2077, 2080, 2083, 2086, 2089, 2092, 2095, 2098,
          2101, 2104, 2107, 2110, 2113, 2116, 2119, 2122,
          2125, 2128, 2131, 2134, 2137, 2140, 2143, 2146,
          2149, 2152, 2155, 2158, 2161, 2164, 2167, 2170,
          2173, 2176, 2179, 2182, 2185, 2188, 2191, 2194,
          2197, 2199, 2201
        ]

        class << self
          attr_accessor :_lexer_indicies
          private :_lexer_indicies, :_lexer_indicies=
        end
        self._lexer_indicies = [
          1, 2, 4, 3, 5, 6, 7, 8,
          9, 10, 3, 0, 11, 12, 13, 14,
          15, 16, 17, 18, 19, 0, 20, 0,
          21, 0, 22, 0, 23, 0, 24, 0,
          25, 0, 26, 0, 28, 29, 27, 31,
          32, 30, 1, 4, 3, 5, 6, 7,
          8, 9, 10, 3, 0, 33, 0, 34,
          0, 36, 37, 35, 39, 40, 38, 43,
          42, 44, 42, 41, 47, 46, 48, 46,
          45, 47, 46, 49, 46, 45, 47, 46,
          50, 46, 45, 52, 51, 51, 0, 4,
          53, 53, 0, 55, 56, 54, 4, 0,
          57, 0, 58, 0, 59, 0, 60, 0,
          61, 0, 62, 0, 63, 0, 64, 0,
          65, 0, 66, 0, 67, 0, 68, 0,
          69, 0, 70, 0, 0, 0, 0, 0,
          71, 72, 73, 72, 72, 75, 74, 71,
          4, 76, 9, 76, 0, 77, 78, 77,
          0, 81, 80, 82, 83, 80, 79, 0,
          85, 86, 84, 0, 85, 84, 81, 87,
          85, 86, 87, 84, 88, 81, 89, 90,
          91, 92, 93, 94, 95, 89, 0, 96,
          0, 97, 0, 98, 0, 99, 0, 100,
          0, 25, 0, 101, 102, 0, 103, 0,
          104, 0, 105, 0, 106, 0, 107, 0,
          108, 0, 109, 0, 110, 0, 111, 0,
          112, 0, 113, 0, 114, 0, 115, 0,
          116, 0, 25, 0, 117, 0, 118, 0,
          119, 0, 120, 0, 121, 0, 122, 0,
          123, 0, 124, 0, 125, 0, 126, 0,
          127, 0, 128, 0, 129, 0, 130, 0,
          131, 0, 132, 0, 133, 0, 134, 0,
          136, 135, 138, 137, 139, 138, 140, 141,
          142, 141, 140, 137, 143, 144, 145, 146,
          147, 138, 137, 148, 138, 137, 149, 138,
          137, 150, 138, 137, 151, 138, 137, 152,
          138, 137, 153, 138, 137, 154, 138, 137,
          155, 138, 137, 156, 138, 137, 157, 138,
          137, 158, 138, 137, 159, 138, 137, 160,
          138, 137, 161, 138, 137, 162, 138, 137,
          163, 138, 137, 164, 138, 137, 165, 138,
          137, 138, 166, 137, 167, 169, 168, 170,
          171, 172, 173, 174, 175, 168, 0, 176,
          138, 137, 177, 138, 137, 178, 138, 137,
          179, 138, 137, 180, 138, 137, 181, 138,
          137, 182, 138, 137, 183, 138, 137, 184,
          138, 137, 185, 138, 137, 186, 138, 137,
          187, 138, 137, 188, 138, 137, 189, 138,
          137, 190, 138, 137, 163, 138, 137, 191,
          138, 137, 192, 193, 138, 137, 194, 138,
          137, 195, 138, 137, 196, 138, 137, 197,
          138, 137, 198, 138, 137, 199, 138, 137,
          200, 138, 137, 201, 138, 137, 202, 138,
          137, 203, 138, 137, 204, 138, 137, 205,
          138, 137, 206, 138, 137, 207, 138, 137,
          208, 138, 137, 161, 138, 137, 209, 138,
          137, 210, 138, 137, 211, 138, 137, 212,
          138, 137, 213, 138, 137, 214, 138, 137,
          215, 138, 137, 216, 138, 137, 217, 138,
          137, 218, 138, 137, 219, 138, 137, 220,
          138, 137, 221, 138, 137, 222, 138, 137,
          138, 223, 137, 224, 138, 137, 225, 138,
          137, 226, 138, 137, 227, 138, 137, 228,
          138, 137, 229, 138, 137, 230, 138, 137,
          231, 138, 137, 232, 138, 137, 233, 138,
          137, 234, 138, 137, 235, 138, 137, 236,
          138, 137, 237, 138, 137, 238, 138, 137,
          165, 138, 137, 239, 138, 137, 240, 138,
          137, 241, 138, 137, 242, 138, 137, 243,
          138, 137, 244, 138, 137, 245, 138, 137,
          246, 138, 137, 247, 138, 137, 248, 138,
          137, 249, 138, 137, 165, 165, 138, 137,
          250, 138, 137, 251, 138, 137, 252, 138,
          137, 253, 138, 137, 254, 138, 137, 255,
          138, 137, 256, 138, 137, 257, 138, 137,
          258, 138, 137, 259, 138, 137, 260, 138,
          137, 261, 138, 137, 262, 138, 137, 165,
          138, 137, 138, 263, 137, 138, 264, 137,
          138, 265, 137, 138, 266, 137, 138, 267,
          137, 138, 268, 137, 138, 269, 137, 138,
          270, 137, 138, 271, 137, 138, 272, 137,
          138, 273, 137, 138, 274, 137, 138, 275,
          137, 138, 276, 137, 277, 0, 278, 0,
          279, 0, 25, 0, 280, 0, 281, 0,
          282, 0, 283, 0, 284, 0, 285, 0,
          286, 0, 287, 0, 288, 0, 289, 0,
          290, 0, 291, 0, 292, 0, 293, 0,
          294, 0, 131, 0, 295, 0, 296, 297,
          0, 298, 0, 299, 0, 300, 0, 301,
          0, 302, 0, 303, 0, 304, 0, 305,
          0, 306, 0, 307, 0, 308, 0, 309,
          0, 310, 0, 311, 0, 312, 0, 313,
          0, 314, 0, 315, 0, 316, 0, 317,
          0, 318, 0, 320, 319, 322, 321, 323,
          322, 324, 325, 325, 324, 321, 326, 327,
          322, 321, 328, 322, 321, 329, 322, 321,
          330, 322, 321, 331, 322, 321, 332, 322,
          321, 333, 322, 321, 334, 322, 321, 335,
          322, 321, 336, 322, 321, 337, 322, 321,
          338, 322, 321, 339, 322, 321, 340, 322,
          321, 341, 322, 321, 342, 322, 321, 343,
          322, 321, 344, 322, 321, 345, 322, 321,
          322, 346, 321, 347, 322, 321, 348, 322,
          321, 349, 322, 321, 350, 322, 321, 351,
          322, 321, 352, 322, 321, 353, 322, 321,
          354, 322, 321, 355, 322, 321, 356, 322,
          321, 357, 322, 321, 358, 322, 321, 359,
          322, 321, 360, 322, 321, 361, 322, 321,
          343, 322, 321, 362, 0, 363, 0, 364,
          0, 365, 0, 366, 0, 367, 0, 368,
          0, 369, 0, 370, 0, 371, 0, 372,
          0, 373, 0, 374, 0, 375, 0, 376,
          0, 377, 0, 378, 0, 379, 0, 380,
          0, 381, 0, 382, 0, 383, 0, 384,
          0, 385, 0, 386, 0, 387, 0, 388,
          0, 389, 0, 390, 0, 391, 0, 392,
          0, 393, 0, 395, 394, 397, 396, 398,
          397, 399, 400, 401, 402, 400, 399, 396,
          403, 404, 405, 406, 407, 408, 409, 397,
          396, 410, 397, 396, 411, 397, 396, 412,
          397, 396, 413, 397, 396, 414, 397, 396,
          415, 397, 396, 397, 416, 396, 417, 397,
          396, 418, 397, 396, 419, 397, 396, 420,
          397, 396, 421, 397, 396, 415, 397, 396,
          422, 423, 397, 396, 424, 397, 396, 425,
          397, 396, 426, 397, 396, 427, 397, 396,
          428, 397, 396, 429, 397, 396, 430, 397,
          396, 431, 397, 396, 432, 397, 396, 433,
          397, 396, 434, 397, 396, 435, 397, 396,
          436, 397, 396, 437, 397, 396, 415, 397,
          396, 438, 397, 396, 439, 397, 396, 440,
          397, 396, 441, 397, 396, 442, 397, 396,
          443, 397, 396, 444, 397, 396, 445, 397,
          396, 446, 397, 396, 447, 397, 396, 448,
          397, 396, 449, 397, 396, 450, 397, 396,
          451, 397, 396, 452, 397, 396, 453, 397,
          396, 454, 397, 396, 397, 416, 396, 455,
          397, 396, 456, 397, 396, 457, 397, 396,
          415, 397, 396, 458, 397, 396, 459, 397,
          396, 460, 397, 396, 461, 397, 396, 462,
          397, 396, 463, 397, 396, 464, 397, 396,
          465, 397, 396, 466, 397, 396, 467, 397,
          396, 468, 397, 396, 469, 397, 396, 470,
          397, 396, 471, 397, 396, 472, 397, 396,
          452, 397, 396, 473, 397, 396, 474, 397,
          396, 475, 397, 396, 476, 397, 396, 477,
          397, 396, 478, 397, 396, 479, 397, 396,
          480, 397, 396, 481, 397, 396, 482, 397,
          396, 483, 397, 396, 454, 397, 396, 484,
          397, 396, 485, 397, 396, 486, 397, 396,
          487, 397, 396, 488, 397, 396, 415, 397,
          396, 397, 489, 396, 397, 490, 396, 397,
          491, 396, 397, 492, 396, 397, 493, 396,
          397, 494, 396, 397, 495, 396, 397, 496,
          396, 397, 497, 396, 397, 498, 396, 397,
          499, 396, 397, 500, 396, 397, 501, 396,
          397, 502, 396, 503, 0, 504, 0, 505,
          0, 506, 0, 507, 0, 508, 0, 509,
          0, 510, 0, 511, 0, 512, 0, 513,
          0, 317, 514, 0, 515, 0, 517, 516,
          519, 518, 520, 519, 521, 522, 523, 524,
          522, 521, 518, 525, 526, 527, 528, 529,
          530, 531, 532, 533, 519, 518, 534, 519,
          518, 535, 519, 518, 536, 519, 518, 537,
          519, 518, 538, 519, 518, 539, 519, 518,
          519, 540, 518, 541, 519, 518, 542, 519,
          518, 543, 519, 518, 544, 519, 518, 545,
          519, 518, 539, 519, 518, 546, 547, 519,
          518, 548, 519, 518, 549, 519, 518, 550,
          519, 518, 551, 519, 518, 552, 519, 518,
          553, 519, 518, 554, 519, 518, 555, 519,
          518, 556, 519, 518, 557, 519, 518, 558,
          519, 518, 559, 519, 518, 560, 519, 518,
          561, 519, 518, 539, 519, 518, 562, 519,
          518, 563, 519, 518, 564, 519, 518, 565,
          519, 518, 566, 519, 518, 567, 519, 518,
          568, 519, 518, 569, 519, 518, 570, 519,
          518, 571, 519, 518, 572, 519, 518, 573,
          519, 518, 574, 519, 518, 575, 519, 518,
          576, 519, 518, 577, 519, 518, 578, 519,
          518, 519, 540, 518, 579, 519, 518, 580,
          519, 518, 581, 519, 518, 539, 519, 518,
          582, 519, 518, 583, 519, 518, 584, 519,
          518, 585, 519, 518, 586, 519, 518, 587,
          519, 518, 588, 519, 518, 589, 519, 518,
          590, 519, 518, 591, 519, 518, 592, 519,
          518, 593, 519, 518, 594, 519, 518, 595,
          519, 518, 596, 519, 518, 576, 519, 518,
          597, 519, 518, 598, 519, 518, 599, 519,
          518, 600, 519, 518, 601, 519, 518, 602,
          519, 518, 603, 519, 518, 604, 519, 518,
          605, 519, 518, 606, 519, 518, 607, 519,
          518, 608, 519, 518, 609, 519, 518, 610,
          519, 518, 611, 519, 518, 612, 519, 518,
          519, 613, 518, 614, 519, 518, 615, 519,
          518, 616, 519, 518, 617, 519, 518, 618,
          519, 518, 619, 519, 518, 620, 519, 518,
          621, 519, 518, 622, 519, 518, 623, 519,
          518, 624, 519, 518, 625, 519, 518, 626,
          519, 518, 627, 519, 518, 628, 519, 518,
          578, 519, 518, 629, 519, 518, 630, 519,
          518, 631, 519, 518, 632, 519, 518, 633,
          519, 518, 634, 519, 518, 635, 519, 518,
          636, 519, 518, 637, 519, 518, 638, 519,
          518, 639, 519, 518, 578, 519, 518, 640,
          519, 518, 641, 519, 518, 642, 519, 518,
          643, 519, 518, 644, 519, 518, 539, 519,
          518, 645, 519, 518, 646, 519, 518, 647,
          519, 518, 648, 519, 518, 649, 519, 518,
          650, 519, 518, 651, 519, 518, 652, 519,
          518, 653, 519, 518, 654, 519, 518, 655,
          519, 518, 638, 519, 518, 519, 656, 518,
          519, 657, 518, 519, 658, 518, 519, 659,
          518, 519, 660, 518, 519, 661, 518, 519,
          662, 518, 519, 663, 518, 519, 664, 518,
          519, 665, 518, 519, 666, 518, 519, 667,
          518, 519, 668, 518, 519, 669, 518, 670,
          0, 671, 0, 672, 0, 673, 0, 674,
          0, 25, 0, 675, 0, 676, 0, 677,
          0, 678, 0, 679, 0, 680, 0, 681,
          0, 682, 0, 683, 0, 684, 0, 685,
          0, 686, 0, 687, 0, 688, 0, 689,
          0, 691, 690, 693, 692, 694, 693, 695,
          696, 697, 698, 696, 695, 692, 699, 700,
          701, 702, 703, 704, 705, 706, 693, 692,
          707, 693, 692, 708, 693, 692, 709, 693,
          692, 710, 693, 692, 711, 693, 692, 712,
          693, 692, 693, 713, 692, 714, 693, 692,
          715, 693, 692, 716, 693, 692, 717, 693,
          692, 718, 693, 692, 712, 693, 692, 719,
          720, 693, 692, 721, 693, 692, 722, 693,
          692, 723, 693, 692, 724, 693, 692, 725,
          693, 692, 726, 693, 692, 727, 693, 692,
          728, 693, 692, 729, 693, 692, 730, 693,
          692, 731, 693, 692, 732, 693, 692, 733,
          693, 692, 734, 693, 692, 712, 693, 692,
          735, 693, 692, 736, 693, 692, 737, 693,
          692, 738, 693, 692, 739, 693, 692, 740,
          693, 692, 741, 693, 692, 742, 693, 692,
          743, 693, 692, 744, 693, 692, 745, 693,
          692, 746, 693, 692, 747, 693, 692, 748,
          693, 692, 749, 693, 692, 750, 693, 692,
          751, 693, 692, 693, 713, 692, 752, 693,
          692, 753, 693, 692, 754, 693, 692, 712,
          693, 692, 755, 693, 692, 756, 693, 692,
          757, 693, 692, 758, 693, 692, 759, 693,
          692, 760, 693, 692, 761, 693, 692, 762,
          693, 692, 763, 693, 692, 764, 693, 692,
          765, 693, 692, 766, 693, 692, 767, 693,
          692, 768, 693, 692, 769, 693, 692, 749,
          693, 692, 770, 693, 692, 771, 693, 692,
          772, 693, 692, 773, 693, 692, 774, 693,
          692, 775, 693, 692, 776, 693, 692, 777,
          693, 692, 778, 693, 692, 779, 693, 692,
          780, 693, 692, 781, 693, 692, 782, 693,
          692, 783, 693, 692, 784, 693, 692, 785,
          693, 692, 693, 786, 692, 787, 693, 692,
          788, 693, 692, 789, 693, 692, 790, 693,
          692, 791, 693, 692, 792, 693, 692, 793,
          693, 692, 794, 693, 692, 795, 693, 692,
          796, 693, 692, 797, 693, 692, 798, 693,
          692, 799, 693, 692, 800, 693, 692, 801,
          693, 692, 751, 693, 692, 802, 693, 692,
          803, 693, 692, 804, 693, 692, 805, 693,
          692, 806, 693, 692, 807, 693, 692, 808,
          693, 692, 809, 693, 692, 810, 693, 692,
          811, 693, 692, 812, 693, 692, 751, 693,
          692, 813, 693, 692, 814, 693, 692, 815,
          693, 692, 816, 693, 692, 817, 693, 692,
          712, 693, 692, 693, 818, 692, 693, 819,
          692, 693, 820, 692, 693, 821, 692, 693,
          822, 692, 693, 823, 692, 693, 824, 692,
          693, 825, 692, 693, 826, 692, 693, 827,
          692, 693, 828, 692, 693, 829, 692, 693,
          830, 692, 693, 831, 692, 832, 0, 3,
          0, 833, 0
        ]

        class << self
          attr_accessor :_lexer_trans_targs
          private :_lexer_trans_targs, :_lexer_trans_targs=
        end
        self._lexer_trans_targs = [
          0, 2, 752, 12, 12, 13, 23, 25,
          9, 39, 42, 3, 48, 54, 217, 221,
          237, 434, 595, 601, 4, 5, 6, 7,
          8, 9, 10, 11, 12, 24, 11, 12,
          24, 14, 15, 16, 17, 16, 16, 17,
          16, 18, 18, 18, 19, 18, 18, 18,
          19, 20, 21, 22, 12, 22, 23, 12,
          24, 26, 27, 28, 29, 30, 31, 32,
          33, 34, 35, 36, 37, 38, 754, 40,
          41, 12, 40, 39, 41, 42, 43, 44,
          46, 47, 45, 43, 44, 45, 43, 46,
          2, 47, 13, 23, 25, 9, 39, 42,
          49, 50, 51, 52, 53, 55, 70, 56,
          57, 58, 59, 60, 61, 62, 63, 64,
          65, 66, 67, 68, 69, 71, 72, 73,
          74, 75, 76, 77, 78, 79, 80, 81,
          82, 83, 84, 85, 86, 87, 88, 89,
          90, 89, 90, 91, 90, 12, 203, 92,
          112, 128, 177, 189, 93, 94, 95, 96,
          97, 98, 99, 100, 101, 102, 103, 104,
          105, 106, 107, 108, 109, 110, 111, 2,
          12, 12, 13, 23, 25, 9, 39, 42,
          113, 114, 115, 116, 117, 118, 119, 120,
          121, 122, 123, 124, 125, 126, 127, 129,
          130, 146, 131, 132, 133, 134, 135, 136,
          137, 138, 139, 140, 141, 142, 143, 144,
          145, 147, 148, 149, 150, 151, 152, 153,
          154, 155, 156, 157, 158, 159, 160, 161,
          162, 163, 164, 165, 166, 167, 168, 169,
          170, 171, 172, 173, 174, 175, 176, 178,
          179, 180, 181, 182, 183, 184, 185, 186,
          187, 188, 190, 191, 192, 193, 194, 195,
          196, 197, 198, 199, 200, 201, 202, 204,
          205, 206, 207, 208, 209, 210, 211, 212,
          213, 214, 215, 216, 12, 218, 219, 220,
          222, 223, 224, 225, 226, 227, 228, 229,
          230, 231, 232, 233, 234, 235, 236, 238,
          239, 299, 240, 241, 242, 243, 244, 245,
          246, 247, 248, 249, 250, 251, 252, 253,
          254, 255, 256, 257, 258, 259, 260, 261,
          262, 261, 262, 263, 262, 12, 264, 283,
          265, 266, 267, 268, 269, 270, 271, 272,
          273, 274, 275, 276, 277, 278, 279, 280,
          281, 282, 111, 284, 285, 286, 287, 288,
          289, 290, 291, 292, 293, 294, 295, 296,
          297, 298, 300, 301, 302, 303, 304, 305,
          306, 307, 308, 309, 310, 311, 312, 313,
          314, 315, 316, 317, 318, 319, 320, 321,
          322, 323, 324, 325, 326, 327, 328, 329,
          330, 331, 332, 333, 332, 333, 334, 333,
          12, 420, 341, 335, 342, 348, 382, 386,
          402, 414, 336, 337, 338, 339, 340, 341,
          111, 343, 344, 345, 346, 347, 349, 364,
          350, 351, 352, 353, 354, 355, 356, 357,
          358, 359, 360, 361, 362, 363, 365, 366,
          367, 368, 369, 370, 371, 372, 373, 374,
          375, 376, 377, 378, 379, 380, 381, 383,
          384, 385, 387, 388, 389, 390, 391, 392,
          393, 394, 395, 396, 397, 398, 399, 400,
          401, 403, 404, 405, 406, 407, 408, 409,
          410, 411, 412, 413, 415, 416, 417, 418,
          419, 421, 422, 423, 424, 425, 426, 427,
          428, 429, 430, 431, 432, 433, 12, 435,
          436, 437, 438, 439, 440, 441, 442, 443,
          444, 445, 446, 447, 448, 449, 448, 449,
          450, 449, 12, 581, 457, 451, 458, 464,
          498, 502, 518, 551, 563, 569, 452, 453,
          454, 455, 456, 457, 111, 459, 460, 461,
          462, 463, 465, 480, 466, 467, 468, 469,
          470, 471, 472, 473, 474, 475, 476, 477,
          478, 479, 481, 482, 483, 484, 485, 486,
          487, 488, 489, 490, 491, 492, 493, 494,
          495, 496, 497, 499, 500, 501, 503, 504,
          505, 506, 507, 508, 509, 510, 511, 512,
          513, 514, 515, 516, 517, 519, 520, 521,
          522, 523, 524, 525, 526, 527, 528, 529,
          530, 531, 532, 533, 534, 535, 536, 537,
          538, 539, 540, 541, 542, 543, 544, 545,
          546, 547, 548, 549, 550, 552, 553, 554,
          555, 556, 557, 558, 559, 560, 561, 562,
          564, 565, 566, 567, 568, 570, 571, 572,
          573, 574, 575, 576, 577, 578, 579, 580,
          582, 583, 584, 585, 586, 587, 588, 589,
          590, 591, 592, 593, 594, 12, 596, 597,
          598, 599, 600, 602, 603, 604, 605, 606,
          607, 608, 609, 610, 611, 612, 613, 614,
          615, 616, 617, 618, 617, 618, 619, 618,
          12, 738, 626, 620, 627, 633, 667, 671,
          687, 720, 732, 621, 622, 623, 624, 625,
          626, 111, 628, 629, 630, 631, 632, 634,
          649, 635, 636, 637, 638, 639, 640, 641,
          642, 643, 644, 645, 646, 647, 648, 650,
          651, 652, 653, 654, 655, 656, 657, 658,
          659, 660, 661, 662, 663, 664, 665, 666,
          668, 669, 670, 672, 673, 674, 675, 676,
          677, 678, 679, 680, 681, 682, 683, 684,
          685, 686, 688, 689, 690, 691, 692, 693,
          694, 695, 696, 697, 698, 699, 700, 701,
          702, 703, 704, 705, 706, 707, 708, 709,
          710, 711, 712, 713, 714, 715, 716, 717,
          718, 719, 721, 722, 723, 724, 725, 726,
          727, 728, 729, 730, 731, 733, 734, 735,
          736, 737, 739, 740, 741, 742, 743, 744,
          745, 746, 747, 748, 749, 750, 751, 12,
          753, 0
        ]

        class << self
          attr_accessor :_lexer_trans_actions
          private :_lexer_trans_actions, :_lexer_trans_actions=
        end
        self._lexer_trans_actions = [
          43, 29, 0, 0, 54, 3, 1, 0,
          29, 1, 35, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 57, 149, 126, 0, 110,
          23, 0, 0, 7, 139, 48, 0, 102,
          9, 5, 45, 134, 45, 0, 33, 122,
          33, 33, 0, 11, 106, 0, 0, 114,
          25, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          27, 118, 27, 51, 0, 0, 0, 37,
          37, 54, 37, 87, 0, 0, 39, 0,
          96, 0, 93, 90, 41, 96, 90, 99,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 84, 0, 69, 33, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 13, 63,
          31, 130, 60, 57, 31, 63, 57, 66,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 13, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 84, 0, 81, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 21, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 144, 0, 54, 84, 0,
          78, 33, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          19, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 19, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 57, 144, 0, 54,
          84, 0, 75, 33, 84, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 17, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 17, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 144, 0, 54, 84, 0,
          72, 33, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 15, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 15,
          0, 0
        ]

        class << self
          attr_accessor :_lexer_eof_actions
          private :_lexer_eof_actions, :_lexer_eof_actions=
        end
        self._lexer_eof_actions = [
          0, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43
        ]

        class << self
          attr_accessor :lexer_start
        end
        self.lexer_start = 1;
        class << self
          attr_accessor :lexer_first_final
        end
        self.lexer_first_final = 754;
        class << self
          attr_accessor :lexer_error
        end
        self.lexer_error = 0;

        class << self
          attr_accessor :lexer_en_main
        end
        self.lexer_en_main = 1;


        # line 133 "ragel/i18n/el.rb.rl"
      end

      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length

        @line_number = 1
        @last_newline = 0


        # line 1287 "lib/gherkin/lexer/el.rb"
        begin
          p ||= 0
          pe ||= data.length
          cs = lexer_start
        end

        # line 143 "ragel/i18n/el.rb.rl"

        # line 1296 "lib/gherkin/lexer/el.rb"
        begin
          _klen, _trans, _keys, _acts, _nacts = nil
          _goto_level = 0
          _resume = 10
          _eof_trans = 15
          _again = 20
          _test_eof = 30
          _out = 40
          while true
            _trigger_goto = false
            if _goto_level <= 0
              if p == pe
                _goto_level = _test_eof
                next
              end
              if cs == 0
                _goto_level = _out
                next
              end
            end
            if _goto_level <= _resume
              _keys = _lexer_key_offsets[cs]
              _trans = _lexer_index_offsets[cs]
              _klen = _lexer_single_lengths[cs]
              _break_match = false

              begin
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + _klen - 1

                  loop do
                    break if _upper < _lower
                    _mid = _lower + ( (_upper - _lower) >> 1 )

                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 1
                    elsif data[p].ord > _lexer_trans_keys[_mid]
                      _lower = _mid + 1
                    else
                      _trans += (_mid - _keys)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _keys += _klen
                  _trans += _klen
                end
                _klen = _lexer_range_lengths[cs]
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + (_klen << 1) - 2
                  loop do
                    break if _upper < _lower
                    _mid = _lower + (((_upper-_lower) >> 1) & ~1)
                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 2
                    elsif data[p].ord > _lexer_trans_keys[_mid+1]
                      _lower = _mid + 2
                    else
                      _trans += ((_mid - _keys) >> 1)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _trans += _klen
                end
              end while false
              _trans = _lexer_indicies[_trans]
              cs = _lexer_trans_targs[_trans]
              if _lexer_trans_actions[_trans] != 0
                _acts = _lexer_trans_actions[_trans]
                _nacts = _lexer_actions[_acts]
                _acts += 1
                while _nacts > 0
                  _nacts -= 1
                  _acts += 1
                  case _lexer_actions[_acts - 1]
                  when 0 then
                    # line 11 "ragel/i18n/el.rb.rl"
                    begin

                      @content_start = p
                      @current_line = @line_number
                      @start_col = p - @last_newline - "#{@keyword}:".length
                    end
                  when 1 then
                    # line 17 "ragel/i18n/el.rb.rl"
                    begin

                      @current_line = @line_number
                      @start_col = p - @last_newline
                    end
                  when 2 then
                    # line 22 "ragel/i18n/el.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 3 then
                    # line 26 "ragel/i18n/el.rb.rl"
                    begin

                      @docstring_content_type_start = p
                    end
                  when 4 then
                    # line 29 "ragel/i18n/el.rb.rl"
                    begin

                      @docstring_content_type_end = p
                    end
                  when 5 then
                    # line 33 "ragel/i18n/el.rb.rl"
                    begin

                      con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
                      con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
                      @listener.doc_string(con_type, con, @current_line)
                    end
                  when 6 then
                    # line 38 "ragel/i18n/el.rb.rl"
                    begin

                      p = store_keyword_content(:feature, data, p, eof)
                    end
                  when 7 then
                    # line 42 "ragel/i18n/el.rb.rl"
                    begin

                      p = store_keyword_content(:background, data, p, eof)
                    end
                  when 8 then
                    # line 46 "ragel/i18n/el.rb.rl"
                    begin

                      p = store_keyword_content(:scenario, data, p, eof)
                    end
                  when 9 then
                    # line 50 "ragel/i18n/el.rb.rl"
                    begin

                      p = store_keyword_content(:scenario_outline, data, p, eof)
                    end
                  when 10 then
                    # line 54 "ragel/i18n/el.rb.rl"
                    begin

                      p = store_keyword_content(:examples, data, p, eof)
                    end
                  when 11 then
                    # line 58 "ragel/i18n/el.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.step(@keyword, con, @current_line)
                    end
                  when 12 then
                    # line 63 "ragel/i18n/el.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.comment(con, @line_number)
                      @keyword_start = nil
                    end
                  when 13 then
                    # line 69 "ragel/i18n/el.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.tag(con, @current_line)
                      @keyword_start = nil
                    end
                  when 14 then
                    # line 75 "ragel/i18n/el.rb.rl"
                    begin

                      @line_number += 1
                    end
                  when 15 then
                    # line 79 "ragel/i18n/el.rb.rl"
                    begin

                      @last_newline = p + 1
                    end
                  when 16 then
                    # line 83 "ragel/i18n/el.rb.rl"
                    begin

                      @keyword_start ||= p
                    end
                  when 17 then
                    # line 87 "ragel/i18n/el.rb.rl"
                    begin

                      @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
                      @keyword_start = nil
                    end
                  when 18 then
                    # line 92 "ragel/i18n/el.rb.rl"
                    begin

                      @next_keyword_start = p
                    end
                  when 19 then
                    # line 96 "ragel/i18n/el.rb.rl"
                    begin

                      p = p - 1
                      current_row = []
                      @current_line = @line_number
                    end
                  when 20 then
                    # line 102 "ragel/i18n/el.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 21 then
                    # line 106 "ragel/i18n/el.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
                    end
                  when 22 then
                    # line 111 "ragel/i18n/el.rb.rl"
                    begin

                      @listener.row(current_row, @current_line)
                    end
                  when 23 then
                    # line 115 "ragel/i18n/el.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1540 "lib/gherkin/lexer/el.rb"
                  end # action switch
                end
              end
              if _trigger_goto
                next
              end
            end
            if _goto_level <= _again
              if cs == 0
                _goto_level = _out
                next
              end
              p += 1
              if p != pe
                _goto_level = _resume
                next
              end
            end
            if _goto_level <= _test_eof
              if p == eof
                __acts = _lexer_eof_actions[cs]
                __nacts =  _lexer_actions[__acts]
                __acts += 1
                while __nacts > 0
                  __nacts -= 1
                  __acts += 1
                  case _lexer_actions[__acts - 1]
                  when 23 then
                    # line 115 "ragel/i18n/el.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1579 "lib/gherkin/lexer/el.rb"
                  end # eof action switch
                end
                if _trigger_goto
                  next
                end
              end
            end
            if _goto_level <= _out
              break
            end
          end
        end

        # line 144 "ragel/i18n/el.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end

      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9|2\.0/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
