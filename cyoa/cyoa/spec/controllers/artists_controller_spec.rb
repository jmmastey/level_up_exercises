# require 'rails_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.

# RSpec.describe ArtistSlugsController, :type => :controller do

#   # This should return the minimal set of attributes required to create a valid
#   # ArtistSlug. As you add validations to ArtistSlug, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) {
#     skip("Add a hash of attributes valid for your model")
#   }

#   let(:invalid_attributes) {
#     skip("Add a hash of attributes invalid for your model")
#   }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # ArtistSlugsController. Be sure to keep this updated too.
#   let(:valid_session) { {} }

#   describe "GET index" do
#     it "assigns all artist_slugs as @artist_slugs" do
#       artist_slug = ArtistSlug.create! valid_attributes
#       get :index, {}, valid_session
#       expect(assigns(:artist_slugs)).to eq([artist_slug])
#     end
#   end

#   describe "GET show" do
#     it "assigns the requested artist_slug as @artist_slug" do
#       artist_slug = ArtistSlug.create! valid_attributes
#       get :show, {:id => artist_slug.to_param}, valid_session
#       expect(assigns(:artist_slug)).to eq(artist_slug)
#     end
#   end

#   describe "GET new" do
#     it "assigns a new artist_slug as @artist_slug" do
#       get :new, {}, valid_session
#       expect(assigns(:artist_slug)).to be_a_new(ArtistSlug)
#     end
#   end

#   describe "GET edit" do
#     it "assigns the requested artist_slug as @artist_slug" do
#       artist_slug = ArtistSlug.create! valid_attributes
#       get :edit, {:id => artist_slug.to_param}, valid_session
#       expect(assigns(:artist_slug)).to eq(artist_slug)
#     end
#   end

#   describe "POST create" do
#     describe "with valid params" do
#       it "creates a new ArtistSlug" do
#         expect {
#           post :create, {:artist_slug => valid_attributes}, valid_session
#         }.to change(ArtistSlug, :count).by(1)
#       end

#       it "assigns a newly created artist_slug as @artist_slug" do
#         post :create, {:artist_slug => valid_attributes}, valid_session
#         expect(assigns(:artist_slug)).to be_a(ArtistSlug)
#         expect(assigns(:artist_slug)).to be_persisted
#       end

#       it "redirects to the created artist_slug" do
#         post :create, {:artist_slug => valid_attributes}, valid_session
#         expect(response).to redirect_to(ArtistSlug.last)
#       end
#     end

#     describe "with invalid params" do
#       it "assigns a newly created but unsaved artist_slug as @artist_slug" do
#         post :create, {:artist_slug => invalid_attributes}, valid_session
#         expect(assigns(:artist_slug)).to be_a_new(ArtistSlug)
#       end

#       it "re-renders the 'new' template" do
#         post :create, {:artist_slug => invalid_attributes}, valid_session
#         expect(response).to render_template("new")
#       end
#     end
#   end

#   describe "PUT update" do
#     describe "with valid params" do
#       let(:new_attributes) {
#         skip("Add a hash of attributes valid for your model")
#       }

#       it "updates the requested artist_slug" do
#         artist_slug = ArtistSlug.create! valid_attributes
#         put :update, {:id => artist_slug.to_param, :artist_slug => new_attributes}, valid_session
#         artist_slug.reload
#         skip("Add assertions for updated state")
#       end

#       it "assigns the requested artist_slug as @artist_slug" do
#         artist_slug = ArtistSlug.create! valid_attributes
#         put :update, {:id => artist_slug.to_param, :artist_slug => valid_attributes}, valid_session
#         expect(assigns(:artist_slug)).to eq(artist_slug)
#       end

#       it "redirects to the artist_slug" do
#         artist_slug = ArtistSlug.create! valid_attributes
#         put :update, {:id => artist_slug.to_param, :artist_slug => valid_attributes}, valid_session
#         expect(response).to redirect_to(artist_slug)
#       end
#     end

#     describe "with invalid params" do
#       it "assigns the artist_slug as @artist_slug" do
#         artist_slug = ArtistSlug.create! valid_attributes
#         put :update, {:id => artist_slug.to_param, :artist_slug => invalid_attributes}, valid_session
#         expect(assigns(:artist_slug)).to eq(artist_slug)
#       end

#       it "re-renders the 'edit' template" do
#         artist_slug = ArtistSlug.create! valid_attributes
#         put :update, {:id => artist_slug.to_param, :artist_slug => invalid_attributes}, valid_session
#         expect(response).to render_template("edit")
#       end
#     end
#   end

#   describe "DELETE destroy" do
#     it "destroys the requested artist_slug" do
#       artist_slug = ArtistSlug.create! valid_attributes
#       expect {
#         delete :destroy, {:id => artist_slug.to_param}, valid_session
#       }.to change(ArtistSlug, :count).by(-1)
#     end

#     it "redirects to the artist_slugs list" do
#       artist_slug = ArtistSlug.create! valid_attributes
#       delete :destroy, {:id => artist_slug.to_param}, valid_session
#       expect(response).to redirect_to(artist_slugs_url)
#     end
#   end

# end
