
# line 1 "ragel/i18n/de.rb.rl"
require 'gherkin/native'

module Gherkin
  module Lexer
    class De #:nodoc:
      native_impl('gherkin')


      # line 125 "ragel/i18n/de.rb.rl"


      def initialize(listener)
        @listener = listener

        # Initialize ivars to avoid warnings
        @keyword = nil

        # line 21 "lib/gherkin/lexer/de.rb"
        class << self
          attr_accessor :_lexer_actions
          private :_lexer_actions, :_lexer_actions=
        end
        self._lexer_actions = [
          0, 1, 0, 1, 1, 1, 2, 1,
          3, 1, 4, 1, 5, 1, 6, 1,
          7, 1, 8, 1, 9, 1, 10, 1,
          11, 1, 12, 1, 13, 1, 16, 1,
          17, 1, 18, 1, 19, 1, 20, 1,
          21, 1, 22, 1, 23, 2, 2, 18,
          2, 3, 4, 2, 13, 0, 2, 14,
          15, 2, 17, 0, 2, 17, 1, 2,
          17, 16, 2, 17, 19, 2, 18, 6,
          2, 18, 7, 2, 18, 8, 2, 18,
          9, 2, 18, 10, 2, 18, 16, 2,
          20, 21, 2, 22, 0, 2, 22, 1,
          2, 22, 16, 2, 22, 19, 3, 4,
          14, 15, 3, 5, 14, 15, 3, 11,
          14, 15, 3, 12, 14, 15, 3, 13,
          14, 15, 3, 14, 15, 18, 3, 17,
          0, 11, 3, 17, 14, 15, 4, 2,
          14, 15, 18, 4, 3, 4, 14, 15,
          4, 17, 0, 14, 15, 5, 17, 0,
          11, 14, 15
        ]

        class << self
          attr_accessor :_lexer_key_offsets
          private :_lexer_key_offsets, :_lexer_key_offsets=
        end
        self._lexer_key_offsets = [
          0, 0, 19, 20, 21, 39, 40, 41,
          43, 45, 50, 55, 60, 65, 69, 73,
          75, 76, 77, 78, 79, 80, 81, 82,
          83, 84, 85, 86, 87, 88, 89, 90,
          91, 93, 95, 100, 107, 112, 114, 115,
          116, 117, 118, 119, 120, 121, 122, 123,
          124, 125, 126, 127, 128, 129, 130, 131,
          132, 133, 134, 135, 142, 144, 146, 148,
          150, 152, 154, 156, 158, 160, 162, 164,
          166, 168, 170, 172, 190, 191, 192, 193,
          194, 195, 196, 197, 198, 199, 200, 201,
          202, 203, 204, 205, 206, 207, 208, 209,
          220, 222, 224, 226, 228, 230, 232, 234,
          236, 238, 240, 242, 244, 246, 248, 250,
          252, 254, 256, 258, 260, 262, 264, 266,
          268, 270, 272, 274, 276, 278, 280, 282,
          284, 286, 288, 290, 292, 294, 296, 298,
          300, 302, 304, 306, 308, 310, 312, 314,
          316, 318, 320, 322, 325, 327, 329, 331,
          333, 335, 337, 339, 341, 343, 344, 345,
          346, 347, 348, 349, 350, 351, 352, 354,
          355, 356, 357, 358, 359, 360, 361, 362,
          363, 364, 379, 381, 383, 385, 387, 389,
          391, 393, 395, 397, 399, 401, 403, 405,
          407, 409, 412, 414, 416, 418, 420, 422,
          424, 426, 428, 430, 432, 434, 436, 438,
          440, 442, 444, 446, 448, 450, 452, 454,
          456, 458, 460, 462, 464, 466, 468, 470,
          472, 474, 476, 478, 480, 482, 484, 486,
          489, 491, 493, 495, 497, 499, 501, 503,
          506, 508, 510, 512, 514, 516, 518, 520,
          522, 524, 526, 528, 529, 530, 531, 532,
          533, 534, 535, 537, 538, 539, 554, 556,
          558, 560, 562, 564, 566, 568, 570, 572,
          574, 576, 578, 580, 582, 584, 587, 589,
          591, 593, 595, 597, 599, 601, 603, 605,
          607, 609, 611, 613, 615, 617, 619, 621,
          623, 625, 627, 629, 631, 633, 635, 637,
          639, 641, 644, 646, 648, 650, 652, 654,
          656, 658, 660, 662, 665, 667, 669, 671,
          673, 675, 677, 679, 681, 683, 685, 687,
          689, 691, 693, 696, 698, 700, 702, 704,
          706, 708, 710, 712, 714, 716, 718, 719,
          720, 721, 722, 723, 724, 725, 726, 727,
          728, 729, 744, 746, 748, 750, 752, 754,
          756, 758, 760, 762, 764, 766, 768, 770,
          772, 774, 777, 779, 781, 783, 785, 787,
          789, 791, 793, 795, 797, 799, 801, 803,
          805, 807, 809, 811, 813, 815, 817, 819,
          821, 823, 825, 827, 829, 831, 833, 835,
          837, 839, 841, 843, 845, 847, 849, 851,
          854, 856, 858, 860, 862, 864, 866, 868,
          870, 872, 874, 875, 876, 877, 881, 887,
          890, 892, 898, 916
        ]

        class << self
          attr_accessor :_lexer_trans_keys
          private :_lexer_trans_keys, :_lexer_trans_keys=
        end
        self._lexer_trans_keys = [
          -17, 10, 32, 34, 35, 37, 42, 64,
          65, 66, 68, 70, 71, 83, 85, 87,
          124, 9, 13, -69, -65, 10, 32, 34,
          35, 37, 42, 64, 65, 66, 68, 70,
          71, 83, 85, 87, 124, 9, 13, 34,
          34, 10, 13, 10, 13, 10, 32, 34,
          9, 13, 10, 32, 34, 9, 13, 10,
          32, 34, 9, 13, 10, 32, 34, 9,
          13, 10, 32, 9, 13, 10, 32, 9,
          13, 10, 13, 10, 95, 70, 69, 65,
          84, 85, 82, 69, 95, 69, 78, 68,
          95, 37, 32, 10, 13, 10, 13, 13,
          32, 64, 9, 10, 9, 10, 13, 32,
          64, 11, 12, 10, 32, 64, 9, 13,
          98, 110, 101, 114, 103, 101, 110, 111,
          109, 109, 101, 110, 101, 105, 115, 112,
          105, 101, 108, 101, 58, 10, 10, 10,
          32, 35, 70, 124, 9, 13, 10, 117,
          10, 110, 10, 107, 10, 116, 10, 105,
          10, 111, 10, 110, 10, 97, 10, 108,
          10, 105, 10, 116, -61, 10, -92, 10,
          10, 116, 10, 58, 10, 32, 34, 35,
          37, 42, 64, 65, 66, 68, 70, 71,
          83, 85, 87, 124, 9, 13, 97, 110,
          117, 110, 107, 116, 105, 111, 110, 97,
          108, 105, 116, -61, -92, 116, 58, 10,
          10, 10, 32, 35, 37, 64, 66, 70,
          71, 83, 9, 13, 10, 95, 10, 70,
          10, 69, 10, 65, 10, 84, 10, 85,
          10, 82, 10, 69, 10, 95, 10, 69,
          10, 78, 10, 68, 10, 95, 10, 37,
          10, 101, 10, 105, 10, 115, 10, 112,
          10, 105, 10, 101, 10, 108, 10, 101,
          10, 58, 10, 117, 10, 110, 10, 107,
          10, 116, 10, 105, 10, 111, 10, 110,
          10, 97, 10, 108, 10, 105, 10, 116,
          -61, 10, -92, 10, 10, 116, 10, 114,
          10, 117, 10, 110, 10, 100, 10, 108,
          10, 97, 10, 103, 10, 122, 10, 101,
          10, 110, 10, 97, 10, 114, 10, 105,
          10, 111, 10, 58, 103, 10, 114, 10,
          117, 10, 110, 10, 100, 10, 114, 10,
          105, 10, 115, 10, 115, 101, 114, 103,
          101, 98, 101, 110, 32, 115, 101, 105,
          32, 101, 117, 110, 100, 108, 97, 103,
          101, 58, 10, 10, 10, 32, 35, 37,
          42, 64, 65, 68, 70, 71, 83, 85,
          87, 9, 13, 10, 95, 10, 70, 10,
          69, 10, 65, 10, 84, 10, 85, 10,
          82, 10, 69, 10, 95, 10, 69, 10,
          78, 10, 68, 10, 95, 10, 37, 10,
          32, 10, 98, 110, 10, 101, 10, 114,
          10, 103, 10, 101, 10, 110, 10, 111,
          10, 109, 10, 109, 10, 101, 10, 110,
          10, 97, 10, 110, 10, 117, 10, 110,
          10, 107, 10, 116, 10, 105, 10, 111,
          10, 110, 10, 97, 10, 108, 10, 105,
          10, 116, -61, 10, -92, 10, 10, 116,
          10, 58, 10, 101, 10, 103, 10, 101,
          10, 98, 10, 101, 10, 110, 10, 32,
          10, 115, 10, 101, 10, 105, 10, 32,
          101, 10, 122, 10, 101, 10, 110, 10,
          97, 10, 114, 10, 105, 10, 111, 10,
          58, 103, 10, 114, 10, 117, 10, 110,
          10, 100, 10, 114, 10, 105, 10, 115,
          10, 115, 10, 110, 10, 100, 10, 101,
          122, 101, 110, 97, 114, 105, 111, 58,
          103, 10, 10, 10, 32, 35, 37, 42,
          64, 65, 68, 70, 71, 83, 85, 87,
          9, 13, 10, 95, 10, 70, 10, 69,
          10, 65, 10, 84, 10, 85, 10, 82,
          10, 69, 10, 95, 10, 69, 10, 78,
          10, 68, 10, 95, 10, 37, 10, 32,
          10, 98, 110, 10, 101, 10, 114, 10,
          103, 10, 101, 10, 110, 10, 111, 10,
          109, 10, 109, 10, 101, 10, 110, 10,
          97, 10, 110, 10, 117, 10, 110, 10,
          107, 10, 116, 10, 105, 10, 111, 10,
          110, 10, 97, 10, 108, 10, 105, 10,
          116, -61, 10, -92, 10, 10, 116, 10,
          58, 10, 101, 114, 10, 103, 10, 101,
          10, 98, 10, 101, 10, 110, 10, 32,
          10, 115, 10, 101, 10, 105, 10, 32,
          101, 10, 117, 10, 110, 10, 100, 10,
          108, 10, 97, 10, 103, 10, 101, 10,
          122, 10, 101, 10, 110, 10, 97, 10,
          114, 10, 105, 10, 111, 10, 58, 103,
          10, 114, 10, 117, 10, 110, 10, 100,
          10, 114, 10, 105, 10, 115, 10, 115,
          10, 110, 10, 100, 10, 101, 114, 117,
          110, 100, 114, 105, 115, 115, 58, 10,
          10, 10, 32, 35, 37, 42, 64, 65,
          68, 70, 71, 83, 85, 87, 9, 13,
          10, 95, 10, 70, 10, 69, 10, 65,
          10, 84, 10, 85, 10, 82, 10, 69,
          10, 95, 10, 69, 10, 78, 10, 68,
          10, 95, 10, 37, 10, 32, 10, 98,
          110, 10, 101, 10, 114, 10, 103, 10,
          101, 10, 110, 10, 111, 10, 109, 10,
          109, 10, 101, 10, 110, 10, 97, 10,
          110, 10, 117, 10, 110, 10, 107, 10,
          116, 10, 105, 10, 111, 10, 110, 10,
          97, 10, 108, 10, 105, 10, 116, -61,
          10, -92, 10, 10, 116, 10, 58, 10,
          101, 10, 103, 10, 101, 10, 98, 10,
          101, 10, 110, 10, 32, 10, 115, 10,
          101, 10, 105, 10, 32, 101, 10, 122,
          10, 101, 10, 110, 10, 97, 10, 114,
          10, 105, 10, 111, 10, 110, 10, 100,
          10, 101, 110, 100, 101, 32, 124, 9,
          13, 10, 32, 92, 124, 9, 13, 10,
          92, 124, 10, 92, 10, 32, 92, 124,
          9, 13, 10, 32, 34, 35, 37, 42,
          64, 65, 66, 68, 70, 71, 83, 85,
          87, 124, 9, 13, 0
        ]

        class << self
          attr_accessor :_lexer_single_lengths
          private :_lexer_single_lengths, :_lexer_single_lengths=
        end
        self._lexer_single_lengths = [
          0, 17, 1, 1, 16, 1, 1, 2,
          2, 3, 3, 3, 3, 2, 2, 2,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          2, 2, 3, 5, 3, 2, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 5, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 16, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 9,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 2, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 13, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 3,
          2, 2, 2, 2, 2, 2, 2, 3,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 1, 1, 1, 1, 1,
          1, 1, 2, 1, 1, 13, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 3, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 3, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 13, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 3,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 1, 1, 1, 2, 4, 3,
          2, 4, 16, 0
        ]

        class << self
          attr_accessor :_lexer_range_lengths
          private :_lexer_range_lengths, :_lexer_range_lengths=
        end
        self._lexer_range_lengths = [
          0, 1, 0, 0, 1, 0, 0, 0,
          0, 1, 1, 1, 1, 1, 1, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 1, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 1, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 1, 1, 0,
          0, 1, 1, 0
        ]

        class << self
          attr_accessor :_lexer_index_offsets
          private :_lexer_index_offsets, :_lexer_index_offsets=
        end
        self._lexer_index_offsets = [
          0, 0, 19, 21, 23, 41, 43, 45,
          48, 51, 56, 61, 66, 71, 75, 79,
          82, 84, 86, 88, 90, 92, 94, 96,
          98, 100, 102, 104, 106, 108, 110, 112,
          114, 117, 120, 125, 132, 137, 140, 142,
          144, 146, 148, 150, 152, 154, 156, 158,
          160, 162, 164, 166, 168, 170, 172, 174,
          176, 178, 180, 182, 189, 192, 195, 198,
          201, 204, 207, 210, 213, 216, 219, 222,
          225, 228, 231, 234, 252, 254, 256, 258,
          260, 262, 264, 266, 268, 270, 272, 274,
          276, 278, 280, 282, 284, 286, 288, 290,
          301, 304, 307, 310, 313, 316, 319, 322,
          325, 328, 331, 334, 337, 340, 343, 346,
          349, 352, 355, 358, 361, 364, 367, 370,
          373, 376, 379, 382, 385, 388, 391, 394,
          397, 400, 403, 406, 409, 412, 415, 418,
          421, 424, 427, 430, 433, 436, 439, 442,
          445, 448, 451, 454, 458, 461, 464, 467,
          470, 473, 476, 479, 482, 485, 487, 489,
          491, 493, 495, 497, 499, 501, 503, 506,
          508, 510, 512, 514, 516, 518, 520, 522,
          524, 526, 541, 544, 547, 550, 553, 556,
          559, 562, 565, 568, 571, 574, 577, 580,
          583, 586, 590, 593, 596, 599, 602, 605,
          608, 611, 614, 617, 620, 623, 626, 629,
          632, 635, 638, 641, 644, 647, 650, 653,
          656, 659, 662, 665, 668, 671, 674, 677,
          680, 683, 686, 689, 692, 695, 698, 701,
          705, 708, 711, 714, 717, 720, 723, 726,
          730, 733, 736, 739, 742, 745, 748, 751,
          754, 757, 760, 763, 765, 767, 769, 771,
          773, 775, 777, 780, 782, 784, 799, 802,
          805, 808, 811, 814, 817, 820, 823, 826,
          829, 832, 835, 838, 841, 844, 848, 851,
          854, 857, 860, 863, 866, 869, 872, 875,
          878, 881, 884, 887, 890, 893, 896, 899,
          902, 905, 908, 911, 914, 917, 920, 923,
          926, 929, 933, 936, 939, 942, 945, 948,
          951, 954, 957, 960, 964, 967, 970, 973,
          976, 979, 982, 985, 988, 991, 994, 997,
          1000, 1003, 1006, 1010, 1013, 1016, 1019, 1022,
          1025, 1028, 1031, 1034, 1037, 1040, 1043, 1045,
          1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061,
          1063, 1065, 1080, 1083, 1086, 1089, 1092, 1095,
          1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119,
          1122, 1125, 1129, 1132, 1135, 1138, 1141, 1144,
          1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168,
          1171, 1174, 1177, 1180, 1183, 1186, 1189, 1192,
          1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216,
          1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240,
          1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265,
          1268, 1271, 1274, 1276, 1278, 1280, 1284, 1290,
          1294, 1297, 1303, 1321
        ]

        class << self
          attr_accessor :_lexer_indicies
          private :_lexer_indicies, :_lexer_indicies=
        end
        self._lexer_indicies = [
          1, 3, 2, 4, 5, 6, 7, 8,
          9, 10, 11, 12, 13, 14, 15, 16,
          17, 2, 0, 18, 0, 2, 0, 3,
          2, 4, 5, 6, 7, 8, 9, 10,
          11, 12, 13, 14, 15, 16, 17, 2,
          0, 19, 0, 20, 0, 22, 23, 21,
          25, 26, 24, 29, 28, 30, 28, 27,
          33, 32, 34, 32, 31, 33, 32, 35,
          32, 31, 33, 32, 36, 32, 31, 38,
          37, 37, 0, 3, 39, 39, 0, 41,
          42, 40, 3, 0, 43, 0, 44, 0,
          45, 0, 46, 0, 47, 0, 48, 0,
          49, 0, 50, 0, 51, 0, 52, 0,
          53, 0, 54, 0, 55, 0, 56, 0,
          57, 0, 59, 60, 58, 62, 63, 61,
          0, 0, 0, 0, 64, 65, 66, 65,
          65, 68, 67, 64, 3, 69, 8, 69,
          0, 70, 71, 0, 72, 0, 73, 0,
          74, 0, 75, 0, 76, 0, 77, 0,
          78, 0, 79, 0, 80, 0, 73, 0,
          81, 0, 82, 0, 83, 0, 84, 0,
          85, 0, 86, 0, 87, 0, 88, 0,
          89, 0, 91, 90, 93, 92, 93, 94,
          95, 96, 95, 94, 92, 93, 97, 92,
          93, 98, 92, 93, 99, 92, 93, 100,
          92, 93, 101, 92, 93, 102, 92, 93,
          103, 92, 93, 104, 92, 93, 105, 92,
          93, 106, 92, 93, 107, 92, 108, 93,
          92, 109, 93, 92, 93, 110, 92, 93,
          111, 92, 113, 112, 114, 115, 116, 117,
          118, 119, 120, 121, 122, 123, 124, 125,
          126, 127, 112, 0, 128, 0, 80, 0,
          129, 0, 130, 0, 131, 0, 132, 0,
          133, 0, 134, 0, 135, 0, 136, 0,
          137, 0, 138, 0, 139, 0, 140, 0,
          141, 0, 142, 0, 143, 0, 145, 144,
          147, 146, 147, 148, 149, 150, 149, 151,
          152, 153, 154, 148, 146, 147, 155, 146,
          147, 156, 146, 147, 157, 146, 147, 158,
          146, 147, 159, 146, 147, 160, 146, 147,
          161, 146, 147, 162, 146, 147, 163, 146,
          147, 164, 146, 147, 165, 146, 147, 166,
          146, 147, 167, 146, 147, 168, 146, 147,
          169, 146, 147, 170, 146, 147, 171, 146,
          147, 172, 146, 147, 173, 146, 147, 174,
          146, 147, 175, 146, 147, 176, 146, 147,
          177, 146, 147, 178, 146, 147, 179, 146,
          147, 180, 146, 147, 181, 146, 147, 182,
          146, 147, 183, 146, 147, 184, 146, 147,
          185, 146, 147, 186, 146, 147, 187, 146,
          147, 188, 146, 189, 147, 146, 190, 147,
          146, 147, 176, 146, 147, 191, 146, 147,
          192, 146, 147, 193, 146, 147, 194, 146,
          147, 195, 146, 147, 196, 146, 147, 175,
          146, 147, 197, 146, 147, 198, 146, 147,
          199, 146, 147, 200, 146, 147, 201, 146,
          147, 202, 146, 147, 203, 146, 147, 177,
          204, 146, 147, 205, 146, 147, 206, 146,
          147, 207, 146, 147, 208, 146, 147, 209,
          146, 147, 210, 146, 147, 211, 146, 147,
          176, 146, 212, 213, 0, 214, 0, 215,
          0, 216, 0, 217, 0, 218, 0, 219,
          0, 220, 0, 221, 0, 222, 0, 57,
          80, 0, 223, 0, 224, 0, 225, 0,
          226, 0, 227, 0, 228, 0, 229, 0,
          230, 0, 232, 231, 234, 233, 234, 235,
          236, 237, 238, 236, 239, 240, 241, 242,
          243, 244, 245, 235, 233, 234, 246, 233,
          234, 247, 233, 234, 248, 233, 234, 249,
          233, 234, 250, 233, 234, 251, 233, 234,
          252, 233, 234, 253, 233, 234, 254, 233,
          234, 255, 233, 234, 256, 233, 234, 257,
          233, 234, 258, 233, 234, 259, 233, 234,
          260, 233, 234, 261, 262, 233, 234, 263,
          233, 234, 264, 233, 234, 265, 233, 234,
          266, 233, 234, 267, 233, 234, 268, 233,
          234, 269, 233, 234, 270, 233, 234, 271,
          233, 234, 264, 233, 234, 272, 233, 234,
          271, 233, 234, 273, 233, 234, 274, 233,
          234, 275, 233, 234, 276, 233, 234, 277,
          233, 234, 278, 233, 234, 279, 233, 234,
          280, 233, 234, 281, 233, 234, 282, 233,
          234, 283, 233, 284, 234, 233, 285, 234,
          233, 234, 286, 233, 234, 260, 233, 234,
          287, 233, 234, 288, 233, 234, 289, 233,
          234, 290, 233, 234, 291, 233, 234, 292,
          233, 234, 293, 233, 234, 294, 233, 234,
          295, 233, 234, 296, 233, 234, 260, 271,
          233, 234, 297, 233, 234, 298, 233, 234,
          299, 233, 234, 300, 233, 234, 301, 233,
          234, 302, 233, 234, 303, 233, 234, 260,
          304, 233, 234, 305, 233, 234, 306, 233,
          234, 307, 233, 234, 308, 233, 234, 309,
          233, 234, 310, 233, 234, 311, 233, 234,
          286, 233, 234, 312, 233, 234, 264, 233,
          234, 272, 233, 313, 0, 314, 0, 315,
          0, 316, 0, 317, 0, 318, 0, 319,
          0, 320, 321, 0, 323, 322, 325, 324,
          325, 326, 327, 328, 329, 327, 330, 331,
          332, 333, 334, 335, 336, 326, 324, 325,
          337, 324, 325, 338, 324, 325, 339, 324,
          325, 340, 324, 325, 341, 324, 325, 342,
          324, 325, 343, 324, 325, 344, 324, 325,
          345, 324, 325, 346, 324, 325, 347, 324,
          325, 348, 324, 325, 349, 324, 325, 350,
          324, 325, 351, 324, 325, 352, 353, 324,
          325, 354, 324, 325, 355, 324, 325, 356,
          324, 325, 357, 324, 325, 358, 324, 325,
          359, 324, 325, 360, 324, 325, 361, 324,
          325, 362, 324, 325, 355, 324, 325, 363,
          324, 325, 362, 324, 325, 364, 324, 325,
          365, 324, 325, 366, 324, 325, 367, 324,
          325, 368, 324, 325, 369, 324, 325, 370,
          324, 325, 371, 324, 325, 372, 324, 325,
          373, 324, 325, 374, 324, 375, 325, 324,
          376, 325, 324, 325, 377, 324, 325, 351,
          324, 325, 378, 379, 324, 325, 380, 324,
          325, 381, 324, 325, 382, 324, 325, 383,
          324, 325, 384, 324, 325, 385, 324, 325,
          386, 324, 325, 387, 324, 325, 388, 324,
          325, 351, 362, 324, 325, 389, 324, 325,
          390, 324, 325, 391, 324, 325, 392, 324,
          325, 393, 324, 325, 394, 324, 325, 377,
          324, 325, 395, 324, 325, 396, 324, 325,
          397, 324, 325, 398, 324, 325, 399, 324,
          325, 400, 324, 325, 401, 324, 325, 351,
          402, 324, 325, 403, 324, 325, 404, 324,
          325, 405, 324, 325, 406, 324, 325, 407,
          324, 325, 408, 324, 325, 409, 324, 325,
          377, 324, 325, 410, 324, 325, 355, 324,
          325, 363, 324, 411, 0, 412, 0, 413,
          0, 414, 0, 415, 0, 416, 0, 417,
          0, 418, 0, 419, 0, 421, 420, 423,
          422, 423, 424, 425, 426, 427, 425, 428,
          429, 430, 431, 432, 433, 434, 424, 422,
          423, 435, 422, 423, 436, 422, 423, 437,
          422, 423, 438, 422, 423, 439, 422, 423,
          440, 422, 423, 441, 422, 423, 442, 422,
          423, 443, 422, 423, 444, 422, 423, 445,
          422, 423, 446, 422, 423, 447, 422, 423,
          448, 422, 423, 449, 422, 423, 450, 451,
          422, 423, 452, 422, 423, 453, 422, 423,
          454, 422, 423, 455, 422, 423, 456, 422,
          423, 457, 422, 423, 458, 422, 423, 459,
          422, 423, 460, 422, 423, 453, 422, 423,
          461, 422, 423, 460, 422, 423, 462, 422,
          423, 463, 422, 423, 464, 422, 423, 465,
          422, 423, 466, 422, 423, 467, 422, 423,
          468, 422, 423, 469, 422, 423, 470, 422,
          423, 471, 422, 423, 472, 422, 473, 423,
          422, 474, 423, 422, 423, 475, 422, 423,
          449, 422, 423, 476, 422, 423, 477, 422,
          423, 478, 422, 423, 479, 422, 423, 480,
          422, 423, 481, 422, 423, 482, 422, 423,
          483, 422, 423, 484, 422, 423, 485, 422,
          423, 449, 460, 422, 423, 486, 422, 423,
          487, 422, 423, 488, 422, 423, 489, 422,
          423, 490, 422, 423, 491, 422, 423, 475,
          422, 423, 492, 422, 423, 453, 422, 423,
          461, 422, 493, 0, 73, 0, 128, 0,
          494, 495, 494, 0, 498, 497, 499, 500,
          497, 496, 0, 502, 503, 501, 0, 502,
          501, 498, 504, 502, 503, 504, 501, 498,
          505, 506, 507, 508, 509, 510, 511, 512,
          513, 514, 515, 516, 517, 518, 519, 505,
          0, 520, 0
        ]

        class << self
          attr_accessor :_lexer_trans_targs
          private :_lexer_trans_targs, :_lexer_trans_targs=
        end
        self._lexer_trans_targs = [
          0, 2, 4, 4, 5, 15, 17, 31,
          34, 37, 48, 76, 78, 156, 251, 418,
          420, 421, 3, 6, 7, 8, 9, 8,
          8, 9, 8, 10, 10, 10, 11, 10,
          10, 10, 11, 12, 13, 14, 4, 14,
          15, 4, 16, 18, 19, 20, 21, 22,
          23, 24, 25, 26, 27, 28, 29, 30,
          427, 32, 33, 4, 16, 33, 4, 16,
          35, 36, 4, 35, 34, 36, 38, 40,
          39, 31, 41, 42, 43, 44, 45, 46,
          47, 49, 50, 51, 52, 53, 54, 55,
          56, 57, 58, 59, 58, 59, 59, 4,
          60, 61, 62, 63, 64, 65, 66, 67,
          68, 69, 70, 71, 72, 73, 74, 75,
          4, 4, 5, 15, 17, 31, 34, 37,
          48, 76, 78, 156, 251, 418, 420, 421,
          77, 79, 80, 81, 82, 83, 84, 85,
          86, 87, 88, 89, 90, 91, 92, 93,
          94, 95, 94, 95, 95, 4, 96, 110,
          119, 133, 140, 97, 98, 99, 100, 101,
          102, 103, 104, 105, 106, 107, 108, 109,
          4, 111, 112, 113, 114, 115, 116, 117,
          118, 75, 120, 121, 122, 123, 124, 125,
          126, 127, 128, 129, 130, 131, 132, 134,
          135, 136, 137, 138, 139, 141, 142, 143,
          144, 145, 146, 147, 148, 149, 150, 151,
          152, 153, 154, 155, 157, 167, 158, 159,
          160, 161, 162, 163, 164, 165, 166, 168,
          169, 170, 171, 172, 173, 174, 175, 176,
          177, 176, 177, 177, 4, 178, 192, 193,
          204, 206, 221, 232, 248, 250, 179, 180,
          181, 182, 183, 184, 185, 186, 187, 188,
          189, 190, 191, 4, 75, 194, 196, 195,
          192, 197, 198, 199, 200, 201, 202, 203,
          205, 207, 208, 209, 210, 211, 212, 213,
          214, 215, 216, 217, 218, 219, 220, 222,
          223, 224, 225, 226, 227, 228, 229, 230,
          231, 233, 234, 235, 236, 237, 238, 239,
          240, 241, 242, 243, 244, 245, 246, 247,
          249, 252, 253, 254, 255, 256, 257, 258,
          259, 342, 260, 261, 260, 261, 261, 4,
          262, 276, 277, 288, 290, 305, 323, 339,
          341, 263, 264, 265, 266, 267, 268, 269,
          270, 271, 272, 273, 274, 275, 4, 75,
          278, 280, 279, 276, 281, 282, 283, 284,
          285, 286, 287, 289, 291, 292, 293, 294,
          295, 296, 297, 298, 299, 300, 301, 302,
          303, 304, 306, 316, 307, 308, 309, 310,
          311, 312, 313, 314, 315, 317, 318, 319,
          320, 321, 322, 324, 325, 326, 327, 328,
          329, 330, 331, 332, 333, 334, 335, 336,
          337, 338, 340, 343, 344, 345, 346, 347,
          348, 349, 350, 351, 352, 353, 352, 353,
          353, 4, 354, 368, 369, 380, 382, 397,
          408, 415, 417, 355, 356, 357, 358, 359,
          360, 361, 362, 363, 364, 365, 366, 367,
          4, 75, 370, 372, 371, 368, 373, 374,
          375, 376, 377, 378, 379, 381, 383, 384,
          385, 386, 387, 388, 389, 390, 391, 392,
          393, 394, 395, 396, 398, 399, 400, 401,
          402, 403, 404, 405, 406, 407, 409, 410,
          411, 412, 413, 414, 416, 419, 421, 422,
          423, 425, 426, 424, 422, 423, 424, 422,
          425, 426, 5, 15, 17, 31, 34, 37,
          48, 76, 78, 156, 251, 418, 420, 421,
          0
        ]

        class << self
          attr_accessor :_lexer_trans_actions
          private :_lexer_trans_actions, :_lexer_trans_actions=
        end
        self._lexer_trans_actions = [
          43, 0, 0, 54, 3, 1, 0, 29,
          1, 29, 29, 29, 29, 29, 29, 29,
          29, 35, 0, 0, 0, 7, 139, 48,
          0, 102, 9, 5, 45, 134, 45, 0,
          33, 122, 33, 33, 0, 11, 106, 0,
          0, 114, 25, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 149, 126, 0, 110, 23,
          0, 27, 118, 27, 51, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 144, 0, 54, 0, 81,
          84, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 21,
          31, 130, 60, 57, 31, 63, 57, 63,
          63, 63, 63, 63, 63, 63, 63, 66,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          57, 144, 0, 54, 0, 69, 33, 84,
          84, 84, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          13, 0, 0, 0, 0, 0, 0, 0,
          0, 13, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 0, 72, 33, 84, 84,
          84, 84, 84, 84, 84, 84, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 15, 15, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 144, 0, 54, 0, 75,
          33, 84, 84, 84, 84, 84, 84, 84,
          84, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 17, 17,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 57, 144, 0, 54,
          0, 78, 33, 84, 84, 84, 84, 84,
          84, 84, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          19, 19, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          37, 37, 54, 37, 87, 0, 0, 39,
          0, 0, 93, 90, 41, 96, 90, 96,
          96, 96, 96, 96, 96, 96, 96, 99,
          0
        ]

        class << self
          attr_accessor :_lexer_eof_actions
          private :_lexer_eof_actions, :_lexer_eof_actions=
        end
        self._lexer_eof_actions = [
          0, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43
        ]

        class << self
          attr_accessor :lexer_start
        end
        self.lexer_start = 1;
        class << self
          attr_accessor :lexer_first_final
        end
        self.lexer_first_final = 427;
        class << self
          attr_accessor :lexer_error
        end
        self.lexer_error = 0;

        class << self
          attr_accessor :lexer_en_main
        end
        self.lexer_en_main = 1;


        # line 133 "ragel/i18n/de.rb.rl"
      end

      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length

        @line_number = 1
        @last_newline = 0


        # line 825 "lib/gherkin/lexer/de.rb"
        begin
          p ||= 0
          pe ||= data.length
          cs = lexer_start
        end

        # line 143 "ragel/i18n/de.rb.rl"

        # line 834 "lib/gherkin/lexer/de.rb"
        begin
          _klen, _trans, _keys, _acts, _nacts = nil
          _goto_level = 0
          _resume = 10
          _eof_trans = 15
          _again = 20
          _test_eof = 30
          _out = 40
          while true
            _trigger_goto = false
            if _goto_level <= 0
              if p == pe
                _goto_level = _test_eof
                next
              end
              if cs == 0
                _goto_level = _out
                next
              end
            end
            if _goto_level <= _resume
              _keys = _lexer_key_offsets[cs]
              _trans = _lexer_index_offsets[cs]
              _klen = _lexer_single_lengths[cs]
              _break_match = false

              begin
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + _klen - 1

                  loop do
                    break if _upper < _lower
                    _mid = _lower + ( (_upper - _lower) >> 1 )

                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 1
                    elsif data[p].ord > _lexer_trans_keys[_mid]
                      _lower = _mid + 1
                    else
                      _trans += (_mid - _keys)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _keys += _klen
                  _trans += _klen
                end
                _klen = _lexer_range_lengths[cs]
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + (_klen << 1) - 2
                  loop do
                    break if _upper < _lower
                    _mid = _lower + (((_upper-_lower) >> 1) & ~1)
                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 2
                    elsif data[p].ord > _lexer_trans_keys[_mid+1]
                      _lower = _mid + 2
                    else
                      _trans += ((_mid - _keys) >> 1)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _trans += _klen
                end
              end while false
              _trans = _lexer_indicies[_trans]
              cs = _lexer_trans_targs[_trans]
              if _lexer_trans_actions[_trans] != 0
                _acts = _lexer_trans_actions[_trans]
                _nacts = _lexer_actions[_acts]
                _acts += 1
                while _nacts > 0
                  _nacts -= 1
                  _acts += 1
                  case _lexer_actions[_acts - 1]
                  when 0 then
                    # line 11 "ragel/i18n/de.rb.rl"
                    begin

                      @content_start = p
                      @current_line = @line_number
                      @start_col = p - @last_newline - "#{@keyword}:".length
                    end
                  when 1 then
                    # line 17 "ragel/i18n/de.rb.rl"
                    begin

                      @current_line = @line_number
                      @start_col = p - @last_newline
                    end
                  when 2 then
                    # line 22 "ragel/i18n/de.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 3 then
                    # line 26 "ragel/i18n/de.rb.rl"
                    begin

                      @docstring_content_type_start = p
                    end
                  when 4 then
                    # line 29 "ragel/i18n/de.rb.rl"
                    begin

                      @docstring_content_type_end = p
                    end
                  when 5 then
                    # line 33 "ragel/i18n/de.rb.rl"
                    begin

                      con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
                      con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
                      @listener.doc_string(con_type, con, @current_line)
                    end
                  when 6 then
                    # line 38 "ragel/i18n/de.rb.rl"
                    begin

                      p = store_keyword_content(:feature, data, p, eof)
                    end
                  when 7 then
                    # line 42 "ragel/i18n/de.rb.rl"
                    begin

                      p = store_keyword_content(:background, data, p, eof)
                    end
                  when 8 then
                    # line 46 "ragel/i18n/de.rb.rl"
                    begin

                      p = store_keyword_content(:scenario, data, p, eof)
                    end
                  when 9 then
                    # line 50 "ragel/i18n/de.rb.rl"
                    begin

                      p = store_keyword_content(:scenario_outline, data, p, eof)
                    end
                  when 10 then
                    # line 54 "ragel/i18n/de.rb.rl"
                    begin

                      p = store_keyword_content(:examples, data, p, eof)
                    end
                  when 11 then
                    # line 58 "ragel/i18n/de.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.step(@keyword, con, @current_line)
                    end
                  when 12 then
                    # line 63 "ragel/i18n/de.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.comment(con, @line_number)
                      @keyword_start = nil
                    end
                  when 13 then
                    # line 69 "ragel/i18n/de.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.tag(con, @current_line)
                      @keyword_start = nil
                    end
                  when 14 then
                    # line 75 "ragel/i18n/de.rb.rl"
                    begin

                      @line_number += 1
                    end
                  when 15 then
                    # line 79 "ragel/i18n/de.rb.rl"
                    begin

                      @last_newline = p + 1
                    end
                  when 16 then
                    # line 83 "ragel/i18n/de.rb.rl"
                    begin

                      @keyword_start ||= p
                    end
                  when 17 then
                    # line 87 "ragel/i18n/de.rb.rl"
                    begin

                      @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
                      @keyword_start = nil
                    end
                  when 18 then
                    # line 92 "ragel/i18n/de.rb.rl"
                    begin

                      @next_keyword_start = p
                    end
                  when 19 then
                    # line 96 "ragel/i18n/de.rb.rl"
                    begin

                      p = p - 1
                      current_row = []
                      @current_line = @line_number
                    end
                  when 20 then
                    # line 102 "ragel/i18n/de.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 21 then
                    # line 106 "ragel/i18n/de.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
                    end
                  when 22 then
                    # line 111 "ragel/i18n/de.rb.rl"
                    begin

                      @listener.row(current_row, @current_line)
                    end
                  when 23 then
                    # line 115 "ragel/i18n/de.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1078 "lib/gherkin/lexer/de.rb"
                  end # action switch
                end
              end
              if _trigger_goto
                next
              end
            end
            if _goto_level <= _again
              if cs == 0
                _goto_level = _out
                next
              end
              p += 1
              if p != pe
                _goto_level = _resume
                next
              end
            end
            if _goto_level <= _test_eof
              if p == eof
                __acts = _lexer_eof_actions[cs]
                __nacts =  _lexer_actions[__acts]
                __acts += 1
                while __nacts > 0
                  __nacts -= 1
                  __acts += 1
                  case _lexer_actions[__acts - 1]
                  when 23 then
                    # line 115 "ragel/i18n/de.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1117 "lib/gherkin/lexer/de.rb"
                  end # eof action switch
                end
                if _trigger_goto
                  next
                end
              end
            end
            if _goto_level <= _out
              break
            end
          end
        end

        # line 144 "ragel/i18n/de.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end

      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9|2\.0/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
