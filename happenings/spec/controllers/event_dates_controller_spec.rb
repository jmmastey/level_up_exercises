require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EventDatesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # EventDate. As you add validations to EventDate, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryGirl.build(:event_date).attributes
  end

  let(:invalid_attributes) do
    FactoryGirl.build(:invalid_event_date).attributes
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventDatesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all event_dates as @event_dates" do
      event_dates = FactoryGirl.create_list(:event_date, 2)
      get :index, {}, valid_session
      expect(assigns(:event_dates)).to eq(event_dates)
    end
  end

  describe "GET show" do
    it "assigns the requested event_date as @event_date" do
      event_date = FactoryGirl.create(:event_date)
      get :show, { id: event_date.to_param }, valid_session
      expect(assigns(:event_date)).to eq(event_date)
    end
  end

  describe "GET new" do
    it "assigns a new event_date as @event_date" do
      get :new, {}, valid_session
      expect(assigns(:event_date)).to be_a_new(EventDate)
    end
  end

  describe "GET edit" do
    it "assigns the requested event_date as @event_date" do
      event_date = FactoryGirl.create(:event_date)
      get :edit, { id: event_date.to_param }, valid_session
      expect(assigns(:event_date)).to eq(event_date)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new EventDate" do
        expect do
          post :create, { event_date: valid_attributes }, valid_session
        end.to change(EventDate, :count).by(1)
      end

      it "assigns a newly created event_date as @event_date" do
        post :create, { event_date: valid_attributes }, valid_session
        expect(assigns(:event_date)).to be_a(EventDate)
        expect(assigns(:event_date)).to be_persisted
      end

      it "redirects to the created event_date" do
        post :create, { event_date: valid_attributes }, valid_session
        expect(response).to redirect_to(EventDate.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved event_date as @event_date" do
        post :create, { event_date: invalid_attributes }, valid_session
        expect(assigns(:event_date)).to be_a_new(EventDate)
      end

      it "re-renders the 'new' template" do
        post :create, { event_date: invalid_attributes }, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) do
        FactoryGirl.attributes_for(:event_date, date_time: 3.days.from_now)
      end

      it "updates the requested event_date" do
        event_date = FactoryGirl.create(:event_date)
        put :update, { id:         event_date.to_param,
                       event_date: new_attributes }, valid_session
        event_date.reload
        expect(assigns(:event_date).id).to eq(event_date.id)
        # skip("Add assertions for updated state")
      end

      it "assigns the requested event_date as @event_date" do
        event_date = FactoryGirl.create(:event_date)
        put :update, { id:         event_date.to_param,
                       event_date: valid_attributes }, valid_session
        expect(assigns(:event_date)).to eq(event_date)
      end

      it "redirects to the event_date" do
        event_date = FactoryGirl.create(:event_date)
        put :update, { id:         event_date.to_param,
                       event_date: valid_attributes }, valid_session
        expect(response).to redirect_to(event_date)
      end
    end

    describe "with invalid params" do
      it "assigns the event_date as @event_date" do
        event_date = FactoryGirl.create(:event_date)
        put :update, { id:         event_date.to_param,
                       event_date: invalid_attributes }, valid_session
        expect(assigns(:event_date)).to eq(event_date)
      end

      it "re-renders the 'edit' template" do
        event_date = FactoryGirl.create(:event_date)
        put :update, { id:         event_date.to_param,
                       event_date: invalid_attributes }, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested event_date" do
      event_date = FactoryGirl.create(:event_date)
      expect do
        delete :destroy, { id: event_date.to_param }, valid_session
      end.to change(EventDate, :count).by(-1)
    end

    it "redirects to the event_dates list" do
      event_date = FactoryGirl.create(:event_date)
      delete :destroy, { id: event_date.to_param }, valid_session
      expect(response).to redirect_to(event_dates_url)
    end
  end

end
