
# line 1 "ragel/i18n/hi.rb.rl"
require 'gherkin/native'

module Gherkin
  module Lexer
    class Hi #:nodoc:
      native_impl('gherkin')


      # line 125 "ragel/i18n/hi.rb.rl"


      def initialize(listener)
        @listener = listener

        # Initialize ivars to avoid warnings
        @keyword = nil

        # line 21 "lib/gherkin/lexer/hi.rb"
        class << self
          attr_accessor :_lexer_actions
          private :_lexer_actions, :_lexer_actions=
        end
        self._lexer_actions = [
          0, 1, 0, 1, 1, 1, 2, 1,
          3, 1, 4, 1, 5, 1, 6, 1,
          7, 1, 8, 1, 9, 1, 10, 1,
          11, 1, 12, 1, 13, 1, 16, 1,
          17, 1, 18, 1, 19, 1, 20, 1,
          21, 1, 22, 1, 23, 2, 2, 18,
          2, 3, 4, 2, 13, 0, 2, 14,
          15, 2, 17, 0, 2, 17, 1, 2,
          17, 16, 2, 17, 19, 2, 18, 6,
          2, 18, 7, 2, 18, 8, 2, 18,
          9, 2, 18, 10, 2, 18, 16, 2,
          20, 21, 2, 22, 0, 2, 22, 1,
          2, 22, 16, 2, 22, 19, 3, 4,
          14, 15, 3, 5, 14, 15, 3, 11,
          14, 15, 3, 12, 14, 15, 3, 13,
          14, 15, 3, 14, 15, 18, 3, 17,
          0, 11, 3, 17, 14, 15, 4, 2,
          14, 15, 18, 4, 3, 4, 14, 15,
          4, 17, 0, 14, 15, 5, 17, 0,
          11, 14, 15
        ]

        class << self
          attr_accessor :_lexer_key_offsets
          private :_lexer_key_offsets, :_lexer_key_offsets=
        end
        self._lexer_key_offsets = [
          0, 0, 12, 13, 23, 24, 25, 26,
          27, 28, 29, 30, 32, 34, 45, 46,
          47, 49, 51, 56, 61, 66, 71, 75,
          79, 81, 82, 83, 84, 85, 86, 87,
          88, 89, 90, 91, 92, 93, 94, 95,
          96, 101, 108, 113, 117, 123, 126, 128,
          134, 145, 146, 147, 148, 149, 150, 151,
          152, 153, 154, 155, 156, 157, 158, 159,
          160, 161, 162, 163, 170, 172, 174, 176,
          178, 180, 182, 184, 186, 188, 190, 192,
          194, 196, 198, 200, 202, 204, 206, 208,
          219, 220, 221, 223, 224, 225, 226, 227,
          228, 229, 230, 231, 232, 233, 234, 235,
          236, 237, 238, 239, 240, 241, 242, 243,
          244, 245, 246, 247, 248, 249, 250, 251,
          252, 253, 254, 255, 258, 259, 261, 262,
          264, 265, 267, 268, 269, 270, 271, 272,
          273, 274, 275, 276, 277, 278, 279, 280,
          281, 282, 284, 285, 286, 287, 288, 289,
          290, 291, 292, 293, 294, 295, 296, 297,
          298, 299, 300, 301, 302, 303, 304, 305,
          306, 307, 308, 317, 319, 329, 331, 333,
          335, 337, 339, 341, 343, 345, 347, 350,
          352, 354, 356, 358, 360, 362, 364, 366,
          368, 370, 372, 374, 376, 378, 380, 382,
          384, 386, 388, 390, 392, 394, 396, 398,
          400, 402, 404, 406, 408, 410, 412, 414,
          418, 420, 422, 424, 427, 429, 432, 434,
          436, 438, 440, 442, 444, 446, 448, 450,
          452, 454, 456, 458, 460, 462, 464, 466,
          468, 470, 472, 474, 476, 478, 480, 482,
          484, 486, 488, 490, 492, 494, 496, 498,
          500, 502, 504, 506, 508, 510, 512, 514,
          516, 518, 520, 522, 524, 526, 528, 530,
          531, 532, 541, 543, 553, 555, 557, 559,
          561, 563, 565, 567, 569, 571, 574, 576,
          578, 580, 582, 584, 586, 588, 590, 592,
          594, 596, 598, 600, 602, 604, 606, 608,
          610, 612, 614, 616, 618, 620, 622, 624,
          626, 628, 630, 632, 634, 636, 638, 642,
          644, 647, 649, 652, 654, 657, 659, 661,
          663, 665, 667, 669, 671, 673, 675, 677,
          679, 681, 683, 685, 687, 690, 692, 694,
          696, 698, 700, 702, 704, 706, 708, 710,
          712, 714, 716, 718, 720, 722, 724, 726,
          728, 730, 732, 734, 736, 738, 740, 742,
          744, 746, 748, 750, 752, 754, 756, 758,
          760, 762, 764, 766, 768, 770, 772, 774,
          776, 778, 780, 782, 784, 786, 788, 790,
          792, 794, 796, 798, 800, 802, 804, 806,
          808, 810, 812, 814, 816, 818, 820, 822,
          824, 826, 828, 830, 832, 834, 836, 838,
          840, 842, 844, 845, 846, 847, 848, 849,
          850, 851, 852, 853, 854, 855, 856, 857,
          858, 859, 860, 861, 862, 863, 864, 865,
          866, 867, 868, 869, 878, 880, 890, 892,
          894, 896, 898, 900, 902, 904, 906, 908,
          911, 913, 915, 917, 919, 921, 923, 925,
          927, 929, 931, 933, 935, 937, 939, 941,
          943, 945, 947, 949, 951, 953, 955, 957,
          959, 961, 963, 965, 967, 969, 971, 973,
          975, 979, 981, 983, 985, 988, 990, 993,
          995, 997, 999, 1001, 1003, 1005, 1007, 1009,
          1011, 1013, 1015, 1017, 1019, 1021, 1023, 1026,
          1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042,
          1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058,
          1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074,
          1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090,
          1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106,
          1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122,
          1124, 1126, 1128, 1130, 1132, 1134, 1136, 1137,
          1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
          1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
          1154, 1155, 1156, 1157, 1158, 1166, 1168, 1172,
          1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188,
          1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204,
          1206, 1209, 1211, 1213, 1215, 1217, 1219, 1221,
          1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237,
          1239, 1241, 1243, 1245, 1247, 1250, 1252, 1254,
          1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270,
          1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286,
          1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302,
          1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318,
          1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334,
          1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350,
          1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366,
          1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382,
          1384, 1386, 1388, 1390, 1392, 1394, 1396, 1397,
          1398
        ]

        class << self
          attr_accessor :_lexer_trans_keys
          private :_lexer_trans_keys, :_lexer_trans_keys=
        end
        self._lexer_trans_keys = [
          -32, -17, 10, 32, 34, 35, 37, 42,
          64, 124, 9, 13, -92, -123, -119, -108,
          -107, -102, -100, -92, -86, -81, -80, -32,
          -92, -105, -32, -92, -80, 32, 10, 13,
          10, 13, -32, 10, 32, 34, 35, 37,
          42, 64, 124, 9, 13, 34, 34, 10,
          13, 10, 13, 10, 32, 34, 9, 13,
          10, 32, 34, 9, 13, 10, 32, 34,
          9, 13, 10, 32, 34, 9, 13, 10,
          32, 9, 13, 10, 32, 9, 13, 10,
          13, 10, 95, 70, 69, 65, 84, 85,
          82, 69, 95, 69, 78, 68, 95, 37,
          13, 32, 64, 9, 10, 9, 10, 13,
          32, 64, 11, 12, 10, 32, 64, 9,
          13, 32, 124, 9, 13, 10, 32, 92,
          124, 9, 13, 10, 92, 124, 10, 92,
          10, 32, 92, 124, 9, 13, -32, 10,
          32, 34, 35, 37, 42, 64, 124, 9,
          13, -32, -92, -90, -32, -92, -66, -32,
          -92, -71, -32, -92, -80, -32, -92, -93,
          58, 10, 10, -32, 10, 32, 35, 124,
          9, 13, -92, 10, -80, 10, -32, 10,
          -91, 10, -126, 10, -32, 10, -92, 10,
          -86, 10, 10, 32, -32, 10, -92, 10,
          -78, 10, -32, 10, -91, 10, -121, 10,
          -32, 10, -92, 10, -106, 10, 10, 58,
          -32, 10, 32, 34, 35, 37, 42, 64,
          124, 9, 13, -32, -92, -90, -65, -32,
          -92, -66, -32, -92, -88, -32, -91, -115,
          -32, -92, -92, -32, -91, -127, -32, -91,
          -126, -32, -92, -126, -32, -92, -107, -32,
          -92, -65, -32, -92, -84, -32, -92, -84,
          -91, -90, -32, -92, -91, -80, -32, 32,
          -92, -88, -65, -32, -92, -90, -32, -91,
          -125, -32, -92, -74, -32, -91, -115, -32,
          -92, -81, 32, 58, -32, -92, -80, -32,
          -91, -126, -32, -92, -86, -32, -92, -80,
          -32, -91, -121, -32, -92, -106, -32, -92,
          -66, 58, 10, 10, -32, 10, 32, 35,
          37, 42, 64, 9, 13, -92, 10, -123,
          -108, -107, -102, -100, -92, -86, -81, -80,
          10, -32, 10, -92, 10, -105, 10, -32,
          10, -92, 10, -80, 10, 10, 32, -32,
          10, -92, 10, -90, -65, 10, -32, 10,
          -92, 10, -66, 10, -32, 10, -92, 10,
          -88, 10, -32, 10, -91, 10, -115, 10,
          -32, 10, -92, 10, -92, 10, -32, 10,
          -91, 10, -127, 10, -32, 10, -91, 10,
          -126, 10, -32, 10, -92, 10, -126, 10,
          -32, 10, -92, 10, -107, 10, -32, 10,
          -92, 10, -65, 10, -32, 10, -92, 10,
          -84, 10, -32, 10, -92, 10, -84, 10,
          -91, -90, -32, 10, -92, 10, -80, 10,
          -32, 10, 32, -92, 10, -88, -65, 10,
          -32, 10, -92, 10, -90, 10, -32, 10,
          -91, 10, -125, 10, -32, 10, -92, 10,
          -74, 10, -32, 10, -91, 10, -115, 10,
          -32, 10, -92, 10, -81, 10, 10, 58,
          -32, 10, -92, 10, -90, 10, -32, 10,
          -91, 10, -126, 10, -32, 10, -92, 10,
          -86, 10, 10, 32, -32, 10, -92, 10,
          -78, 10, -32, 10, -91, 10, -121, 10,
          -32, 10, -92, 10, -106, 10, 10, 95,
          10, 70, 10, 69, 10, 65, 10, 84,
          10, 85, 10, 82, 10, 69, 10, 95,
          10, 69, 10, 78, 10, 68, 10, 95,
          10, 37, 10, 10, -32, 10, 32, 35,
          37, 42, 64, 9, 13, -92, 10, -123,
          -108, -107, -102, -100, -92, -86, -81, -80,
          10, -32, 10, -92, 10, -105, 10, -32,
          10, -92, 10, -80, 10, 10, 32, -32,
          10, -92, 10, -90, -65, 10, -32, 10,
          -92, 10, -66, 10, -32, 10, -92, 10,
          -88, 10, -32, 10, -91, 10, -115, 10,
          -32, 10, -92, 10, -92, 10, -32, 10,
          -91, 10, -127, 10, -32, 10, -91, 10,
          -126, 10, -32, 10, -92, 10, -126, 10,
          -32, 10, -92, 10, -107, 10, -32, 10,
          -92, 10, -65, 10, -32, 10, -92, 10,
          -84, 10, -32, 10, -92, 10, -84, 10,
          -91, -90, -32, 10, -92, -91, 10, -80,
          10, -32, 10, 32, -92, 10, -88, -65,
          10, -32, 10, -92, 10, -90, 10, -32,
          10, -91, 10, -125, 10, -32, 10, -92,
          10, -74, 10, -32, 10, -91, 10, -115,
          10, -32, 10, -92, 10, -81, 10, 10,
          32, 58, -32, 10, -92, 10, -80, 10,
          -32, 10, -91, 10, -126, 10, -32, 10,
          -92, 10, -86, 10, -32, 10, -92, 10,
          -80, 10, -32, 10, -91, 10, -121, 10,
          -32, 10, -92, 10, -106, 10, -32, 10,
          -92, 10, -66, 10, 10, 58, -125, 10,
          -32, 10, -92, 10, -73, 10, -32, 10,
          -91, 10, -115, 10, -32, 10, -92, 10,
          -96, 10, -32, 10, -92, 10, -83, 10,
          -32, 10, -91, 10, -126, 10, -32, 10,
          -92, 10, -82, 10, -32, 10, -92, 10,
          -65, 10, -32, 10, -92, 10, -90, 10,
          -32, 10, -91, 10, -126, 10, -32, 10,
          -92, 10, -86, 10, 10, 32, -32, 10,
          -92, 10, -78, 10, -32, 10, -91, 10,
          -121, 10, -32, 10, -92, 10, -106, 10,
          10, 95, 10, 70, 10, 69, 10, 65,
          10, 84, 10, 85, 10, 82, 10, 69,
          10, 95, 10, 69, 10, 78, 10, 68,
          10, 95, 10, 37, -125, -32, -92, -73,
          -32, -91, -115, -32, -92, -96, -32, -92,
          -83, -32, -91, -126, -32, -92, -82, -32,
          -92, -65, 58, 10, 10, -32, 10, 32,
          35, 37, 42, 64, 9, 13, -92, 10,
          -123, -108, -107, -102, -100, -92, -86, -81,
          -80, 10, -32, 10, -92, 10, -105, 10,
          -32, 10, -92, 10, -80, 10, 10, 32,
          -32, 10, -92, 10, -90, -65, 10, -32,
          10, -92, 10, -66, 10, -32, 10, -92,
          10, -88, 10, -32, 10, -91, 10, -115,
          10, -32, 10, -92, 10, -92, 10, -32,
          10, -91, 10, -127, 10, -32, 10, -91,
          10, -126, 10, -32, 10, -92, 10, -126,
          10, -32, 10, -92, 10, -107, 10, -32,
          10, -92, 10, -65, 10, -32, 10, -92,
          10, -84, 10, -32, 10, -92, 10, -84,
          10, -91, -90, -32, 10, -92, 10, -80,
          10, -32, 10, 32, -92, 10, -88, -65,
          10, -32, 10, -92, 10, -90, 10, -32,
          10, -91, 10, -125, 10, -32, 10, -92,
          10, -74, 10, -32, 10, -91, 10, -115,
          10, -32, 10, -92, 10, -81, 10, 10,
          32, 58, -32, 10, -92, 10, -80, 10,
          -32, 10, -91, 10, -126, 10, -32, 10,
          -92, 10, -86, 10, -32, 10, -92, 10,
          -80, 10, -32, 10, -91, 10, -121, 10,
          -32, 10, -92, 10, -106, 10, -32, 10,
          -92, 10, -66, 10, 10, 58, -32, 10,
          -92, 10, -90, 10, -32, 10, -91, 10,
          -126, 10, -32, 10, -92, 10, -86, 10,
          10, 32, -32, 10, -92, 10, -78, 10,
          -32, 10, -91, 10, -121, 10, -32, 10,
          -92, 10, -106, 10, 10, 95, 10, 70,
          10, 69, 10, 65, 10, 84, 10, 85,
          10, 82, 10, 69, 10, 95, 10, 69,
          10, 78, 10, 68, 10, 95, 10, 37,
          -32, -92, -90, -32, -91, -126, -32, -92,
          -86, 32, -32, -92, -78, -32, -91, -121,
          -32, -92, -106, 58, 10, 10, -32, 10,
          32, 35, 37, 64, 9, 13, -92, 10,
          -119, -86, -80, 10, -32, 10, -92, 10,
          -90, 10, -32, 10, -92, 10, -66, 10,
          -32, 10, -92, 10, -71, 10, -32, 10,
          -92, 10, -80, 10, -32, 10, -92, 10,
          -93, 10, 10, 58, -32, 10, -92, -91,
          10, -80, 10, -32, 10, -92, 10, -65,
          10, -32, 10, -92, 10, -90, 10, -32,
          10, -91, 10, -125, 10, -32, 10, -92,
          10, -74, 10, -32, 10, -91, 10, -115,
          10, -32, 10, -92, 10, -81, 10, 10,
          32, 58, -32, 10, -92, 10, -80, 10,
          -32, 10, -91, 10, -126, 10, -32, 10,
          -92, 10, -86, 10, -32, 10, -92, 10,
          -80, 10, -32, 10, -91, 10, -121, 10,
          -32, 10, -92, 10, -106, 10, -32, 10,
          -92, 10, -66, 10, -125, 10, -32, 10,
          -92, 10, -73, 10, -32, 10, -91, 10,
          -115, 10, -32, 10, -92, 10, -96, 10,
          -32, 10, -92, 10, -83, 10, -32, 10,
          -91, 10, -126, 10, -32, 10, -92, 10,
          -82, 10, -32, 10, -92, 10, -65, 10,
          -32, 10, -91, 10, -126, 10, -32, 10,
          -92, 10, -86, 10, 10, 32, -32, 10,
          -92, 10, -78, 10, -32, 10, -91, 10,
          -121, 10, -32, 10, -92, 10, -106, 10,
          10, 95, 10, 70, 10, 69, 10, 65,
          10, 84, 10, 85, 10, 82, 10, 69,
          10, 95, 10, 69, 10, 78, 10, 68,
          10, 95, 10, 37, -69, -65, 0
        ]

        class << self
          attr_accessor :_lexer_single_lengths
          private :_lexer_single_lengths, :_lexer_single_lengths=
        end
        self._lexer_single_lengths = [
          0, 10, 1, 10, 1, 1, 1, 1,
          1, 1, 1, 2, 2, 9, 1, 1,
          2, 2, 3, 3, 3, 3, 2, 2,
          2, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          3, 5, 3, 2, 4, 3, 2, 4,
          9, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 5, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 9,
          1, 1, 2, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 2, 1, 2,
          1, 2, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 2, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 7, 2, 10, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 3, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 3, 2, 3, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 1,
          1, 7, 2, 10, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 3, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 3, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 7, 2, 10, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 3,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 3, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 3, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 6, 2, 4, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          3, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 3, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 1, 1,
          0
        ]

        class << self
          attr_accessor :_lexer_range_lengths
          private :_lexer_range_lengths, :_lexer_range_lengths=
        end
        self._lexer_range_lengths = [
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 1, 0, 0,
          0, 0, 1, 1, 1, 1, 1, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          1, 1, 1, 1, 1, 0, 0, 1,
          1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 1,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 1, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          1, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0
        ]

        class << self
          attr_accessor :_lexer_index_offsets
          private :_lexer_index_offsets, :_lexer_index_offsets=
        end
        self._lexer_index_offsets = [
          0, 0, 12, 14, 25, 27, 29, 31,
          33, 35, 37, 39, 42, 45, 56, 58,
          60, 63, 66, 71, 76, 81, 86, 90,
          94, 97, 99, 101, 103, 105, 107, 109,
          111, 113, 115, 117, 119, 121, 123, 125,
          127, 132, 139, 144, 148, 154, 158, 161,
          167, 178, 180, 182, 184, 186, 188, 190,
          192, 194, 196, 198, 200, 202, 204, 206,
          208, 210, 212, 214, 221, 224, 227, 230,
          233, 236, 239, 242, 245, 248, 251, 254,
          257, 260, 263, 266, 269, 272, 275, 278,
          289, 291, 293, 296, 298, 300, 302, 304,
          306, 308, 310, 312, 314, 316, 318, 320,
          322, 324, 326, 328, 330, 332, 334, 336,
          338, 340, 342, 344, 346, 348, 350, 352,
          354, 356, 358, 360, 363, 365, 368, 370,
          373, 375, 378, 380, 382, 384, 386, 388,
          390, 392, 394, 396, 398, 400, 402, 404,
          406, 408, 411, 413, 415, 417, 419, 421,
          423, 425, 427, 429, 431, 433, 435, 437,
          439, 441, 443, 445, 447, 449, 451, 453,
          455, 457, 459, 468, 471, 482, 485, 488,
          491, 494, 497, 500, 503, 506, 509, 513,
          516, 519, 522, 525, 528, 531, 534, 537,
          540, 543, 546, 549, 552, 555, 558, 561,
          564, 567, 570, 573, 576, 579, 582, 585,
          588, 591, 594, 597, 600, 603, 606, 609,
          613, 616, 619, 622, 626, 629, 633, 636,
          639, 642, 645, 648, 651, 654, 657, 660,
          663, 666, 669, 672, 675, 678, 681, 684,
          687, 690, 693, 696, 699, 702, 705, 708,
          711, 714, 717, 720, 723, 726, 729, 732,
          735, 738, 741, 744, 747, 750, 753, 756,
          759, 762, 765, 768, 771, 774, 777, 780,
          782, 784, 793, 796, 807, 810, 813, 816,
          819, 822, 825, 828, 831, 834, 838, 841,
          844, 847, 850, 853, 856, 859, 862, 865,
          868, 871, 874, 877, 880, 883, 886, 889,
          892, 895, 898, 901, 904, 907, 910, 913,
          916, 919, 922, 925, 928, 931, 934, 938,
          941, 945, 948, 952, 955, 959, 962, 965,
          968, 971, 974, 977, 980, 983, 986, 989,
          992, 995, 998, 1001, 1004, 1008, 1011, 1014,
          1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038,
          1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062,
          1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086,
          1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110,
          1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134,
          1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158,
          1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182,
          1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206,
          1209, 1212, 1215, 1218, 1221, 1224, 1227, 1230,
          1233, 1236, 1239, 1241, 1243, 1245, 1247, 1249,
          1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265,
          1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281,
          1283, 1285, 1287, 1289, 1298, 1301, 1312, 1315,
          1318, 1321, 1324, 1327, 1330, 1333, 1336, 1339,
          1343, 1346, 1349, 1352, 1355, 1358, 1361, 1364,
          1367, 1370, 1373, 1376, 1379, 1382, 1385, 1388,
          1391, 1394, 1397, 1400, 1403, 1406, 1409, 1412,
          1415, 1418, 1421, 1424, 1427, 1430, 1433, 1436,
          1439, 1443, 1446, 1449, 1452, 1456, 1459, 1463,
          1466, 1469, 1472, 1475, 1478, 1481, 1484, 1487,
          1490, 1493, 1496, 1499, 1502, 1505, 1508, 1512,
          1515, 1518, 1521, 1524, 1527, 1530, 1533, 1536,
          1539, 1542, 1545, 1548, 1551, 1554, 1557, 1560,
          1563, 1566, 1569, 1572, 1575, 1578, 1581, 1584,
          1587, 1590, 1593, 1596, 1599, 1602, 1605, 1608,
          1611, 1614, 1617, 1620, 1623, 1626, 1629, 1632,
          1635, 1638, 1641, 1644, 1647, 1650, 1653, 1656,
          1659, 1662, 1665, 1668, 1671, 1674, 1677, 1679,
          1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695,
          1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711,
          1713, 1715, 1717, 1719, 1721, 1729, 1732, 1737,
          1740, 1743, 1746, 1749, 1752, 1755, 1758, 1761,
          1764, 1767, 1770, 1773, 1776, 1779, 1782, 1785,
          1788, 1792, 1795, 1798, 1801, 1804, 1807, 1810,
          1813, 1816, 1819, 1822, 1825, 1828, 1831, 1834,
          1837, 1840, 1843, 1846, 1849, 1853, 1856, 1859,
          1862, 1865, 1868, 1871, 1874, 1877, 1880, 1883,
          1886, 1889, 1892, 1895, 1898, 1901, 1904, 1907,
          1910, 1913, 1916, 1919, 1922, 1925, 1928, 1931,
          1934, 1937, 1940, 1943, 1946, 1949, 1952, 1955,
          1958, 1961, 1964, 1967, 1970, 1973, 1976, 1979,
          1982, 1985, 1988, 1991, 1994, 1997, 2000, 2003,
          2006, 2009, 2012, 2015, 2018, 2021, 2024, 2027,
          2030, 2033, 2036, 2039, 2042, 2045, 2048, 2051,
          2054, 2057, 2060, 2063, 2066, 2069, 2072, 2074,
          2076
        ]

        class << self
          attr_accessor :_lexer_indicies
          private :_lexer_indicies, :_lexer_indicies=
        end
        self._lexer_indicies = [
          1, 2, 4, 3, 5, 6, 7, 8,
          9, 10, 3, 0, 11, 0, 12, 13,
          14, 15, 16, 17, 18, 19, 20, 21,
          0, 22, 0, 23, 0, 14, 0, 24,
          0, 25, 0, 26, 0, 27, 0, 29,
          30, 28, 32, 33, 31, 1, 4, 3,
          5, 6, 7, 8, 9, 10, 3, 0,
          34, 0, 35, 0, 37, 38, 36, 40,
          41, 39, 44, 43, 45, 43, 42, 48,
          47, 49, 47, 46, 48, 47, 50, 47,
          46, 48, 47, 51, 47, 46, 53, 52,
          52, 0, 4, 54, 54, 0, 56, 57,
          55, 4, 0, 58, 0, 59, 0, 60,
          0, 61, 0, 62, 0, 63, 0, 64,
          0, 65, 0, 66, 0, 67, 0, 68,
          0, 69, 0, 70, 0, 71, 0, 0,
          0, 0, 0, 72, 73, 74, 73, 73,
          76, 75, 72, 4, 77, 9, 77, 0,
          78, 79, 78, 0, 82, 81, 83, 84,
          81, 80, 0, 86, 87, 85, 0, 86,
          85, 82, 88, 86, 87, 88, 85, 89,
          82, 90, 91, 92, 93, 94, 95, 96,
          90, 0, 97, 0, 98, 0, 99, 0,
          100, 0, 101, 0, 102, 0, 103, 0,
          104, 0, 105, 0, 106, 0, 107, 0,
          108, 0, 109, 0, 110, 0, 111, 0,
          112, 0, 114, 113, 116, 115, 117, 116,
          118, 119, 119, 118, 115, 120, 116, 115,
          121, 116, 115, 122, 116, 115, 123, 116,
          115, 124, 116, 115, 125, 116, 115, 126,
          116, 115, 127, 116, 115, 116, 128, 115,
          129, 116, 115, 130, 116, 115, 131, 116,
          115, 132, 116, 115, 133, 116, 115, 134,
          116, 115, 135, 116, 115, 136, 116, 115,
          137, 116, 115, 116, 138, 115, 139, 141,
          140, 142, 143, 144, 145, 146, 147, 140,
          0, 148, 0, 149, 0, 150, 151, 0,
          152, 0, 153, 0, 26, 0, 154, 0,
          155, 0, 156, 0, 157, 0, 158, 0,
          159, 0, 160, 0, 161, 0, 162, 0,
          163, 0, 164, 0, 26, 0, 165, 0,
          166, 0, 167, 0, 168, 0, 169, 0,
          170, 0, 171, 0, 172, 0, 173, 0,
          174, 0, 175, 0, 26, 0, 176, 0,
          177, 0, 26, 0, 178, 0, 179, 0,
          26, 150, 0, 180, 0, 181, 182, 0,
          183, 0, 184, 27, 0, 185, 0, 156,
          186, 0, 187, 0, 188, 0, 189, 0,
          190, 0, 191, 0, 192, 0, 193, 0,
          194, 0, 195, 0, 196, 0, 197, 0,
          198, 0, 199, 0, 200, 0, 201, 0,
          202, 203, 0, 204, 0, 205, 0, 206,
          0, 207, 0, 208, 0, 209, 0, 210,
          0, 211, 0, 212, 0, 213, 0, 214,
          0, 215, 0, 216, 0, 217, 0, 218,
          0, 219, 0, 220, 0, 221, 0, 222,
          0, 223, 0, 224, 0, 225, 0, 227,
          226, 229, 228, 230, 229, 231, 232, 233,
          234, 232, 231, 228, 235, 229, 228, 236,
          237, 238, 239, 240, 241, 242, 243, 244,
          229, 228, 245, 229, 228, 246, 229, 228,
          237, 229, 228, 247, 229, 228, 248, 229,
          228, 249, 229, 228, 229, 250, 228, 251,
          229, 228, 252, 229, 228, 253, 254, 229,
          228, 255, 229, 228, 256, 229, 228, 249,
          229, 228, 257, 229, 228, 258, 229, 228,
          259, 229, 228, 260, 229, 228, 261, 229,
          228, 262, 229, 228, 263, 229, 228, 264,
          229, 228, 265, 229, 228, 266, 229, 228,
          267, 229, 228, 249, 229, 228, 268, 229,
          228, 269, 229, 228, 270, 229, 228, 271,
          229, 228, 272, 229, 228, 273, 229, 228,
          274, 229, 228, 275, 229, 228, 276, 229,
          228, 277, 229, 228, 278, 229, 228, 249,
          229, 228, 279, 229, 228, 280, 229, 228,
          249, 229, 228, 281, 229, 228, 282, 229,
          228, 249, 229, 253, 228, 283, 229, 228,
          284, 229, 228, 285, 229, 228, 286, 229,
          250, 228, 287, 229, 228, 259, 288, 229,
          228, 289, 229, 228, 290, 229, 228, 291,
          229, 228, 292, 229, 228, 293, 229, 228,
          294, 229, 228, 295, 229, 228, 296, 229,
          228, 297, 229, 228, 298, 229, 228, 299,
          229, 228, 300, 229, 228, 301, 229, 228,
          302, 229, 228, 303, 229, 228, 229, 250,
          228, 304, 229, 228, 305, 229, 228, 276,
          229, 228, 306, 229, 228, 307, 229, 228,
          308, 229, 228, 309, 229, 228, 310, 229,
          228, 311, 229, 228, 229, 312, 228, 313,
          229, 228, 314, 229, 228, 315, 229, 228,
          316, 229, 228, 317, 229, 228, 318, 229,
          228, 319, 229, 228, 320, 229, 228, 303,
          229, 228, 229, 321, 228, 229, 322, 228,
          229, 323, 228, 229, 324, 228, 229, 325,
          228, 229, 326, 228, 229, 327, 228, 229,
          328, 228, 229, 329, 228, 229, 330, 228,
          229, 331, 228, 229, 332, 228, 229, 333,
          228, 229, 334, 228, 336, 335, 338, 337,
          339, 338, 340, 341, 342, 343, 341, 340,
          337, 344, 338, 337, 345, 346, 347, 348,
          349, 350, 351, 352, 353, 338, 337, 354,
          338, 337, 355, 338, 337, 346, 338, 337,
          356, 338, 337, 357, 338, 337, 358, 338,
          337, 338, 359, 337, 360, 338, 337, 361,
          338, 337, 362, 363, 338, 337, 364, 338,
          337, 365, 338, 337, 358, 338, 337, 366,
          338, 337, 367, 338, 337, 368, 338, 337,
          369, 338, 337, 370, 338, 337, 371, 338,
          337, 372, 338, 337, 373, 338, 337, 374,
          338, 337, 375, 338, 337, 376, 338, 337,
          358, 338, 337, 377, 338, 337, 378, 338,
          337, 379, 338, 337, 380, 338, 337, 381,
          338, 337, 382, 338, 337, 383, 338, 337,
          384, 338, 337, 385, 338, 337, 386, 338,
          337, 387, 338, 337, 358, 338, 337, 388,
          338, 337, 389, 338, 337, 358, 338, 337,
          390, 338, 337, 391, 338, 337, 358, 338,
          362, 337, 392, 338, 337, 393, 394, 338,
          337, 395, 338, 337, 396, 338, 359, 337,
          397, 338, 337, 368, 398, 338, 337, 399,
          338, 337, 400, 338, 337, 401, 338, 337,
          402, 338, 337, 403, 338, 337, 404, 338,
          337, 405, 338, 337, 406, 338, 337, 407,
          338, 337, 408, 338, 337, 409, 338, 337,
          410, 338, 337, 411, 338, 337, 412, 338,
          337, 413, 338, 337, 338, 414, 359, 337,
          415, 338, 337, 416, 338, 337, 417, 338,
          337, 418, 338, 337, 419, 338, 337, 420,
          338, 337, 421, 338, 337, 422, 338, 337,
          423, 338, 337, 424, 338, 337, 425, 338,
          337, 426, 338, 337, 427, 338, 337, 428,
          338, 337, 429, 338, 337, 430, 338, 337,
          431, 338, 337, 432, 338, 337, 433, 338,
          337, 434, 338, 337, 435, 338, 337, 338,
          359, 337, 436, 338, 337, 437, 338, 337,
          438, 338, 337, 439, 338, 337, 440, 338,
          337, 441, 338, 337, 442, 338, 337, 443,
          338, 337, 444, 338, 337, 445, 338, 337,
          446, 338, 337, 447, 338, 337, 448, 338,
          337, 449, 338, 337, 450, 338, 337, 451,
          338, 337, 452, 338, 337, 453, 338, 337,
          454, 338, 337, 455, 338, 337, 456, 338,
          337, 435, 338, 337, 457, 338, 337, 458,
          338, 337, 385, 338, 337, 459, 338, 337,
          460, 338, 337, 461, 338, 337, 462, 338,
          337, 463, 338, 337, 464, 338, 337, 338,
          465, 337, 466, 338, 337, 467, 338, 337,
          468, 338, 337, 469, 338, 337, 470, 338,
          337, 471, 338, 337, 472, 338, 337, 473,
          338, 337, 435, 338, 337, 338, 474, 337,
          338, 475, 337, 338, 476, 337, 338, 477,
          337, 338, 478, 337, 338, 479, 337, 338,
          480, 337, 338, 481, 337, 338, 482, 337,
          338, 483, 337, 338, 484, 337, 338, 485,
          337, 338, 486, 337, 338, 487, 337, 488,
          0, 489, 0, 490, 0, 491, 0, 492,
          0, 493, 0, 494, 0, 495, 0, 496,
          0, 497, 0, 498, 0, 499, 0, 500,
          0, 501, 0, 502, 0, 503, 0, 504,
          0, 505, 0, 506, 0, 507, 0, 508,
          0, 509, 0, 510, 0, 512, 511, 514,
          513, 515, 514, 516, 517, 518, 519, 517,
          516, 513, 520, 514, 513, 521, 522, 523,
          524, 525, 526, 527, 528, 529, 514, 513,
          530, 514, 513, 531, 514, 513, 522, 514,
          513, 532, 514, 513, 533, 514, 513, 534,
          514, 513, 514, 535, 513, 536, 514, 513,
          537, 514, 513, 538, 539, 514, 513, 540,
          514, 513, 541, 514, 513, 534, 514, 513,
          542, 514, 513, 543, 514, 513, 544, 514,
          513, 545, 514, 513, 546, 514, 513, 547,
          514, 513, 548, 514, 513, 549, 514, 513,
          550, 514, 513, 551, 514, 513, 552, 514,
          513, 534, 514, 513, 553, 514, 513, 554,
          514, 513, 555, 514, 513, 556, 514, 513,
          557, 514, 513, 558, 514, 513, 559, 514,
          513, 560, 514, 513, 561, 514, 513, 562,
          514, 513, 563, 514, 513, 534, 514, 513,
          564, 514, 513, 565, 514, 513, 534, 514,
          513, 566, 514, 513, 567, 514, 513, 534,
          514, 538, 513, 568, 514, 513, 569, 514,
          513, 570, 514, 513, 571, 514, 535, 513,
          572, 514, 513, 544, 573, 514, 513, 574,
          514, 513, 575, 514, 513, 576, 514, 513,
          577, 514, 513, 578, 514, 513, 579, 514,
          513, 580, 514, 513, 581, 514, 513, 582,
          514, 513, 583, 514, 513, 584, 514, 513,
          585, 514, 513, 586, 514, 513, 587, 514,
          513, 588, 514, 513, 514, 589, 535, 513,
          590, 514, 513, 591, 514, 513, 592, 514,
          513, 593, 514, 513, 594, 514, 513, 595,
          514, 513, 596, 514, 513, 597, 514, 513,
          598, 514, 513, 599, 514, 513, 600, 514,
          513, 601, 514, 513, 602, 514, 513, 603,
          514, 513, 604, 514, 513, 605, 514, 513,
          606, 514, 513, 607, 514, 513, 608, 514,
          513, 609, 514, 513, 610, 514, 513, 514,
          535, 513, 611, 514, 513, 612, 514, 513,
          561, 514, 513, 613, 514, 513, 614, 514,
          513, 615, 514, 513, 616, 514, 513, 617,
          514, 513, 618, 514, 513, 514, 619, 513,
          620, 514, 513, 621, 514, 513, 622, 514,
          513, 623, 514, 513, 624, 514, 513, 625,
          514, 513, 626, 514, 513, 627, 514, 513,
          610, 514, 513, 514, 628, 513, 514, 629,
          513, 514, 630, 513, 514, 631, 513, 514,
          632, 513, 514, 633, 513, 514, 634, 513,
          514, 635, 513, 514, 636, 513, 514, 637,
          513, 514, 638, 513, 514, 639, 513, 514,
          640, 513, 514, 641, 513, 642, 0, 643,
          0, 173, 0, 644, 0, 645, 0, 646,
          0, 647, 0, 648, 0, 649, 0, 650,
          0, 651, 0, 652, 0, 653, 0, 654,
          0, 655, 0, 656, 0, 657, 0, 658,
          0, 659, 0, 660, 0, 662, 661, 664,
          663, 665, 664, 666, 667, 668, 667, 666,
          663, 669, 664, 663, 670, 671, 672, 664,
          663, 673, 664, 663, 674, 664, 663, 675,
          664, 663, 676, 664, 663, 677, 664, 663,
          678, 664, 663, 679, 664, 663, 680, 664,
          663, 681, 664, 663, 682, 664, 663, 683,
          664, 663, 684, 664, 663, 685, 664, 663,
          686, 664, 663, 687, 664, 663, 664, 688,
          663, 689, 664, 663, 690, 691, 664, 663,
          692, 664, 663, 693, 664, 663, 694, 664,
          663, 695, 664, 663, 696, 664, 663, 697,
          664, 663, 698, 664, 663, 699, 664, 663,
          700, 664, 663, 701, 664, 663, 702, 664,
          663, 703, 664, 663, 704, 664, 663, 705,
          664, 663, 706, 664, 663, 707, 664, 663,
          708, 664, 663, 709, 664, 663, 710, 664,
          663, 664, 711, 688, 663, 712, 664, 663,
          713, 664, 663, 714, 664, 663, 715, 664,
          663, 716, 664, 663, 717, 664, 663, 718,
          664, 663, 719, 664, 663, 720, 664, 663,
          721, 664, 663, 722, 664, 663, 723, 664,
          663, 724, 664, 663, 725, 664, 663, 726,
          664, 663, 727, 664, 663, 728, 664, 663,
          729, 664, 663, 730, 664, 663, 731, 664,
          663, 687, 664, 663, 732, 664, 663, 733,
          664, 663, 734, 664, 663, 735, 664, 663,
          736, 664, 663, 737, 664, 663, 738, 664,
          663, 739, 664, 663, 740, 664, 663, 741,
          664, 663, 742, 664, 663, 743, 664, 663,
          744, 664, 663, 745, 664, 663, 746, 664,
          663, 747, 664, 663, 748, 664, 663, 749,
          664, 663, 750, 664, 663, 751, 664, 663,
          752, 664, 663, 687, 664, 663, 753, 664,
          663, 754, 664, 663, 755, 664, 663, 756,
          664, 663, 757, 664, 663, 758, 664, 663,
          664, 759, 663, 760, 664, 663, 761, 664,
          663, 762, 664, 663, 763, 664, 663, 764,
          664, 663, 765, 664, 663, 766, 664, 663,
          767, 664, 663, 687, 664, 663, 664, 768,
          663, 664, 769, 663, 664, 770, 663, 664,
          771, 663, 664, 772, 663, 664, 773, 663,
          664, 774, 663, 664, 775, 663, 664, 776,
          663, 664, 777, 663, 664, 778, 663, 664,
          779, 663, 664, 780, 663, 664, 781, 663,
          782, 0, 3, 0, 783, 0
        ]

        class << self
          attr_accessor :_lexer_trans_targs
          private :_lexer_trans_targs, :_lexer_trans_targs=
        end
        self._lexer_trans_targs = [
          0, 2, 702, 13, 13, 14, 24, 26,
          10, 40, 43, 3, 4, 49, 7, 88,
          106, 118, 121, 124, 566, 569, 5, 6,
          8, 9, 10, 11, 12, 13, 25, 12,
          13, 25, 15, 16, 17, 18, 17, 17,
          18, 17, 19, 19, 19, 20, 19, 19,
          19, 20, 21, 22, 23, 13, 23, 24,
          13, 25, 27, 28, 29, 30, 31, 32,
          33, 34, 35, 36, 37, 38, 39, 704,
          41, 42, 13, 41, 40, 42, 43, 44,
          45, 47, 48, 46, 44, 45, 46, 44,
          47, 2, 48, 14, 24, 26, 10, 40,
          43, 50, 51, 52, 53, 54, 55, 56,
          57, 58, 59, 60, 61, 62, 63, 64,
          65, 66, 67, 66, 67, 68, 67, 13,
          69, 70, 71, 72, 73, 74, 75, 76,
          77, 78, 79, 80, 81, 82, 83, 84,
          85, 86, 87, 2, 13, 13, 14, 24,
          26, 10, 40, 43, 89, 90, 91, 94,
          92, 93, 95, 96, 97, 98, 99, 100,
          101, 102, 103, 104, 105, 107, 108, 109,
          110, 111, 112, 113, 114, 115, 116, 117,
          119, 120, 122, 123, 125, 126, 418, 127,
          128, 129, 130, 131, 132, 133, 134, 135,
          136, 137, 138, 139, 140, 141, 142, 143,
          144, 145, 146, 271, 147, 148, 149, 150,
          151, 152, 153, 154, 155, 156, 157, 158,
          159, 160, 161, 162, 163, 164, 165, 166,
          167, 168, 169, 170, 169, 170, 171, 170,
          13, 257, 179, 172, 173, 176, 180, 198,
          210, 213, 216, 238, 241, 174, 175, 177,
          178, 179, 87, 181, 182, 183, 186, 184,
          185, 187, 188, 189, 190, 191, 192, 193,
          194, 195, 196, 197, 199, 200, 201, 202,
          203, 204, 205, 206, 207, 208, 209, 211,
          212, 214, 215, 217, 218, 219, 220, 221,
          222, 223, 224, 225, 226, 227, 228, 229,
          230, 231, 232, 233, 234, 235, 236, 237,
          239, 240, 242, 243, 244, 245, 246, 247,
          248, 249, 250, 251, 252, 253, 254, 255,
          256, 258, 259, 260, 261, 262, 263, 264,
          265, 266, 267, 268, 269, 270, 13, 272,
          273, 272, 273, 274, 273, 13, 404, 282,
          275, 276, 279, 283, 301, 313, 316, 319,
          385, 388, 277, 278, 280, 281, 282, 87,
          284, 285, 286, 289, 287, 288, 290, 291,
          292, 293, 294, 295, 296, 297, 298, 299,
          300, 302, 303, 304, 305, 306, 307, 308,
          309, 310, 311, 312, 314, 315, 317, 318,
          320, 321, 363, 322, 323, 324, 325, 326,
          327, 328, 329, 330, 331, 332, 333, 334,
          335, 336, 337, 338, 339, 340, 341, 342,
          343, 344, 345, 346, 347, 348, 349, 350,
          351, 352, 353, 354, 355, 356, 357, 358,
          359, 360, 361, 362, 364, 365, 366, 367,
          368, 369, 370, 371, 372, 373, 374, 375,
          376, 377, 378, 379, 380, 381, 382, 383,
          384, 386, 387, 389, 390, 391, 392, 393,
          394, 395, 396, 397, 398, 399, 400, 401,
          402, 403, 405, 406, 407, 408, 409, 410,
          411, 412, 413, 414, 415, 416, 417, 13,
          419, 420, 421, 422, 423, 424, 425, 426,
          427, 428, 429, 430, 431, 432, 433, 434,
          435, 436, 437, 438, 439, 440, 441, 442,
          443, 442, 443, 444, 443, 13, 552, 452,
          445, 446, 449, 453, 471, 483, 486, 489,
          533, 536, 447, 448, 450, 451, 452, 87,
          454, 455, 456, 459, 457, 458, 460, 461,
          462, 463, 464, 465, 466, 467, 468, 469,
          470, 472, 473, 474, 475, 476, 477, 478,
          479, 480, 481, 482, 484, 485, 487, 488,
          490, 491, 492, 493, 494, 495, 496, 497,
          498, 499, 500, 501, 502, 503, 504, 505,
          506, 507, 508, 509, 510, 511, 512, 513,
          514, 515, 516, 517, 518, 519, 520, 521,
          522, 523, 524, 525, 526, 527, 528, 529,
          530, 531, 532, 534, 535, 537, 538, 539,
          540, 541, 542, 543, 544, 545, 546, 547,
          548, 549, 550, 551, 553, 554, 555, 556,
          557, 558, 559, 560, 561, 562, 563, 564,
          565, 13, 567, 568, 570, 571, 572, 573,
          574, 575, 576, 577, 578, 579, 580, 581,
          582, 583, 584, 585, 586, 587, 588, 587,
          588, 589, 588, 13, 688, 590, 591, 607,
          672, 592, 593, 594, 595, 596, 597, 598,
          599, 600, 601, 602, 603, 604, 605, 606,
          87, 608, 609, 650, 610, 611, 612, 613,
          614, 615, 616, 617, 618, 619, 620, 621,
          622, 623, 624, 625, 626, 627, 628, 629,
          630, 631, 632, 633, 634, 635, 636, 637,
          638, 639, 640, 641, 642, 643, 644, 645,
          646, 647, 648, 649, 651, 652, 653, 654,
          655, 656, 657, 658, 659, 660, 661, 662,
          663, 664, 665, 666, 667, 668, 669, 670,
          671, 673, 674, 675, 676, 677, 678, 679,
          680, 681, 682, 683, 684, 685, 686, 687,
          689, 690, 691, 692, 693, 694, 695, 696,
          697, 698, 699, 700, 701, 13, 703, 0
        ]

        class << self
          attr_accessor :_lexer_trans_actions
          private :_lexer_trans_actions, :_lexer_trans_actions=
        end
        self._lexer_trans_actions = [
          43, 29, 0, 0, 54, 3, 1, 0,
          29, 1, 35, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 57, 149, 126, 0,
          110, 23, 0, 0, 7, 139, 48, 0,
          102, 9, 5, 45, 134, 45, 0, 33,
          122, 33, 33, 0, 11, 106, 0, 0,
          114, 25, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 27, 118, 27, 51, 0, 0, 0,
          37, 37, 54, 37, 87, 0, 0, 39,
          0, 96, 0, 93, 90, 41, 96, 90,
          99, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 57, 144, 0, 54, 84, 0, 81,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 21, 63, 31, 130, 60, 57,
          31, 63, 57, 66, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 57, 144, 0, 54, 84, 0,
          78, 33, 84, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 19, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 19, 57,
          144, 0, 54, 84, 0, 75, 33, 84,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 17,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 17,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 57,
          144, 0, 54, 84, 0, 72, 33, 84,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 15,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 15, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 57, 144, 0,
          54, 84, 0, 69, 33, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          13, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 13, 0, 0
        ]

        class << self
          attr_accessor :_lexer_eof_actions
          private :_lexer_eof_actions, :_lexer_eof_actions=
        end
        self._lexer_eof_actions = [
          0, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43, 43, 43, 43, 43, 43, 43, 43,
          43
        ]

        class << self
          attr_accessor :lexer_start
        end
        self.lexer_start = 1;
        class << self
          attr_accessor :lexer_first_final
        end
        self.lexer_first_final = 704;
        class << self
          attr_accessor :lexer_error
        end
        self.lexer_error = 0;

        class << self
          attr_accessor :lexer_en_main
        end
        self.lexer_en_main = 1;


        # line 133 "ragel/i18n/hi.rb.rl"
      end

      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length

        @line_number = 1
        @last_newline = 0


        # line 1218 "lib/gherkin/lexer/hi.rb"
        begin
          p ||= 0
          pe ||= data.length
          cs = lexer_start
        end

        # line 143 "ragel/i18n/hi.rb.rl"

        # line 1227 "lib/gherkin/lexer/hi.rb"
        begin
          _klen, _trans, _keys, _acts, _nacts = nil
          _goto_level = 0
          _resume = 10
          _eof_trans = 15
          _again = 20
          _test_eof = 30
          _out = 40
          while true
            _trigger_goto = false
            if _goto_level <= 0
              if p == pe
                _goto_level = _test_eof
                next
              end
              if cs == 0
                _goto_level = _out
                next
              end
            end
            if _goto_level <= _resume
              _keys = _lexer_key_offsets[cs]
              _trans = _lexer_index_offsets[cs]
              _klen = _lexer_single_lengths[cs]
              _break_match = false

              begin
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + _klen - 1

                  loop do
                    break if _upper < _lower
                    _mid = _lower + ( (_upper - _lower) >> 1 )

                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 1
                    elsif data[p].ord > _lexer_trans_keys[_mid]
                      _lower = _mid + 1
                    else
                      _trans += (_mid - _keys)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _keys += _klen
                  _trans += _klen
                end
                _klen = _lexer_range_lengths[cs]
                if _klen > 0
                  _lower = _keys
                  _upper = _keys + (_klen << 1) - 2
                  loop do
                    break if _upper < _lower
                    _mid = _lower + (((_upper-_lower) >> 1) & ~1)
                    if data[p].ord < _lexer_trans_keys[_mid]
                      _upper = _mid - 2
                    elsif data[p].ord > _lexer_trans_keys[_mid+1]
                      _lower = _mid + 2
                    else
                      _trans += ((_mid - _keys) >> 1)
                      _break_match = true
                      break
                    end
                  end # loop
                  break if _break_match
                  _trans += _klen
                end
              end while false
              _trans = _lexer_indicies[_trans]
              cs = _lexer_trans_targs[_trans]
              if _lexer_trans_actions[_trans] != 0
                _acts = _lexer_trans_actions[_trans]
                _nacts = _lexer_actions[_acts]
                _acts += 1
                while _nacts > 0
                  _nacts -= 1
                  _acts += 1
                  case _lexer_actions[_acts - 1]
                  when 0 then
                    # line 11 "ragel/i18n/hi.rb.rl"
                    begin

                      @content_start = p
                      @current_line = @line_number
                      @start_col = p - @last_newline - "#{@keyword}:".length
                    end
                  when 1 then
                    # line 17 "ragel/i18n/hi.rb.rl"
                    begin

                      @current_line = @line_number
                      @start_col = p - @last_newline
                    end
                  when 2 then
                    # line 22 "ragel/i18n/hi.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 3 then
                    # line 26 "ragel/i18n/hi.rb.rl"
                    begin

                      @docstring_content_type_start = p
                    end
                  when 4 then
                    # line 29 "ragel/i18n/hi.rb.rl"
                    begin

                      @docstring_content_type_end = p
                    end
                  when 5 then
                    # line 33 "ragel/i18n/hi.rb.rl"
                    begin

                      con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
                      con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
                      @listener.doc_string(con_type, con, @current_line)
                    end
                  when 6 then
                    # line 38 "ragel/i18n/hi.rb.rl"
                    begin

                      p = store_keyword_content(:feature, data, p, eof)
                    end
                  when 7 then
                    # line 42 "ragel/i18n/hi.rb.rl"
                    begin

                      p = store_keyword_content(:background, data, p, eof)
                    end
                  when 8 then
                    # line 46 "ragel/i18n/hi.rb.rl"
                    begin

                      p = store_keyword_content(:scenario, data, p, eof)
                    end
                  when 9 then
                    # line 50 "ragel/i18n/hi.rb.rl"
                    begin

                      p = store_keyword_content(:scenario_outline, data, p, eof)
                    end
                  when 10 then
                    # line 54 "ragel/i18n/hi.rb.rl"
                    begin

                      p = store_keyword_content(:examples, data, p, eof)
                    end
                  when 11 then
                    # line 58 "ragel/i18n/hi.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.step(@keyword, con, @current_line)
                    end
                  when 12 then
                    # line 63 "ragel/i18n/hi.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.comment(con, @line_number)
                      @keyword_start = nil
                    end
                  when 13 then
                    # line 69 "ragel/i18n/hi.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      @listener.tag(con, @current_line)
                      @keyword_start = nil
                    end
                  when 14 then
                    # line 75 "ragel/i18n/hi.rb.rl"
                    begin

                      @line_number += 1
                    end
                  when 15 then
                    # line 79 "ragel/i18n/hi.rb.rl"
                    begin

                      @last_newline = p + 1
                    end
                  when 16 then
                    # line 83 "ragel/i18n/hi.rb.rl"
                    begin

                      @keyword_start ||= p
                    end
                  when 17 then
                    # line 87 "ragel/i18n/hi.rb.rl"
                    begin

                      @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
                      @keyword_start = nil
                    end
                  when 18 then
                    # line 92 "ragel/i18n/hi.rb.rl"
                    begin

                      @next_keyword_start = p
                    end
                  when 19 then
                    # line 96 "ragel/i18n/hi.rb.rl"
                    begin

                      p = p - 1
                      current_row = []
                      @current_line = @line_number
                    end
                  when 20 then
                    # line 102 "ragel/i18n/hi.rb.rl"
                    begin

                      @content_start = p
                    end
                  when 21 then
                    # line 106 "ragel/i18n/hi.rb.rl"
                    begin

                      con = utf8_pack(data[@content_start...p]).strip
                      current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
                    end
                  when 22 then
                    # line 111 "ragel/i18n/hi.rb.rl"
                    begin

                      @listener.row(current_row, @current_line)
                    end
                  when 23 then
                    # line 115 "ragel/i18n/hi.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1471 "lib/gherkin/lexer/hi.rb"
                  end # action switch
                end
              end
              if _trigger_goto
                next
              end
            end
            if _goto_level <= _again
              if cs == 0
                _goto_level = _out
                next
              end
              p += 1
              if p != pe
                _goto_level = _resume
                next
              end
            end
            if _goto_level <= _test_eof
              if p == eof
                __acts = _lexer_eof_actions[cs]
                __nacts =  _lexer_actions[__acts]
                __acts += 1
                while __nacts > 0
                  __nacts -= 1
                  __acts += 1
                  case _lexer_actions[__acts - 1]
                  when 23 then
                    # line 115 "ragel/i18n/hi.rb.rl"
                    begin

                      if cs < lexer_first_final
                        content = current_line_content(data, p)
                        raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
                      else
                        @listener.eof
                      end
                    end
                    # line 1510 "lib/gherkin/lexer/hi.rb"
                  end # eof action switch
                end
                if _trigger_goto
                  next
                end
              end
            end
            if _goto_level <= _out
              break
            end
          end
        end

        # line 144 "ragel/i18n/hi.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end

      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9|2\.0/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
